WEBVTT

1
00:00:00.000 --> 00:00:04.560
So let's go ahead and get started. Welcome all. I'm really excited to have you here for the

2
00:00:04.560 --> 00:00:13.020
second workshop in our non-visual data science workshop series. I am Patrick Smyth, and I'll

3
00:00:13.020 --> 00:00:17.740
say a little about myself in a minute, but once we get some of the procedural stuff out of the way,

4
00:00:19.120 --> 00:00:25.800
this is the second workshop in the series. It is a workshop on an intro to data science

5
00:00:25.800 --> 00:00:29.920
fundamentals with pandas, and we'll talk about what pandas is. We'll even talk a little about

6
00:00:29.920 --> 00:00:33.720
what data science is, though that's a little bit of an unsatisfying answer sometimes.

7
00:00:35.040 --> 00:00:38.660
I'd also like to introduce our helpers who are going to be in the chat.

8
00:00:39.500 --> 00:00:43.860
We have with us Sarah Kane. Maybe, Sarah, you could say hi.

9
00:00:45.160 --> 00:00:49.520
Hi, my name is Sarah. I'll be one of the helpers today. I'll be teaching some of the tutorials

10
00:00:49.520 --> 00:00:58.200
later on.  Thank you, my co-leader. Elizabeth, do you want to introduce yourself?

11
00:01:01.040 --> 00:01:05.880
Yeah, hi everyone. My name is Elizabeth, and I am a postdoc at the Institute of Astronomy

12
00:01:06.460 --> 00:01:11.560
in Cambridge.  Today, I will try to answer your questions in the chat as quick as I can.

13
00:01:12.360 --> 00:01:18.220
Excellent. I don't know if Alex is here yet.  I am here.

14
00:01:18.820 --> 00:01:23.220
Excellent. Let me give you permission. You want to go ahead and introduce yourself?

15
00:01:24.100 --> 00:01:29.160
Hi, I'm Alex. I'm a PhD student at the Institute of Astronomy with Sarah and Elizabeth.

16
00:01:30.820 --> 00:01:34.540
I'm a Python man.  I will help you with all Python things in the chat.

17
00:01:35.660 --> 00:01:42.460
Thank you, Alex. We may also have joining us Stephen Zweibel, who is a

18
00:01:44.300 --> 00:01:49.020
Digital Scholarship Librarian at the Graduate Center, City University of New York here in New

19
00:01:49.020 --> 00:01:54.700
York.  Hello. Steve, you're online. Yes, I'm here.  Sorry. It's a snow day here.

20
00:01:56.680 --> 00:02:00.980
Yeah, your children are home, so I understand how this is, but thank you.

21
00:02:02.980 --> 00:02:09.400
It's also possible we may have Paul Alexander Bloom and Monika Thieu, who are two psychologists

22
00:02:09.400 --> 00:02:14.780
and also teachers of R and Python joining us. You may see them in the chat as well.

23
00:02:16.080 --> 00:02:21.900
Basically, the way the chat will work is if you have a question, place it in the chat.  If you want

24
00:02:21.900 --> 00:02:27.520
to ask your question privately, you can use the private chat interface on Zoom to reach out to

25
00:02:27.520 --> 00:02:33.620
one of the helpers specifically. We also, I believe, are having our helpers. Their names

26
00:02:33.620 --> 00:02:40.620
should have helper in them.  If that is the case, that will help you out if you want to send a

27
00:02:40.620 --> 00:02:45.320
private message. Just feel free to put most of your questions in the chat publicly, and a helper

28
00:02:45.320 --> 00:02:49.880
will either answer you either privately or publicly. They'll answer publicly if they think

29
00:02:49.880 --> 00:02:55.540
that the answer will help other people who are following along.  I'd like to now really quickly

30
00:02:55.540 --> 00:03:08.240
share a link to the curriculum for this workshop. It is on a website called GitHub.

31
00:03:09.840 --> 00:03:16.640
My recommendation is if you're using NVDA, GitHub tends to add a bunch of buttons and other

32
00:03:16.640 --> 00:03:23.660
information before you actually get to the curriculum part.  I would navigate by heading

33
00:03:23.660 --> 00:03:30.040
to the heading one on the page. It may not be the first heading one. Navigate by heading or H1

34
00:03:30.040 --> 00:03:37.540
to get to the beginning on each page of the actual curriculum.  We have our helpers.

35
00:03:38.580 --> 00:03:53.360
Let's go ahead and do a little introduction to the topic here. I'll just say who I am.  I'm

36
00:03:53.360 --> 00:04:03.960
background a little bit after the last one. I have retinitis pigmentosa, so it's a progressive

37
00:04:03.960 --> 00:04:12.220
eye condition. Over the last 15, 20 years, I've lost vision progressively, started outside it,

38
00:04:12.700 --> 00:04:19.420
and now I have about 2% vision remaining.  Some useful vision, I think, would be the word for

39
00:04:19.420 --> 00:04:24.800
that. I used to be very low vision, very focused on magnification, high contrast,

40
00:04:25.040 --> 00:04:29.400
and all of those assistive technologies. I still occasionally use those in some circumstances,

41
00:04:29.400 --> 00:04:36.380
but now I'm more of a daily screen reader user.  I also use Linux day to day. Sometimes,

42
00:04:36.480 --> 00:04:39.620
if you see me flailing around a little bit on Windows, then that gives some explanation.

43
00:04:41.080 --> 00:04:48.620
I come out of the digital humanities, which is a field in the humanities where we use computers

44
00:04:48.620 --> 00:04:52.300
to answer traditional humanities questions, so things like natural language processing,

45
00:04:52.980 --> 00:04:59.000
if you want to use a more programmer term, to analyze large data sets.  I also build websites

46
00:04:59.000 --> 00:05:05.520
and do other fun things like that. I started learning Python about 10 years ago, maybe a

47
00:05:05.520 --> 00:05:14.260
little more now, which makes me feel like time is really flying. I really felt when I learned Python

48
00:05:14.260 --> 00:05:21.780
that it really changed my perspective on using computers and empowering me to do things that I

49
00:05:21.780 --> 00:05:27.020
couldn't do before.  I really also found that I enjoyed teaching programming to other people

50
00:05:27.020 --> 00:05:31.460
because I like to share that feeling of empowerment, for lack of a better word,

51
00:05:31.560 --> 00:05:36.660
to give you new capabilities. I really enjoy that part of my job.

52
00:05:39.500 --> 00:05:47.620
I also want to thank NumFocus and the Pandas project.  We'll talk about Pandas in a minute,

53
00:05:47.720 --> 00:05:55.060
for funding these workshops. A special thanks to Patrick Hoffler, who is a Pandas core developer,

54
00:05:55.900 --> 00:06:03.240
who really stood up and allowed us to submit this grant. Thank you, Patrick.

55
00:06:03.240 --> 00:06:08.140
All right. Let's just say really quickly, and we'll move on from this very briefly,

56
00:06:08.240 --> 00:06:10.780
because I don't think this is a very... In a way, it's not that useful a question,

57
00:06:10.960 --> 00:06:15.040
but we're moving now into the data science part of this workshop series. The question is,

58
00:06:15.400 --> 00:06:22.060
what is data science? What are we doing when we do data science? What are we talking about when

59
00:06:22.060 --> 00:06:27.900
we talk about data science? Somewhere, a little hazy, but somewhere in the 2000s,

60
00:06:28.720 --> 00:06:35.500
all the statisticians started calling themselves data scientists, and actually got probably a big

61
00:06:35.500 --> 00:06:42.560
pay bump in the process.  Basically, that comes around a time when specialized programming tools

62
00:06:42.560 --> 00:06:50.200
emerged for working with data. It could be large, could be small, but often large data,

63
00:06:50.620 --> 00:06:57.320
and applying statistical methods, programming, other analytical methods to data.

64
00:06:58.000 --> 00:07:03.400
Data science hasn't really been around that long.  You can say it's a discipline where people apply

65
00:07:03.400 --> 00:07:09.540
programming, statistics, math, and other techniques to gain insights from data, I guess,

66
00:07:09.600 --> 00:07:15.640
would be the fancier definition from it. I will add one thing to that, which is that I think that

67
00:07:15.640 --> 00:07:20.200
there's a really important part of data science that is sometimes overlooked, which is that

68
00:07:20.960 --> 00:07:26.680
of a data scientist, it really gets a lot out of the context and understanding where data comes from,

69
00:07:26.680 --> 00:07:36.180
what happened to it along the way, and also making connections between things you know about

70
00:07:36.180 --> 00:07:41.740
the world, things about history, about business, about how people interact, different kinds of

71
00:07:41.740 --> 00:07:50.560
domains, applying that to an understanding of data. I come from the humanities, so I do think

72
00:07:50.560 --> 00:07:54.620
that the data has a little bit of a humanistic element that sometimes we don't talk that much

73
00:07:54.620 --> 00:08:01.460
about, but it's actually one of the key elements of being a good data scientist is that qualitative

74
00:08:01.460 --> 00:08:05.480
element as well as a quantitative element.  Data scientists do very different things on a daily

75
00:08:05.480 --> 00:08:09.100
basis. Some data scientists are more like engineers, and they create what are called

76
00:08:09.100 --> 00:08:18.680
data pipelines, but basically flows from some kind of business process or other process that

77
00:08:18.680 --> 00:08:28.040
generates data into a format form and an application where you can analyze it. That's

78
00:08:28.040 --> 00:08:34.340
one thing you could be doing.  Some data scientists are really communicators, and others are very

79
00:08:34.340 --> 00:08:40.059
mathematical. You might just work with models, which is basically a fancy way of saying

80
00:08:43.039 --> 00:08:51.760
simplifications of the world that allow you to answer questions about data and transform data

81
00:08:51.760 --> 00:08:56.840
into a more simplified form. There's lots of different types of jobs you can have as a data

82
00:08:56.840 --> 00:09:02.460
scientist and a lot of different ways, things you can call yourself within data science as well.

83
00:09:03.500 --> 00:09:09.580
Now, what are we going to be doing today? Today, we're going to be continuing to use

84
00:09:09.580 --> 00:09:16.680
Python, which we were introduced to last week. We'll continue to learn IPython, which is a

85
00:09:17.500 --> 00:09:24.160
specific way of interacting with Python through the command line. It's a fancy Python interpreter,

86
00:09:24.440 --> 00:09:28.740
basically a program that allows you to have a conversation with Python.  It's a fancy version

87
00:09:28.740 --> 00:09:36.540
of that. We're doing all of that in our Anaconda distribution. Anaconda is the way that IPython

88
00:09:36.540 --> 00:09:42.740
comes to us by installing this Anaconda distribution, which is Python with a bunch of extra

89
00:09:42.740 --> 00:09:47.820
stuff included.  I know that's a lot of names that all have Python and stuff in them, but

90
00:09:48.980 --> 00:09:53.060
we're going to continue to use all that tools, but we're going to be adding something, and that is

91
00:09:53.060 --> 00:09:59.900
the Pandas library. We learned last week that a library is basically a big pile of code that you

92
00:09:59.900 --> 00:10:06.940
can pull into your code, and the Python-specific term, the technical term for a library is a

93
00:10:06.940 --> 00:10:14.620
module, and we will be using the Pandas library, Pandas module. People always ask what Pandas

94
00:10:14.620 --> 00:10:19.260
stands for.  It's more of a historical name. It's a cool name. It's a cute name.  We all like pandas.

95
00:10:19.300 --> 00:10:28.320
We all like bears. Maybe some of us don't, but I do.  But the name basically is short for panel

96
00:10:28.320 --> 00:10:40.300
data, or panel datas, I guess, and panel data is a type of data related to a series of data

97
00:10:40.300 --> 00:10:47.020
snapshots in time, so another kind of connected to something that we call time series data. For

98
00:10:47.020 --> 00:10:51.660
example, stock market data is often time series data, and that's what Pandas was originally

99
00:10:51.660 --> 00:11:00.220
designed for, was specifically for time series, so data that is mapped over time, but it's now

100
00:11:00.220 --> 00:11:04.220
used for a much wider variety of things, so that's why I say it's a bit of a historical name.

101
00:11:04.820 --> 00:11:09.420
It doesn't mean quite as much, and we work with a lot of things that aren't panel data in Pandas.

102
00:11:10.800 --> 00:11:17.900
Cool. So, let's kind of just jump in, and the first thing we're going to do is, you know,

103
00:11:17.900 --> 00:11:23.640
the end of the last workshop, we learned about importing libraries. We imported the random

104
00:11:23.640 --> 00:11:28.920
library, and we got a little work done with the random library, which allowed us to, you can do

105
00:11:28.920 --> 00:11:37.760
things like generate random numbers, pull random items out of a list.  However, we now are going to

106
00:11:37.760 --> 00:11:42.060
import a new library, which is our Pandas library, so I'm going to start with sharing my screen,

107
00:11:44.240 --> 00:11:50.600
and it occurs to me, Sarah, if you wanted to, you know, back us up by recording locally,

108
00:11:51.160 --> 00:11:54.600
you know, if you want to ask for permission for that, that would be fine, too. We should be

109
00:11:54.600 --> 00:11:59.560
recording. Oh, yeah, so I'm trying to record through QuickTime player, because I'm worried

110
00:11:59.560 --> 00:12:05.260
that, yeah, that two Zoom recordings are going to clash with each other in the middle,

111
00:12:05.760 --> 00:12:08.580
so hopefully... No, no, it's not.  If you're doing it one way, don't do it another way,

112
00:12:08.780 --> 00:12:12.740
then thank you. Yeah, yeah, yeah, so we'll hope for the best. Yeah, yeah, I think we're going to

113
00:12:12.740 --> 00:12:20.640
be good.  All right, so let's go ahead and share that screen. I'm going to make sure I

114
00:12:22.600 --> 00:12:35.330
share the sound, which is the most important thing. Share sound and share.

115
00:12:36.730 --> 00:12:38.070
Screen. "You have started screen share."

116
00:12:38.130 --> 00:12:41.850
Okay, that's my notes, and we are going to start by opening...

117
00:12:41.850 --> 00:12:43.650
"Start window. Participants can now"...

118
00:12:47.130 --> 00:12:53.330
The... We're going to start by opening the Anaconda prompt, so that is the command line

119
00:12:53.330 --> 00:12:57.070
application that comes with Anaconda, and it has a few little extra things added to it,

120
00:12:57.110 --> 00:13:02.350
such as IPython, so let's start typing "Anaconda. Anaconda prompt left"...

121
00:13:03.590 --> 00:13:07.890
It came up right away for me, but you may need to type a little more, so you want to type Anaconda

122
00:13:07.890 --> 00:13:15.950
space P, and then hit enter when that pops up. Remember, you don't want Anaconda Navigator.

123
00:13:16.270 --> 00:13:19.810
Okay, you want Anaconda prompt. All right. Now, once you're in the Anaconda prompt,

124
00:13:19.910 --> 00:13:26.330
and I will expand it, and I will also get rid of... I think I found a way to get rid of that

125
00:13:26.330 --> 00:13:35.870
little thing, so you can just have the whole screen be our command line environment, and also,

126
00:13:35.870 --> 00:13:43.450
you can hear in the background, I already have NVDA running with a little bit of a nicer voice,

127
00:13:43.530 --> 00:13:48.990
just like I switched to last week, okay? So, let's do... Start by... We're typing IPython.

128
00:13:49.130 --> 00:13:52.330
It's all lowercase to get into our IPython environment, just like we did last week.

129
00:13:56.030 --> 00:14:04.070
IPython, I, and then the Python, like the large snake. "Python 3.8.8 left..."

130
00:14:04.550 --> 00:14:10.690
Talking, but we hear the version is the first thing that we get when we start running this

131
00:14:10.690 --> 00:14:15.550
IPython process, and I am also... This is too much for me, so I'm going to first start by

132
00:14:15.550 --> 00:14:23.630
clearing the screen, which is to hold down the control and press L. Oh, and someone was asking

133
00:14:23.630 --> 00:14:28.570
that they don't hear anything when the screen clears, but I guess now that I'm thinking about

134
00:14:28.570 --> 00:14:35.510
it, I don't hear anything either.  What I do hear is the prompt. So, that is the in, and then a

135
00:14:35.510 --> 00:14:40.150
number. So, we talked about that last week, but basically, that tells you, hey, we're ready to

136
00:14:40.150 --> 00:14:45.210
type.  So, I probably won't do so much reviewing of that kind of work, but remember that the first

137
00:14:45.210 --> 00:14:51.870
workshop has a lot of detail on reviewing... We're typing stuff in, reviewing output,

138
00:14:52.590 --> 00:14:59.270
and parsing the data by listening. So, when we get output, then we want to make sure that we're

139
00:14:59.270 --> 00:15:04.190
listening for the right things. So, let's first start by importing Pandas.

140
00:15:05.190 --> 00:15:12.830
"I-M-P-O-R-T, space. P-A-N-D-A-S, space." And I don't seem to have word review on,

141
00:15:12.890 --> 00:15:15.770
so I'm going to try to turn that on.  Speak typed words on. There we go.

142
00:15:16.370 --> 00:15:26.430
"I-M-P-O-R-T, import." P-A-N-D-A-S, Pandas." Okay, import Pandas. I did the space, just hear it.

143
00:15:27.850 --> 00:15:31.550
Import Pandas. So, now we have Pandas imported. If you type Pandas by itself,

144
00:15:31.730 --> 00:15:38.070
you will get back, it'll just say this is a module, a module object. "P-A-N-D-A-S,

145
00:15:38.250 --> 00:15:42.230
out left bracket to right bracket, colon, less module Pandas from C colon backslash."

146
00:15:42.230 --> 00:15:47.750
Less module Pandas, that means the less than sign, and then it gives us some information on

147
00:15:47.750 --> 00:15:52.190
the object. So, when you get information on objects, they tend to be wrapped in a less

148
00:15:52.190 --> 00:15:56.850
than and a greater than sign.  So, now we're going to be using this Pandas module pretty

149
00:15:56.850 --> 00:16:05.270
extensively today. So, let's get started by talking first about thinking about one-dimensional

150
00:16:05.270 --> 00:16:10.650
data and two-dimensional data, and then I'll show you how to create one and two-dimensional data

151
00:16:10.650 --> 00:16:18.610
in Pandas, okay? So, what is one-dimensional, what are dimensions in data? What is one-dimensional

152
00:16:18.610 --> 00:16:23.670
data, two-dimensional data, what other kinds of dimensional data, and then also zero-dimensional

153
00:16:23.670 --> 00:16:27.650
data, okay? It sounds fancy, but it's not really as complicated as it sounds. So,

154
00:16:28.450 --> 00:16:34.710
imagine you have a list, and I want to use as my example here something that is consistent.

155
00:16:36.290 --> 00:16:45.250
So, let me make sure that the list is the same as it is in our code. So, I think ...

156
00:16:45.710 --> 00:16:51.050
Yeah, let's use 10, 5, and 8 since that's what we use in the code, okay? So,

157
00:16:51.130 --> 00:16:56.370
imagine you have a list that has three items, 10, the number 10, 5, the number 5, and 8,

158
00:16:56.430 --> 00:17:04.450
the number 8, okay? And you can sort of, in your mind, imagine this, okay? And I'm not going to

159
00:17:04.450 --> 00:17:09.670
use the word visualize here, right, because it's not visual, it's spatial. So, all the data stuff

160
00:17:09.670 --> 00:17:14.410
we're going to be doing today is not visual, except incidentally, because we're using this

161
00:17:14.410 --> 00:17:19.190
program that was designed by, you know, people who do things visually.  It's spatial, okay? So,

162
00:17:19.290 --> 00:17:22.530
there's, you know, whether or not you're doing this visually, you have left, right, up, down,

163
00:17:22.630 --> 00:17:29.050
forward, and back, okay? Different dimensions, okay? So, in your mind, I'd like you to imagine

164
00:17:29.590 --> 00:17:35.210
that we have a line. So, we have a left item, a middle item, and a right item. And I don't know

165
00:17:35.210 --> 00:17:38.610
however it works in your mind.  My mind works different from your mind, but imagine that,

166
00:17:38.670 --> 00:17:42.430
okay? You can use your hands or whatever if you want to. You've got your hand, your head,

167
00:17:42.470 --> 00:17:46.870
and your other hand. And imagine, now I've already forgotten the numbers, but they are

168
00:17:47.310 --> 00:17:53.610
10, 5, and 8, okay? So, we have 10 on the left, 5 in the middle, and 8 on the right.

169
00:17:54.330 --> 00:18:00.910
Now, that basically is, you could draw a line, okay? And place each of those items on the line.

170
00:18:01.890 --> 00:18:08.330
And that basically is one-dimensional data, okay? So, and the characteristic, the way you know it's

171
00:18:08.330 --> 00:18:14.130
one-dimensional data is that we can describe where something is in that line with a single number,

172
00:18:14.450 --> 00:18:18.910
okay? So, we could say, remember, we always start at counting and programming from zero.

173
00:18:19.490 --> 00:18:25.570
Zero is the item on the left.  One is the item in the middle, 10, 5, and 8. 10 is the item on

174
00:18:25.570 --> 00:18:29.730
the left. 5 is the item in the middle. 8 is the item on the right, okay? So, we think of that as

175
00:18:29.730 --> 00:18:32.970
like an address.  We're going to use a fancier word in a minute, but you can think about,

176
00:18:33.210 --> 00:18:39.770
it's kind of the location or the address of the object, okay? And what we use in programming is,

177
00:18:41.170 --> 00:18:46.070
in this Panda specifically, we'll use this word index to describe the location of an object in

178
00:18:46.070 --> 00:18:53.150
a data set, okay? But in a one-dimensional data set, you can describe where something is just with

179
00:18:53.150 --> 00:18:57.030
one number, okay? It can be a big number, small number, whatever, but it's just one number,

180
00:18:57.490 --> 00:19:06.310
okay? So, let's create a, well, let's, I'll hold, I'll quickly just describe what two-dimensional

181
00:19:06.310 --> 00:19:11.890
data is. And then we'll, we're going to go back and work with one-dimensional data.

182
00:19:11.890 --> 00:19:19.350
But two-dimensional data requires that you have two numbers describing where an item is in the

183
00:19:19.350 --> 00:19:26.490
data set.  So, if we had a list, so, imagine we have two lists, and I won't do, I won't create

184
00:19:26.490 --> 00:19:29.750
this in Python because we're going to be working with this in a minute anyway. We'll talk about it

185
00:19:29.750 --> 00:19:36.650
again. But imagine in your mind now, you have a list, okay? Or a line like we did before.

186
00:19:37.230 --> 00:19:42.870
Now, imagine that instead of 10, 5, and 8, we now had each of those items be another list,

187
00:19:42.950 --> 00:19:48.130
each with three items, okay? So, we could, it doesn't matter what the items are, but imagine

188
00:19:48.130 --> 00:19:55.690
that it's three months. So, June, July, August is one of the items. Then we have numbers 10, 5,

189
00:19:55.730 --> 00:20:00.550
and 8. And then we have, say, another set of numbers, smaller numbers, 1, 2, and 1, okay?

190
00:20:00.930 --> 00:20:05.530
And we'll, we're going to create a data set like that in a minute.  But we're, let's not talk about

191
00:20:05.530 --> 00:20:10.030
what those represent in a minute. We're, it's going to be a simple budget, basically. But now,

192
00:20:10.210 --> 00:20:15.950
we have data existing in two dimensions, okay? So, we have, you can imagine a line going from

193
00:20:15.950 --> 00:20:21.710
left to right.  And now you can also imagine in that line, things are going up and down, okay?

194
00:20:22.050 --> 00:20:26.030
So, the first address tells you where it is in the left and the right. And that is, so,

195
00:20:26.130 --> 00:20:30.670
we could say zero, that's the first list. And then we give another number.  We could say,

196
00:20:30.670 --> 00:20:36.170
then we have that first list is June, July, August. That zero item list is June, July,

197
00:20:36.230 --> 00:20:43.610
August. Then we could say one, that would be July, okay? So, we can now describe in this list of

198
00:20:43.610 --> 00:20:50.810
lists that we've created where, where items are.  But now we need two numbers, okay? And that's what

199
00:20:50.810 --> 00:20:57.650
we call two-dimensional data. If you can describe where an item is in a data set with two numbers,

200
00:20:57.650 --> 00:21:01.950
it's two-dimensional data. And then there's also zeroth-dimensional data.  It's not very

201
00:21:01.950 --> 00:21:08.630
useful to talk about. But any item that isn't a list or a sequence of items is one, is zero-dimensional

202
00:21:08.630 --> 00:21:17.090
data, okay? So, for example, if I create a string, like we did last week, quote, "H-E-L-L-O,"

203
00:21:17.310 --> 00:21:26.450
hello. So, I created a string called hello, okay? Or with the text hello in it.  And that

204
00:21:26.450 --> 00:21:30.110
is zero-dimensional data, because there's no dimensions to it. It's just a point in space,

205
00:21:30.170 --> 00:21:36.070
okay? It doesn't even mean anything to describe its location. Or you could pick an arbitrary

206
00:21:36.070 --> 00:21:40.830
number to describe its location, because it's not, it doesn't exist in space, okay? It doesn't

207
00:21:40.830 --> 00:21:46.030
have a spatial dimension, okay? And then the other, there's other kinds of dimensions that

208
00:21:46.030 --> 00:21:51.590
are a little more abstract.  But basically, imagine, you know, we took our line and we

209
00:21:51.590 --> 00:21:58.170
added lists to it, right? Now, imagine if we took every item in those secondary lists,

210
00:21:58.330 --> 00:22:04.210
in the list of months and the two lists of numbers. So, imagine that we took those items,

211
00:22:04.210 --> 00:22:09.110
and then we replaced those with lists. And now we would have three-dimensional data, okay?

212
00:22:09.510 --> 00:22:17.010
And you could then, if you wanted to imagine it in your mind, you would maybe use forward

213
00:22:17.010 --> 00:22:20.490
and back.  That's another dimension. Because in our physical world, we have three dimensions.

214
00:22:21.370 --> 00:22:26.130
Then you could add more dimensions, because you could keep replacing items with lists.  So,

215
00:22:26.190 --> 00:22:30.370
you can actually have an arbitrary number of dimensions, but after a point, it's not easy

216
00:22:30.370 --> 00:22:35.250
to map it onto our physical world. So, it becomes harder to imagine it in that three-dimensional

217
00:22:35.250 --> 00:22:41.410
space. But it is possible to have those, and they're actually very useful.  And if you hear

218
00:22:41.410 --> 00:22:46.850
a lot about machine learning these days, and this is a gross oversimplification, but basically what

219
00:22:46.850 --> 00:22:51.790
all those models are, they're basically lists of lists of lists of lists. They're very complex.

220
00:22:51.930 --> 00:22:58.230
If you look at a neural network, it's basically these complicated lists of lists of lists of

221
00:22:58.230 --> 00:23:02.090
lists, okay? That's a gross oversimplification, but it's functionally what they are, okay? So,

222
00:23:02.130 --> 00:23:06.410
they actually are very useful.  We're not going to get into those n numbers. We're going to use

223
00:23:06.410 --> 00:23:10.430
one and two-dimensional data in this workshop series. So, let's get into it.  I'm going to

224
00:23:10.430 --> 00:23:15.010
show you how to work first with one-dimensional data and then we'll move on to two-dimensional

225
00:23:15.010 --> 00:23:20.410
data where things get really fancy. But you'll notice we switch. We're not going to do

226
00:23:20.410 --> 00:23:25.050
one-dimensional data and move on.  Once we learn about one-dimensional data, we're going to constantly

227
00:23:25.050 --> 00:23:30.750
be coming back to this information because we're constantly going to be taking our two-dimensional

228
00:23:30.750 --> 00:23:37.270
data and making it one-dimensional, okay? And pulling out a one-dimensional element from the

229
00:23:37.270 --> 00:23:43.470
two-dimensional data set, okay? So, that's how we work in PEMD. So, let's go ahead and create this

230
00:23:44.230 --> 00:23:47.990
list, which is going to be a budget list. And I want to use the same numbers.

231
00:23:47.990 --> 00:23:54.410
In left bracket, I search. Budget equals left bracket 10, 10, 5, 15, 15 right bracket.

232
00:23:55.530 --> 00:24:00.330
Budget equals left bracket 10, 10, 5, 15, 15 right bracket.  Okay. I just want to make

233
00:24:00.330 --> 00:24:07.130
sure things line up with the curriculum. Yeah.  I just remember that last time you

234
00:24:07.130 --> 00:24:13.270
made it a friendlier voice and slowed it down. Oh, I thought this was the friendlier voice.

235
00:24:13.470 --> 00:24:20.350
No, this is your normal voice. "NVDA menu, preferences, tool submenu,

236
00:24:20.450 --> 00:24:27.010
code factory submenu, help submenu H. Configuration profiles dialog. Programming. Recording.

237
00:24:28.170 --> 00:24:31.590
Nice line sounding left paren. Editing. Manual right paren."

238
00:24:31.670 --> 00:24:33.970
Let's try this and see if you hear a difference.

239
00:24:38.770 --> 00:24:44.970
I think this is the nice voice. I think this is your normal one,

240
00:24:45.210 --> 00:24:48.450
or your preferred one.  This is my preferred, so it's actually.

241
00:24:50.910 --> 00:24:58.330
Okay. I'll slow it down for people.  Yeah. That is slower than I do do it, but I guess I'm not.

242
00:24:58.330 --> 00:25:13.550
Okay.  I think it's audio, but I want to prefer a voice.

243
00:25:14.930 --> 00:25:15.430
Yeah.

244
00:25:15.590 --> 00:25:22.750
"Audio output device, colon, combo box, Microsoft sound mapper, colab, audio ducking mode, colon,

245
00:25:23.170 --> 00:25:28.130
combo, volume of NVDA, volume of NVDA, okay, button, audio, audio, audio, audio,

246
00:25:28.310 --> 00:25:35.050
three of speech, two of 15, speech property page, change, voice, colon, combo, rate, colon,

247
00:25:35.430 --> 00:25:43.150
slider 60 alt plus 59, 54, 52, 50." How's 50, do you think?

248
00:25:44.650 --> 00:25:46.730
Did I get to make it even slower? Let's do 48.

249
00:25:46.730 --> 00:25:47.270
"48."

250
00:25:59.970 --> 00:26:02.330
That sounds pretty slow to me.  Is that good?

251
00:26:04.770 --> 00:26:09.970
Yeah. When you listen to robots all day, maybe your idea of what is a fast or slow voice gets

252
00:26:09.970 --> 00:26:14.630
a little scared. I do know people who listen faster than I do, but I wouldn't even say I'm

253
00:26:14.630 --> 00:26:21.630
that much of a speed demon.  It is easier to follow along when the voice is a little slower,

254
00:26:21.710 --> 00:26:26.530
so thank you for that. Okay. So let's go ahead and create our budget.  I think it was

255
00:26:27.210 --> 00:26:30.410
Emacs, budget equals left bracket 10, 10, 5, 15, 15 right bracket.

256
00:26:30.450 --> 00:26:35.650
10, 10, 5, 15, and 15. Sorry, that voice is going to be a little faster because that's

257
00:26:35.650 --> 00:26:40.190
a different program, and that's really just my own notes.  So let's go ahead and create budget.

258
00:26:43.230 --> 00:26:59.270
"B-U-D-G-E-T, budget equals left bracket 10, 10, 5, 15, 15".

259
00:26:59.270 --> 00:27:06.370
I will review this.  So it's going to be budget equals space open square bracket,

260
00:27:07.100 --> 00:27:19.270
and then write the numbers 10, 10, 5, 15, and 15. Okay. So budget equals

261
00:27:20.100 --> 00:27:27.570
in left bracket 5 right bracket.  And you remember, you hear the in, and that basically means there's

262
00:27:27.570 --> 00:27:31.250
no output. It skipped the output. So when you assign a variable, you don't hear output.

263
00:27:31.250 --> 00:27:37.630
And we can get our budget back by typing budget by itself. That's a technique we use all the time.

264
00:27:37.690 --> 00:27:46.590
"out left bracket 5 right bracket colon left bracket 10, 10, 5, 15, 15."

265
00:27:46.810 --> 00:27:56.170
10, 10, 5, 15, and 15. Okay. So that's our budget.  Now, remember in regular Python,

266
00:27:56.170 --> 00:28:02.330
we can do things like use what's called slicing to pull out specific items. So basically,

267
00:28:02.470 --> 00:28:05.290
the syntax is this, and we're going to do similar things in this workshop.

268
00:28:06.070 --> 00:28:14.090
Type the budget variable. "B-U-D-G-E-T, budget." And we can type open square bracket

269
00:28:14.090 --> 00:28:19.210
and then give it a number. "out left bracket 6 right bracket colon 10."

270
00:28:19.350 --> 00:28:24.290
10. So 10 is our output.  We asked for the first item. It was budget, open square bracket,

271
00:28:24.290 --> 00:28:29.230
0, close square bracket. So Python gives some functionality with lists.

272
00:28:29.690 --> 00:28:33.910
And these are one-dimensional data types. Okay. Lists are one-dimensional data types.

273
00:28:34.430 --> 00:28:41.870
But what we're going to do is we're going to create a new data type, which is a it's going

274
00:28:41.870 --> 00:28:47.970
to be called a series. Okay. So the series is basically you can think of it as a really fancy

275
00:28:47.970 --> 00:28:54.030
list.  Okay. That lets us do all sorts of things. So let's go ahead and load in our budget data

276
00:28:54.030 --> 00:29:01.570
type or our budget series.  Okay. Now, I am going to use a very short variable name here,

277
00:29:01.950 --> 00:29:05.050
and I'll give an explanation. So far, I've tried to use very descriptive variable names.

278
00:29:05.290 --> 00:29:10.830
You don't see me doing X equals this, Y equals this, only very rarely. And I recommend keeping

279
00:29:10.830 --> 00:29:14.030
to that. But I'm going to use a short variable name here, and then I'm going to kind of tell

280
00:29:14.030 --> 00:29:22.070
you why I chose that.  Okay. So I'm going to say S, like the letter S. S equals space.

281
00:29:22.070 --> 00:29:30.750
And then we want to use pandas.  Now, then do a dot.

282
00:29:35.850 --> 00:29:42.010
Got a reaction there. And there's our dot.  So now, so far, we have S space equals space

283
00:29:42.010 --> 00:29:49.090
pandas dot. And now, let's you type capital S series, and I'll explain that part too.

284
00:29:52.190 --> 00:29:58.230
And you heard that little blink, you know, that little beep.  That's how I have it set to get the

285
00:29:58.230 --> 00:30:02.350
capital letters. So when you hear that little beep, you're hearing capitals. Then open parenthesis,

286
00:30:02.990 --> 00:30:11.050
and then give our budget variable inside the parenthesis. So B, U, D. And I'm going to let

287
00:30:13.490 --> 00:30:16.470
IPython complete it for us by pressing tab. Remember, that's something we learned in the

288
00:30:16.470 --> 00:30:24.310
first one. So I type B, U, D. Yes.  So it added B, U, D. It added G, E, T for me.

289
00:30:25.350 --> 00:30:32.450
And then I'm closing the parenthesis. So what I have here is S space equals space pandas,

290
00:30:32.450 --> 00:30:44.270
the library, dot, capital S, series, S, E, R, I, E, S. Okay.  Open parenthesis,

291
00:30:44.790 --> 00:30:53.050
and then our variable name, budget, close parenthesis. Okay. It takes a minute.

292
00:30:53.830 --> 00:31:03.470
Computers. Okay. So it assigned the variable, so we don't get any output.

293
00:31:04.470 --> 00:31:09.830
But we can get an idea of what the series representation is. Remember, the representation

294
00:31:09.830 --> 00:31:17.030
is a fancy word for what the output is like. Okay.  We call that a representation.

295
00:31:17.790 --> 00:31:22.040
So when we type a variable by itself, what we're getting back is the representation. So we're

296
00:31:22.040 --> 00:31:26.160
going to take a look at this representation of the series in a second.  First, let me just explain

297
00:31:26.160 --> 00:31:32.800
a few little things. So why did we use a short variable name? This is another unsatisfying

298
00:31:32.800 --> 00:31:40.600
data science-y answer. There is a convention, an informal convention in data science and Python

299
00:31:41.200 --> 00:31:46.620
that there's certain variable names that are used by conventions.  So if you only have one series,

300
00:31:47.180 --> 00:31:52.860
people often call it S. Okay. And there's another convention that's similar to that

301
00:31:52.860 --> 00:31:56.480
with data frames, which we'll talk about in a minute, but we will cross that bridge when we

302
00:31:56.480 --> 00:32:02.380
come to it. There's also a convention to shorten many of the library names.  So often you'll see

303
00:32:02.380 --> 00:32:09.960
pandas called, if you follow a tutorial, you'll see pandas being called PD. Okay. So there's a

304
00:32:09.960 --> 00:32:13.940
way to shorten the library name, but I think it confuses the issue a little bit.  So we're just

305
00:32:13.940 --> 00:32:18.500
going to use the full pandas name. But if you see PD in a tutorial, they're talking about pandas.

306
00:32:18.760 --> 00:32:24.320
Okay.  These are data science conventions. I didn't make them up. I would also say anytime

307
00:32:24.320 --> 00:32:28.880
you have more than one series, go ahead and use a descriptive name, because once you start doing

308
00:32:28.880 --> 00:32:35.840
S1, S2, S3, then you're going to kind of get yourself confused.  Okay. So, but I want you to

309
00:32:35.840 --> 00:32:40.540
know about this convention, so I'm going to use it. All right.  So the other thing I want to explain

310
00:32:40.540 --> 00:32:46.020
is why is the series in this line up here capitalized? And the short version of that is

311
00:32:46.720 --> 00:32:52.980
that it is an object that we're using in Python, and the technical word would be it's a class that

312
00:32:52.980 --> 00:32:57.000
we're importing. We're using the series class, which we're not going to get into. But basically

313
00:32:57.600 --> 00:33:02.220
it's not a function that we're importing there.  It's another kind of object that we're

314
00:33:02.220 --> 00:33:08.600
importing from pandas library. You can basically just figure, hey, you know, it's pretty much the

315
00:33:08.600 --> 00:33:15.560
function for now. Later you might learn why the class is and what these kinds of objects and

316
00:33:15.560 --> 00:33:22.140
stuff are for now.  Just think of it as a way to make a series object. It's almost like a little

317
00:33:22.140 --> 00:33:26.340
factory. That's the short way of thinking about a class.  It's a prototype for making other objects

318
00:33:26.340 --> 00:33:33.880
with. Okay. So S equals pandas.series, and we give it our budget, pass the budget in, and now we

319
00:33:33.880 --> 00:33:40.120
have our series object.  So let's type S by itself. Press enter. S in left bracket, eight right

320
00:33:40.120 --> 00:33:54.720
"bracket, colon, S. Out left bracket, eight right bracket, colon. Zero ten. One ten. Two five. Three

321
00:33:54.720 --> 00:34:06.380
fifteen. Four fifteen. dtype colon. In left bracket, nine right bracket." I kind of like that

322
00:34:06.380 --> 00:34:12.179
that was a bit slower, because it can be difficult to parse some of this output sometimes, and when

323
00:34:12.179 --> 00:34:16.139
you're hearing it for the first time, it's confusing. But what you heard was zero ten,

324
00:34:16.440 --> 00:34:22.360
then a pause for a new line, one ten, pause for a new line, two five, pause for a new line,

325
00:34:23.159 --> 00:34:28.199
three fifteen, pause for a new line, four fifteen, pause for a new line.  And then the last line

326
00:34:28.199 --> 00:34:34.280
said D type. It said it some weird way. It was like D type or something.  But it said D type for

327
00:34:34.280 --> 00:34:40.300
data type, and then it said int64. So that's telling us the data that we have in the series is

328
00:34:40.300 --> 00:34:44.659
basically it's saying it's integers. Okay.  And this is the format of a series representation

329
00:34:45.219 --> 00:34:53.400
that you have two columns of numbers, one on the left spatially, one on the right spatially.

330
00:34:53.659 --> 00:34:59.720
The left column, let's talk about the right column first. The right column are the values,

331
00:34:59.880 --> 00:35:05.780
and that's the technical term.  They're the values that we had in the list. Okay. And value is a

332
00:35:05.780 --> 00:35:10.940
word for the actual data.  Okay. So when you're distinguishing the actual data from something

333
00:35:10.940 --> 00:35:16.980
else, like, for example, a label you're putting on the data or a variable name or something like

334
00:35:16.980 --> 00:35:23.040
that, then we say value to mean the actual data. And in this case, the actual data is the stuff

335
00:35:23.040 --> 00:35:28.760
that we put in budget.  Okay. So on the right column, so the second number in each line,

336
00:35:28.840 --> 00:35:36.340
when you're hearing it, you know, line by line, is the value. The left number is the index,

337
00:35:36.340 --> 00:35:43.980
and the index is basically it's a label for each row of the data.  Okay. By default,

338
00:35:44.300 --> 00:35:51.100
the label or the index, label is not the technical term, but it's an accurate way of describing it.

339
00:35:51.340 --> 00:35:58.780
The index on the left is a number that, an incrementing number from zero up to some other

340
00:35:58.780 --> 00:36:04.000
number.  Okay. So it's basically just a, it's the same as slicing. When we extract something from

341
00:36:04.000 --> 00:36:08.200
the list, it starts at zero, goes to one, two, three, four, and so on until the end of the data set.

342
00:36:08.740 --> 00:36:14.080
Okay. That's the default index, but we're actually going to work with that in a minute.

343
00:36:16.340 --> 00:36:23.260
Okay.  Anything else to know about this representation? And, oh, the other thing I

344
00:36:23.260 --> 00:36:27.960
wanted to say is that what we call that in programming, when a number just increments

345
00:36:27.960 --> 00:36:32.340
like that, or we want to create something like that, we call that a range. Okay. So if I say,

346
00:36:32.340 --> 00:36:37.180
oh, it's a range, I just mean it's numbers going up.  Okay. And there are fancier ranges where

347
00:36:37.180 --> 00:36:41.520
numbers go up by two or something like that, but mostly they go up by one. Okay.  So, and we'll,

348
00:36:41.680 --> 00:36:48.500
we'll return to that later. Okay. So it's a range, the index is a range from zero to four,

349
00:36:48.580 --> 00:36:54.400
and the other, the right column is our actual values.  Okay. So now we actually get into some

350
00:36:54.400 --> 00:36:59.220
pretty cool stuff here. This is actually pretty neat stuff.  So I've kind of explained a lot of,

351
00:36:59.220 --> 00:37:06.680
you know, procedural stuff, but now let's do some cool stuff. So let's start by doing S,

352
00:37:06.800 --> 00:37:13.020
and we're going to use a method on the, this series object that we have. So S dot.

353
00:37:14.920 --> 00:37:23.040
It takes a while for it to say dot. S dot. And let's use the mean method, M-E-A-N.

354
00:37:24.780 --> 00:37:27.100
"M-E-A-N." Open parenthesis, close parenthesis.

355
00:37:28.880 --> 00:37:30.640
Mean.  Right parenthesis.

356
00:37:30.640 --> 00:37:35.300
Skip saying the left parenthesis there, but it's S dot mean, left parenthesis,

357
00:37:35.420 --> 00:37:41.100
right parenthesis. We're not putting anything in there.  Usually when you don't pass anything

358
00:37:41.100 --> 00:37:45.860
into a method like that, it's going to operate on the, the object that the method is contained,

359
00:37:46.140 --> 00:37:53.580
contained inside. So if we say S dot mean and run that, then it's going to operate on S probably.

360
00:37:53.580 --> 00:37:56.720
Not all of us, but mostly, but usually.  Okay. So let's run that.

361
00:37:58.180 --> 00:38:02.420
"Out left bracket, nine right bracket, colon 11.0."

362
00:38:03.000 --> 00:38:06.840
So what was the mean? Maybe you remember from school, maybe you were mathematical,

363
00:38:07.080 --> 00:38:11.540
so this is obvious to you.  The mean is the average. Okay. The average is you take all

364
00:38:11.540 --> 00:38:15.200
the numbers, the sum of all the numbers, you sum them all up, you add all the numbers together,

365
00:38:15.260 --> 00:38:20.220
and then you divide by the number of numbers or the, you know, so in this case,

366
00:38:20.740 --> 00:38:29.760
you add up, you know, 10, 10, that's 20, 25, 15 and 15 is 30. That's 55. And then we divide by

367
00:38:29.760 --> 00:38:33.980
five, we get 11. Okay.  That's the average. And the average is a very useful number.

368
00:38:34.160 --> 00:38:41.160
We'll be using this a lot.  Why isn't it S dot average? Well, it's just, that's just a decision

369
00:38:41.160 --> 00:38:44.960
they made when they created this library. Okay. Remember all of this stuff is created by people.

370
00:38:45.240 --> 00:38:48.500
So they were made just different kinds of decisions. Sometimes they changed those

371
00:38:48.500 --> 00:38:54.520
decisions and then the language changed. So hopefully not too often, but so that's,

372
00:38:54.880 --> 00:39:02.740
so that is one method that we have inside our series object and it allows us to get the mean

373
00:39:02.740 --> 00:39:06.500
of all the items in there.  And so let's do a couple of others that are along these same lines.

374
00:39:06.620 --> 00:39:15.200
So let's do S dot median. "S S M E D I A N" dot median, open parenthesis, close parenthesis.

375
00:39:15.680 --> 00:39:20.920
I'm going to type a little faster here. Just S dot median, open parenthesis, close parenthesis.

376
00:39:21.220 --> 00:39:30.920
10.0. Okay.  So the median is the middlemost number. So if you sort all the items

377
00:39:32.280 --> 00:39:37.040
from least to greatest, and then you pick the middlest item, it would be 10. Okay.  If there's

378
00:39:37.040 --> 00:39:41.340
an even number of items, then you'll get the average of the two middlemost items. Okay. So

379
00:39:41.340 --> 00:39:46.700
if we had six items, maybe we would have got the average of the two items in the middle.  Okay. Now

380
00:39:46.700 --> 00:39:51.500
this is not that intuitive, right? Because our list is 10, 10, 5, 15, 15. You're like,

381
00:39:51.560 --> 00:39:58.180
oh, it's in the middle of number five.  No, it sorts first. And in fact, there's also a very

382
00:39:58.180 --> 00:40:06.040
useful method to sort our values. So let's do S dot S S dot, it takes a while to do that,

383
00:40:06.040 --> 00:40:16.340
sort underscore values.  And I'm going to try to fill it in with tab.

384
00:40:18.840 --> 00:40:27.280
So it's S dot sort underscore values. Okay.  And I do encourage you to use that tab.

385
00:40:27.700 --> 00:40:31.740
And it does take a while for it to finish it, filling it in. But what it does, it gives you

386
00:40:31.740 --> 00:40:36.300
some peace of mind that you're not going to do a typo.  You type a little in, and if it fills it in

387
00:40:36.300 --> 00:40:41.160
for you, then probably you're on the right track. Okay. So I do recommend using that tab a lot.  So

388
00:40:41.160 --> 00:40:51.150
it's S dot sort underscore values, open parenthesis, closed parenthesis. And sometimes it gets

389
00:40:51.150 --> 00:41:12.450
that. I'm going to stop it and explain what we're hearing.  So we're getting our series,

390
00:41:12.650 --> 00:41:19.530
but now the items have been sorted into a new order. And it kept the old index, which is the

391
00:41:19.530 --> 00:41:25.410
range from zero to four. And now, you know, the first item used to was the third item, it's two,

392
00:41:26.490 --> 00:41:31.290
is five.  So five was the lowest, it gets moved to be to the beginning item. Okay. So the index

393
00:41:31.290 --> 00:41:35.890
tends to stay the same when we run things like this.  Okay. So we kind of get the original position

394
00:41:35.890 --> 00:41:41.070
of these items rather than the new position. Okay.  So the index doesn't automatically update.

395
00:41:41.070 --> 00:41:48.630
That's actually usually good. And then now we have a series, it goes from five, 10, 10,

396
00:41:49.770 --> 00:41:53.350
15, 15.  Okay. So it's sorted from least to greatest. That's what it does by default,

397
00:41:53.470 --> 00:41:58.990
least to greatest.  Now, if you kind of don't like how Pandas is printing so much out to us,

398
00:41:59.350 --> 00:42:04.690
we can also do S dot values and only get the values. We don't hear the index. Now,

399
00:42:04.750 --> 00:42:09.030
the index is often useful to hear, but sometimes it's not.  So we can just do S dot values.

400
00:42:09.030 --> 00:42:18.690
S dot values, no parentheses. "Out left bracket, 12 right bracket, colon,

401
00:42:19.230 --> 00:42:27.530
array left, left bracket, 10, 10, 5, 15, 15." So we just got the values from the original

402
00:42:27.530 --> 00:42:31.890
list, not the sorted. You'll notice that that didn't update our variable when we sorted the

403
00:42:31.890 --> 00:42:36.050
variable. We would have to overwrite the variable if we wanted to update the variable.  Okay. That's

404
00:42:36.050 --> 00:42:36.670
It's usually good.

405
00:42:38.610 --> 00:42:41.750
But so the values is pretty useful.

406
00:42:41.890 --> 00:42:43.090
And what did it return back to us?

407
00:42:43.130 --> 00:42:44.350
It said it returned an array.

408
00:42:45.310 --> 00:42:47.890
Basically, a lot of pandas will return

409
00:42:47.890 --> 00:42:49.830
things that look like lists.

410
00:42:50.250 --> 00:42:51.730
They look like lists.

411
00:42:51.870 --> 00:42:52.970
They quack like lists.

412
00:42:53.090 --> 00:42:54.090
They walk like lists.

413
00:42:54.990 --> 00:42:56.690
They smell like lists.

414
00:42:57.630 --> 00:42:58.850
They sound like lists.

415
00:42:58.950 --> 00:43:00.250
But they are not lists, OK?

416
00:43:00.570 --> 00:43:02.690
And in fact, there's a word for that in Python.

417
00:43:02.790 --> 00:43:05.250
It's called duck typing, because it quacks like a duck

418
00:43:05.250 --> 00:43:06.030
and walks like a duck.

419
00:43:06.130 --> 00:43:06.730
It is a duck.

420
00:43:08.490 --> 00:43:11.970
So instead of saying list, I will say a list-like object.

421
00:43:12.370 --> 00:43:15.070
And that means it's an object that basically,

422
00:43:15.230 --> 00:43:17.270
for all intents and purposes, lets you do the same things

423
00:43:17.270 --> 00:43:19.030
with it that you could do with a list, OK?

424
00:43:19.830 --> 00:43:21.050
In most cases, that's true.

425
00:43:21.090 --> 00:43:22.730
In some edge cases, it might not be true.

426
00:43:22.850 --> 00:43:25.050
In most things, you'll be able to do with it, OK?

427
00:43:25.490 --> 00:43:26.850
So I'll say a list-like object.

428
00:43:27.350 --> 00:43:29.490
And then there's a bunch of them that we'll work with.

429
00:43:29.530 --> 00:43:31.890
But basically, you can think of them for now as lists.

430
00:43:31.950 --> 00:43:34.050
But remember, they're not technically lists.

431
00:43:34.050 --> 00:43:36.130
I just don't want to tell you anything that's not true, OK?

432
00:43:36.530 --> 00:43:39.430
So in this case, it's an array, which is a list-like object.

433
00:43:39.950 --> 00:43:42.450
And it gives us our values that we have.

434
00:43:42.490 --> 00:43:44.030
So it skips the index, OK?

435
00:43:44.050 --> 00:43:45.750
So that's pretty useful if we want to just know

436
00:43:45.750 --> 00:43:46.490
what the values are.

437
00:43:47.010 --> 00:43:48.970
Let's run through a couple of extra cool ones.

438
00:43:49.170 --> 00:43:50.310
I'm not going to dwell on these.

439
00:43:51.070 --> 00:43:51.790
s.min.

440
00:43:55.450 --> 00:43:57.990
s.min, open parenthesis, close parenthesis.

441
00:43:58.270 --> 00:44:01.830
"Out left bracket, 13 right bracket, colon, 5."

442
00:44:01.890 --> 00:44:03.210
5, that gave the minimum value.

443
00:44:03.210 --> 00:44:04.610
s.max.

444
00:44:05.650 --> 00:44:09.490
"Right, out left bracket, 14 right bracket, colon, 15."

445
00:44:09.530 --> 00:44:11.450
15 gave the max value.

446
00:44:12.190 --> 00:44:13.170
What else is useful?

447
00:44:13.470 --> 00:44:15.470
s.std.

448
00:44:15.670 --> 00:44:16.390
Is that what you're thinking?

449
00:44:16.550 --> 00:44:22.490
"Right, in left, out left bracket, 15 right bracket, colon, 4.1833."

450
00:44:22.610 --> 00:44:25.050
The standard deviation, that's std.

451
00:44:25.170 --> 00:44:27.790
s.std, open parenthesis, close parenthesis.

452
00:44:27.930 --> 00:44:29.590
This is maybe one you haven't heard of.

453
00:44:29.910 --> 00:44:30.490
Maybe you have.

454
00:44:30.970 --> 00:44:34.610
It's a measure of the variability of the data.

455
00:44:34.950 --> 00:44:38.270
So it tells you basically how spread out or distributed the data is.

456
00:44:38.350 --> 00:44:41.910
If the data is clustered around the mean,

457
00:44:42.550 --> 00:44:47.010
then it will have a low standard deviation.

458
00:44:47.430 --> 00:44:51.470
If there's a lot of outliers or a lot of the data

459
00:44:51.470 --> 00:44:55.170
is away from the mean, then you're going to get a high standard deviation.

460
00:44:55.250 --> 00:44:57.750
It's actually a pretty useful number once you learn

461
00:44:57.750 --> 00:44:59.830
to interpret it a little bit.

462
00:45:00.690 --> 00:45:02.610
And then there's others.

463
00:45:02.770 --> 00:45:03.630
There's s.count.

464
00:45:05.630 --> 00:45:09.490
"Out left bracket, 16 right bracket, colon, 5."

465
00:45:09.510 --> 00:45:09.930
5.

466
00:45:10.130 --> 00:45:14.210
But we might throw a few more at you over the course of this.

467
00:45:14.850 --> 00:45:18.570
But basically, if there's anything you would kind of conventionally

468
00:45:18.570 --> 00:45:20.810
do with a list of numbers, you can sum things.

469
00:45:20.910 --> 00:45:22.810
s.sum is provided to you.

470
00:45:22.850 --> 00:45:24.650
So there's a lot of methods here.

471
00:45:24.790 --> 00:45:26.670
s.sum.

472
00:45:26.670 --> 00:45:31.450
"Right out left bracket, 17 right bracket, colon, 55."

473
00:45:31.610 --> 00:45:33.610
55 is the sum of all the items in the list.

474
00:45:33.690 --> 00:45:34.850
So there's a lot here.

475
00:45:36.150 --> 00:45:37.430
But we're going to move on.

476
00:45:37.710 --> 00:45:41.530
But remember that there's just a lot provided to you as methods in here.

477
00:45:42.190 --> 00:45:44.430
And remember, we had s.count here.

478
00:45:44.490 --> 00:45:45.590
But we can also use len.

479
00:45:45.990 --> 00:45:48.270
Remember, we had len also works on our series.

480
00:45:48.530 --> 00:45:50.290
L-E-N, open parenthesis, close parenthesis.

481
00:45:50.730 --> 00:45:54.530
Or sorry, L-E-N, open parenthesis, s, close parenthesis.

482
00:45:54.530 --> 00:46:01.250
L-E-N, len, s, "out left bracket, 18 right bracket, colon, 5."

483
00:46:01.290 --> 00:46:03.870
And that will also work on those list-like objects that

484
00:46:03.870 --> 00:46:06.850
might not necessarily have a count method inside them.

485
00:46:07.390 --> 00:46:08.850
Len will work on those as well.

486
00:46:08.930 --> 00:46:11.410
So like our s.values, it will also work on those.

487
00:46:14.130 --> 00:46:18.850
So what I want to do now is we're going to keep our budget variable around.

488
00:46:19.390 --> 00:46:22.010
And what we're going to do is we're going to think a little bit

489
00:46:22.010 --> 00:46:25.990
about two-dimensional objects.

490
00:46:26.490 --> 00:46:28.170
Before we move on, I just want to double check

491
00:46:28.170 --> 00:46:30.470
that it's not anything I wanted to show you that we're moving on.

492
00:46:31.830 --> 00:46:34.370
So let's go to other.

493
00:46:35.370 --> 00:46:37.630
...

494
00:46:37.830 --> 00:46:39.590
...

495
00:46:39.790 --> 00:46:40.790
...

496
00:46:40.910 --> 00:46:41.110
We did that.

497
00:46:41.210 --> 00:46:41.730
...

498
00:46:42.530 --> 00:46:43.590
...

499
00:46:43.910 --> 00:46:46.050
...

500
00:46:46.390 --> 00:46:46.990
...

501
00:46:47.210 --> 00:46:47.570
Describe.

502
00:46:47.750 --> 00:46:48.230
...

503
00:46:48.650 --> 00:46:49.250
...

504
00:46:50.190 --> 00:46:51.390
Describe is one I almost skipped.

505
00:46:51.390 --> 00:46:52.710
Because I don't personally use it.

506
00:46:52.750 --> 00:46:54.130
But I want to use it to illustrate a point.

507
00:46:54.790 --> 00:46:57.010
So let's learn one more, and then we'll move on.

508
00:46:57.150 --> 00:47:10.850
So it's s.describe, "d-e-s-c-r-i-b-e," open

509
00:47:10.850 --> 00:47:12.190
parenthesis, close parenthesis.

510
00:47:12.410 --> 00:47:13.930
And now it's going to give us a lot of output.

511
00:47:14.090 --> 00:47:14.990
Let's listen to some of it.

512
00:47:14.990 --> 00:47:43.610
"count 5.0000 mean 11.0000 std 4.1833 min 5.0000 25% 10.0000 50% 10.0000 75% 15.0000

513
00:47:45.350 --> 00:47:47.790
max 15.0000

514
00:47:49.410 --> 00:47:56.450
type colon float 64 dtype float 64 in left bracket 20 right dtype cortana window"

515
00:47:57.770 --> 00:47:59.450
dtype float 64.

516
00:48:00.270 --> 00:48:03.610
So that means these are floating point numbers in this.

517
00:48:04.350 --> 00:48:05.450
What is all this?

518
00:48:05.570 --> 00:48:08.110
Now I kind of let that all run.

519
00:48:08.190 --> 00:48:11.950
So you'd hear all of it to kind of make a point, which is that.

520
00:48:11.950 --> 00:48:18.210
So a lot of times the functions like this or methods rather like this that print out

521
00:48:18.210 --> 00:48:24.430
a whole lot of information are pretty widely used by sighted data scientists, especially

522
00:48:24.430 --> 00:48:27.530
when they're starting out, they're doing what's called exploratory data analysis.

523
00:48:28.010 --> 00:48:29.870
And you don't even know the questions that you're asking.

524
00:48:30.330 --> 00:48:34.030
You might just say, hey, print out all the normal statistical things.

525
00:48:34.610 --> 00:48:38.490
So describe prints out the standard deviation, the mean, the median, the count.

526
00:48:39.070 --> 00:48:42.550
And then it also the 25th and 75th percentiles.

527
00:48:43.110 --> 00:48:49.090
That's kind of a it's basically it means if you divided it, the data set in half, the

528
00:48:49.090 --> 00:48:52.350
first half, the median of the first half would be the 25th percentile.

529
00:48:52.670 --> 00:48:55.410
The median of the second half would be the 75th percentile.

530
00:48:55.510 --> 00:49:00.450
And another way of saying that is it would be the item closest to the quarter and the

531
00:49:00.450 --> 00:49:03.010
75th percent mark in the data set.

532
00:49:03.010 --> 00:49:11.890
OK, so these kinds of functions are commonly used by sighted data scientists, and we can

533
00:49:11.890 --> 00:49:15.670
use them to especially if we're preparing something for sighted people to use.

534
00:49:15.990 --> 00:49:21.890
But in my experience, and I also my recommendation is that you learn the specific ones and you

535
00:49:21.890 --> 00:49:23.330
ask for more specific information.

536
00:49:23.830 --> 00:49:24.350
Why is that?

537
00:49:24.390 --> 00:49:31.010
Because the answer is, do you really want to wait for all of all of this stuff to print

538
00:49:31.010 --> 00:49:33.710
out when you just maybe want one or two of these things?

539
00:49:33.810 --> 00:49:38.470
It's actually faster for you to print out each one individually, probably, and to listen

540
00:49:38.470 --> 00:49:41.210
to that, because a bunch of these, you're almost certainly not going to want all of

541
00:49:41.210 --> 00:49:41.710
them every time.

542
00:49:43.130 --> 00:49:46.970
When I teach sighted students, they ask me, why don't we always use describe?

543
00:49:47.450 --> 00:49:49.010
Because it prints out so much information.

544
00:49:49.490 --> 00:49:51.890
And my answer is describe is not that useful.

545
00:49:52.070 --> 00:49:55.730
If you say we're going to do something with the mean, you want to do something with the

546
00:49:55.730 --> 00:49:58.050
median, which you often do want to do.

547
00:49:58.410 --> 00:50:00.310
Also, it's just a lot of information, you know.

548
00:50:00.310 --> 00:50:04.450
If you're preparing something for someone else, you may just want to be like, hey, what's

549
00:50:04.450 --> 00:50:04.850
the mean?

550
00:50:04.990 --> 00:50:06.850
And your intent is more obvious.

551
00:50:07.390 --> 00:50:08.770
That's what I say to my sighted students.

552
00:50:08.950 --> 00:50:12.450
And for you guys, I say, you might say, well, why would we use describe?

553
00:50:12.810 --> 00:50:15.750
And my answer is, well, sometimes you're going to be working with sighted people, and

554
00:50:15.750 --> 00:50:19.110
sometimes you're going to be preparing something like an exploratory data analysis that you

555
00:50:19.110 --> 00:50:21.190
know other people are going to read, so you'd want to use it.

556
00:50:21.250 --> 00:50:24.930
But I would say generally for your own use, we're not going to want to use stuff like

557
00:50:24.930 --> 00:50:25.230
this.

558
00:50:25.590 --> 00:50:29.850
And we're also not going, we'll talk more about this, but we're also not really going

559
00:50:29.850 --> 00:50:32.190
to use those big, long representations that much.

560
00:50:32.370 --> 00:50:36.010
You need to know what they're like, but we're not going to use them as much.

561
00:50:36.090 --> 00:50:38.770
Once you're a little more experienced, once I teach you a few more things, you're not

562
00:50:38.770 --> 00:50:40.110
going to use that long stuff as much.

563
00:50:40.190 --> 00:50:46.190
We're going to get small amounts of information back, very focused, which is good for screen

564
00:50:46.190 --> 00:50:48.510
reader users who don't want to hear so much stuff, okay?

565
00:50:49.730 --> 00:50:52.030
Okay, so that was the point I wanted to make with describe.

566
00:50:52.710 --> 00:50:56.310
Okay, moving on now, we're going to work on making our two-dimensional data, okay?

567
00:50:57.750 --> 00:51:04.850
One thing we touched on here, and please, if there are questions that are coming up

568
00:51:04.850 --> 00:51:09.570
a lot in the chat, maybe one of the helpers could kind of get on and kind of filter it

569
00:51:09.570 --> 00:51:09.910
up to me.

570
00:51:10.270 --> 00:51:12.550
Anything like that, this is probably a good point for that.

571
00:51:14.290 --> 00:51:18.810
I think it seems like people are following along pretty well, though again, a reminder

572
00:51:18.810 --> 00:51:22.730
to everyone that if you do have questions, don't hesitate to pop them in the chat.

573
00:51:22.730 --> 00:51:29.250
One thing we did discuss briefly is that these, for instance, this s.sortValues won't

574
00:51:29.250 --> 00:51:33.010
actually change the order of your series.

575
00:51:33.450 --> 00:51:36.330
So don't worry, you're not messing around with your series.

576
00:51:36.810 --> 00:51:40.210
You can save a new variable as s.sortValues.

577
00:51:40.310 --> 00:51:45.190
So for instance, s.sorted equals s.sortValues, and that'll save it saved.

578
00:51:45.510 --> 00:51:50.590
I think there's also a way to put in place equals true, and that will overwrite your

579
00:51:50.590 --> 00:51:52.790
original variable for the series.

580
00:51:53.010 --> 00:51:58.070
But all that, that's a little bit of a tangent to say, not to worry, you're not changing

581
00:51:58.070 --> 00:52:00.450
anything here just by printing these things out.

582
00:52:03.530 --> 00:52:04.170
Thank you so much, Sarah.

583
00:52:05.150 --> 00:52:09.610
Okay, and if people have other questions, drop them in the chat, and if people are having

584
00:52:09.610 --> 00:52:11.210
the same question, I can also answer.

585
00:52:11.290 --> 00:52:17.010
Or if it's an involved answer, just let me know, helpers, and I'll explain on the mic.

586
00:52:17.790 --> 00:52:21.170
So let's talk about, let's work toward creating our two-dimensional dataset.

587
00:52:21.170 --> 00:52:26.510
First, we're going to spend just a little time on this idea of labeling data.

588
00:52:26.630 --> 00:52:29.010
That's not a technical term, it's just a descriptive term.

589
00:52:29.390 --> 00:52:32.750
Basically, giving names to things is a very common thing in programming, okay?

590
00:52:33.790 --> 00:52:36.270
And the index is one way we did that.

591
00:52:36.670 --> 00:52:42.530
So now we're going to have to learn one other way to do that, and that is, it's what's

592
00:52:42.530 --> 00:52:43.650
called a key, okay?

593
00:52:43.730 --> 00:52:46.050
And a key is a way you can look up some data.

594
00:52:46.850 --> 00:52:49.910
So since we're moving on to a new section, I'm going to clear the screen, Control-L.

595
00:52:52.050 --> 00:52:55.670
We already have 19 inputs, so that's pretty cool.

596
00:52:57.070 --> 00:53:04.310
And then let's do, I'm going to explain a new datatype to you, but this datatype is

597
00:53:04.310 --> 00:53:06.330
kind of just a stepping stone, okay?

598
00:53:07.470 --> 00:53:10.830
And this datatype is called a dictionary, okay?

599
00:53:12.850 --> 00:53:18.430
And basically, I'm going to show you the dictionary, but for the interest of time, if

600
00:53:18.430 --> 00:53:23.110
you think you can go ahead and put it in, put it in, but we're going to do another one

601
00:53:23.110 --> 00:53:23.690
right after.

602
00:53:23.810 --> 00:53:27.870
So you may just want to sit back and actively listen, and then you'll have the practice

603
00:53:27.870 --> 00:53:31.430
to make the dictionary in the next section, okay?

604
00:53:31.550 --> 00:53:32.750
Just for the interest of time.

605
00:53:36.450 --> 00:53:39.510
So what we're going to do is we're going to create a little phone book, okay?

606
00:53:39.610 --> 00:53:45.630
And if you remember, this makes me feel very old, but many, many years ago when I was a

607
00:53:46.030 --> 00:53:50.850
There was such a thing as a phone book, and it was a big, thick book that you could use

608
00:53:50.850 --> 00:53:55.730
to put down a whole lot of them to stand and reach a high shelf or something, which

609
00:53:55.730 --> 00:53:59.070
actually probably made it the most useful, but you could also use it to look up people's

610
00:53:59.070 --> 00:53:59.550
phone numbers.

611
00:54:00.810 --> 00:54:06.630
And it would basically be their name, and then you would have, it would be their name

612
00:54:06.630 --> 00:54:10.790
on one column, and then on the other side, it would be their phone number, okay?

613
00:54:10.870 --> 00:54:14.190
And you could use their name to look up their phone number, because the names were all in

614
00:54:14.190 --> 00:54:15.410
alphabetical order, okay?

615
00:54:15.630 --> 00:54:19.010
So what we're going to do is we're going to create a phone book, because that's essentially

616
00:54:19.010 --> 00:54:21.050
what this thing I'm going to show you is, this dictionary.

617
00:54:21.630 --> 00:54:29.070
It's a way to put, it's a way to contain data so it can be easily looked up, okay?

618
00:54:29.190 --> 00:54:35.450
So you have, and what it consists of is, it's basically like, imagine it's kind of like

619
00:54:35.450 --> 00:54:41.670
a list, so it's one-dimensional data, but each item has its own name, okay?

620
00:54:41.670 --> 00:54:47.150
And that name is called a key, and we can use the key to look up what the value, which

621
00:54:47.150 --> 00:54:47.670
is the data.

622
00:54:47.810 --> 00:54:53.790
So the key is the name, the value is the data, and we call those key-value pairs, okay?

623
00:54:54.070 --> 00:54:57.430
So we're going to, I'm going to create a phone book, and then I'm going to look something

624
00:54:57.430 --> 00:55:00.570
up in it, but you can decide if you want to follow along, go for it.

625
00:55:00.630 --> 00:55:04.850
I'm going to do it kind of quickly to explain, and then we're actually going to create our

626
00:55:04.850 --> 00:55:08.510
own dictionary in the next section, and you'll need to create that dictionary, so up to you

627
00:55:08.510 --> 00:55:09.770
if you want to create the phone book, okay?

628
00:55:10.770 --> 00:55:12.530
I'm just pressing delete a bunch of times.

629
00:55:12.710 --> 00:55:15.570
So I'm going to type phone underscore book.

630
00:55:17.290 --> 00:55:26.410
"P-H-O-N-E," phone, that's our variable name, space, book, equals, space, equals, and now

631
00:55:26.410 --> 00:55:32.670
we're going to use a curly brace, which is a, if you're using, we're doing, using square

632
00:55:32.670 --> 00:55:33.290
brackets a lot.

633
00:55:33.450 --> 00:55:38.250
If you hold, if on an English keyboard, if you hold down shift and you press the left

634
00:55:38.250 --> 00:55:45.350
square bracket, it'll create a curly brace, and it says left brace, so it's a new kind

635
00:55:45.350 --> 00:55:46.870
of syntactic structure, okay?

636
00:55:47.970 --> 00:55:54.690
Now, you can, once you start a brace, you're allowed to create your own new lines, okay?

637
00:55:54.830 --> 00:55:56.650
And sometimes that can help you keep track of things.

638
00:55:57.250 --> 00:55:59.990
So I'm going to hit enter, but you don't have to do this.

639
00:56:00.230 --> 00:56:03.330
I'm going to hit enter, and then I'm going to add my first key-value pair.

640
00:56:05.050 --> 00:56:07.490
Okay, I hit enter just for my own sanity.

641
00:56:07.490 --> 00:56:17.890
And then I'm going to do quote, I'm going to say my name, Patrick, and this is going

642
00:56:17.890 --> 00:56:18.970
to be my phone number, okay?

643
00:56:20.910 --> 00:56:24.730
"Quote," so that's quote, Patrick, quote, and then that's the key.

644
00:56:24.890 --> 00:56:26.670
So that's what I'm going to use to look up this data.

645
00:56:27.090 --> 00:56:33.770
Then I do a colon, and the colon is, it's kind of in the middle of the middle row on

646
00:56:33.770 --> 00:56:34.150
the keyboard.

647
00:56:34.250 --> 00:56:38.850
If you go all the way to the right on the letters in the middle on the English keyboard,

648
00:56:38.850 --> 00:56:48.090
it's the first special character to the right of the middle row that has ASDF on it.

649
00:56:48.610 --> 00:56:50.710
And it's, you hold down shift to access it.

650
00:56:50.810 --> 00:56:51.370
That's colon.

651
00:56:53.050 --> 00:56:54.990
And then I'm going to do another double quote.

652
00:56:55.770 --> 00:56:56.130
Quote.

653
00:56:56.590 --> 00:56:57.770
And then I'm, oh, actually, you know what?

654
00:56:57.770 --> 00:56:58.530
I'll make these integers.

655
00:56:58.730 --> 00:57:01.790
So I'm just going to say my phone number, which is, of course, and you guys all know

656
00:57:01.790 --> 00:57:09.190
my phone number is 999-999-9999.

657
00:57:09.650 --> 00:57:11.490
Now, you guys can call me anytime.

658
00:57:12.250 --> 00:57:18.270
Patrick and my phone number is 999-999-9999.

659
00:57:18.910 --> 00:57:19.270
Colon.

660
00:57:19.750 --> 00:57:22.950
And then I did a comma and I hit enter again.

661
00:57:23.570 --> 00:57:28.590
So that, so the phone book is, it's phonebook equals Curly Brace.

662
00:57:28.590 --> 00:57:30.750
And then I made a new line just for my own sanity.

663
00:57:30.850 --> 00:57:31.730
You don't have to do that.

664
00:57:32.530 --> 00:57:36.290
Then I have a string, Patrick, colon, and then

665
00:57:36.290 --> 00:57:37.730
an integer, which is our value.

666
00:57:37.930 --> 00:57:39.630
That's the actual data we're storing.

667
00:57:41.720 --> 00:57:43.600
999-999-9999.

668
00:57:43.880 --> 00:57:44.980
And then I do a comma.

669
00:57:45.260 --> 00:57:46.880
And now we're doing another key value pair.

670
00:57:47.460 --> 00:57:49.240
So the pairs are separated by commas.

671
00:57:49.320 --> 00:57:51.320
And within the pair, you have a colon

672
00:57:51.320 --> 00:57:52.900
to separate the key and the value.

673
00:57:54.080 --> 00:57:58.280
Now we're going to do Sarah, my co-instructor.

674
00:57:58.280 --> 00:58:04.680
Quote, "S-A-R-A-H," Sarah, colon, space.

675
00:58:04.680 --> 00:58:07.620
So Sarah, as a string, quote, Sarah, quote, colon.

676
00:58:08.080 --> 00:58:09.780
And of course, we all know Sarah's phone number,

677
00:58:09.860 --> 00:58:20.460
which is 111-111-1111

678
00:58:20.480 --> 00:58:23.740
Of course, you have to remember the plus 44 for the UK.

679
00:58:24.420 --> 00:58:26.560
Yeah, otherwise you're not going to get through to her.

680
00:58:26.560 --> 00:58:27.180
OK.

681
00:58:28.520 --> 00:58:30.840
Now, I'm not sure, Sarah, make sure you

682
00:58:30.840 --> 00:58:32.300
call in the right time frame.

683
00:58:32.620 --> 00:58:34.520
So it's five hours forward there, too, as well.

684
00:58:35.120 --> 00:58:36.300
So press Enter.

685
00:58:37.380 --> 00:58:39.540
And then go through the right brace.

686
00:58:40.080 --> 00:58:42.780
Remember, the brace is above the square bracket.

687
00:58:42.900 --> 00:58:46.560
You hold down Shift, right brace.

688
00:58:46.940 --> 00:58:49.180
And I know this is probably the most complicated thing we've

689
00:58:49.180 --> 00:58:49.920
put in so far.

690
00:58:50.320 --> 00:58:51.920
So no shame if you get it wrong.

691
00:58:51.960 --> 00:58:54.260
I get these wrong all the time, because I kind of

692
00:58:54.260 --> 00:58:54.820
start rushing.

693
00:58:54.820 --> 00:58:56.520
And I'll leave off a quote.

694
00:58:56.740 --> 00:58:59.340
I'll leave off a colon.

695
00:58:59.580 --> 00:59:01.280
It's very easy to mess these up.

696
00:59:01.600 --> 00:59:04.660
But I didn't do it correctly.

697
00:59:06.560 --> 00:59:13.300
So phone book equals left brace, new line, the string Patrick,

698
00:59:13.620 --> 00:59:16.080
colon, the integer, not very long integer

699
00:59:16.080 --> 00:59:20.140
with a lot of nines, comma, the string Sarah, colon,

700
00:59:20.680 --> 00:59:22.220
very long integer with a lot of ones.

701
00:59:22.980 --> 00:59:24.120
I put another comma there.

702
00:59:24.120 --> 00:59:26.500
It's not necessary to put a comma at the last item.

703
00:59:26.800 --> 00:59:29.480
But I recommend it, because you'll not

704
00:59:29.480 --> 00:59:30.440
mess yourself up as much.

705
00:59:30.940 --> 00:59:34.720
And then I did a right brace, OK?

706
00:59:36.080 --> 00:59:37.040
That's our dictionary.

707
00:59:37.340 --> 00:59:38.860
And now that we have the dictionary defined,

708
00:59:38.980 --> 00:59:40.200
we can type phone book.

709
00:59:42.160 --> 00:59:42.800
Phone book.

710
00:59:44.060 --> 00:59:45.240
I just said book.

711
00:59:45.340 --> 00:59:46.900
It's phone underscore book.

712
00:59:47.620 --> 00:59:50.600
"Out left bracket, 21 right bracket, colon,

713
00:59:51.200 --> 00:59:54.260
left brace, Patrick, colon, 9999999999."

714
00:59:54.260 --> 00:59:55.760
This is the representation of the object.

715
00:59:56.300 --> 01:00:00.020
Now, to pull out my phone number,

716
01:00:00.380 --> 01:00:02.180
now, there's only two numbers in here, right?

717
01:00:02.240 --> 01:00:04.100
But imagine there were thousands of numbers, OK?

718
01:00:04.100 --> 01:00:04.860
And this would be more useful.

719
01:00:05.000 --> 01:00:06.420
But let's do phone underscore book.

720
01:00:08.340 --> 01:00:10.060
And I'm not going to go slow.

721
01:00:10.160 --> 01:00:15.180
But phone underscore book, left square bracket, book.

722
01:00:15.180 --> 01:00:18.040
And then I type in quotes Patrick, OK?

723
01:00:18.540 --> 01:00:25.080
So quote, "quote, Patrick, quote, right bracket."

724
01:00:25.220 --> 01:00:26.120
And then I end with a bracket.

725
01:00:26.400 --> 01:00:28.000
So it's just like our slicing syntax.

726
01:00:28.180 --> 01:00:30.160
But instead of giving a number, we

727
01:00:30.160 --> 01:00:33.480
give it a string that is our key, OK?

728
01:00:33.940 --> 01:00:35.480
And you can use other things for keys.

729
01:00:35.560 --> 01:00:36.660
You can have keys that are integers.

730
01:00:36.840 --> 01:00:38.000
You can have keys that are actually

731
01:00:38.000 --> 01:00:39.380
more complicated things that I actually

732
01:00:39.380 --> 01:00:40.560
don't recommend choosing.

733
01:00:40.560 --> 01:00:47.280
But the most common ones would be integers, floats, or strings,

734
01:00:47.600 --> 01:00:49.960
OK, to pick as keys, all right?

735
01:00:50.020 --> 01:00:52.640
So in this case, it's a string, which is Patrick.

736
01:00:53.040 --> 01:01:00.060
"Out left bracket, 22 right bracket, colon, 999, 999, 9999."

737
01:01:00.940 --> 01:01:02.740
OK, just in case you've forgotten my number,

738
01:01:02.960 --> 01:01:06.120
there it is, phone underscore book, open square bracket,

739
01:01:06.120 --> 01:01:13.040
quote, Patrick, my name, which is the key, close the quote,

740
01:01:13.520 --> 01:01:14.540
close the square bracket.

741
01:01:14.820 --> 01:01:15.420
And I hit Enter.

742
01:01:15.660 --> 01:01:17.240
And then it printed out the data,

743
01:01:17.500 --> 01:01:19.740
which is in that key value pair.

744
01:01:19.920 --> 01:01:21.720
So remember, the Patrick was kind

745
01:01:21.720 --> 01:01:24.600
of a label on the data, which is the phone number, OK?

746
01:01:25.020 --> 01:01:26.000
And this is very common.

747
01:01:26.200 --> 01:01:27.560
A lot of things in programming are really

748
01:01:27.560 --> 01:01:30.720
just about giving things names, variables, indexes,

749
01:01:30.860 --> 01:01:33.940
and now key values, OK, key value pairs, all right?

750
01:01:35.200 --> 01:01:38.540
So now I've kind of shown you how to do that.

751
01:01:38.780 --> 01:01:42.520
Now let's create together a new dictionary, OK?

752
01:01:42.600 --> 01:01:44.640
And this is going to be our two-dimensional data set,

753
01:01:44.720 --> 01:01:45.000
all right?

754
01:01:45.780 --> 01:01:47.600
I just want to do a time check.

755
01:01:52.170 --> 01:01:53.690
"2 colon 6 PM.

756
01:01:53.910 --> 01:01:54.690
2 0 6, right?

757
01:01:55.230 --> 01:01:56.970
2 colon 7 PM."

758
01:01:57.990 --> 01:02:01.770
2 7 PM, that's, OK, it didn't say 0 7, but that's fine.

759
01:02:02.530 --> 01:02:04.310
I'm assuming it's 2 0 7.

760
01:02:04.430 --> 01:02:05.590
I think we should be OK for time.

761
01:02:06.290 --> 01:02:12.990
OK, so now let's create our dictionary

762
01:02:12.990 --> 01:02:15.430
that we're going to use for our two-dimensional data set, OK?

763
01:02:16.930 --> 01:02:22.130
Let's create three variables with each a list of five items.

764
01:02:22.310 --> 01:02:23.850
And then we're going to use those

765
01:02:23.850 --> 01:02:25.050
to create the dictionary, because I

766
01:02:25.050 --> 01:02:29.050
think that's easier than creating it all in one go, OK?

767
01:02:29.430 --> 01:02:31.150
So we already have our budget.

768
01:02:31.530 --> 01:02:32.910
But if you haven't created the budget,

769
01:02:32.910 --> 01:02:39.050
it was budget equals square bracket 10 10 5 15 15, OK?

770
01:02:39.110 --> 01:02:39.730
That's our budget.

771
01:02:40.110 --> 01:02:42.130
But if you already have the budget assigned,

772
01:02:42.270 --> 01:02:43.190
you don't have to do it again.

773
01:02:43.750 --> 01:02:44.990
And now let's get our other two.

774
01:02:45.450 --> 01:02:47.710
And I want to do it the same with the tutorials.

775
01:02:47.830 --> 01:02:49.030
I'm going to pull it out of my notes.

776
01:02:49.490 --> 01:02:49.790
...

777
01:02:50.970 --> 01:02:51.550
...

778
01:02:51.750 --> 01:02:52.550
...

779
01:02:52.610 --> 01:02:53.630
...

780
01:02:53.750 --> 01:02:54.810
...

781
01:02:54.870 --> 01:02:56.230
"June, July, September, October."

782
01:02:56.430 --> 01:02:58.550
So we have June, July, September, October, November.

783
01:02:58.830 --> 01:03:00.530
So it's going to be a list with five items.

784
01:03:00.530 --> 01:03:01.650
Each is a string.

785
01:03:02.470 --> 01:03:05.330
June, July, September, October, November, OK?

786
01:03:05.970 --> 01:03:06.970
So let's create that one.

787
01:03:07.390 --> 01:03:08.710
And we call that month, I think.

788
01:03:08.710 --> 01:03:09.110
Month equals left bracket.

789
01:03:09.170 --> 01:03:11.270
June, July, September, October, November, right bracket.

790
01:03:11.630 --> 01:03:12.070
IPython.

791
01:03:12.250 --> 01:03:14.050
So let's do month equals.

792
01:03:14.790 --> 01:03:18.610
"M-O-N-T-H month equals space."

793
01:03:18.810 --> 01:03:19.670
Open square bracket.

794
01:03:20.370 --> 01:03:21.090
Left bracket.

795
01:03:22.630 --> 01:03:23.070
Quote.

796
01:03:23.410 --> 01:03:26.150
And then I'm going to say, it started in June, right?

797
01:03:27.830 --> 01:03:28.690
Month equals left bracket.

798
01:03:28.690 --> 01:03:30.890
June, July, September, October, November, right bracket.

799
01:03:30.970 --> 01:03:32.030
That's a lot of text.

800
01:03:32.310 --> 01:03:39.250
"June, comma, space," July, "July."

801
01:03:39.510 --> 01:03:41.370
Remember, they have to be surrounded by quotes,

802
01:03:41.470 --> 01:03:42.630
and you separate them with commas.

803
01:03:44.150 --> 01:03:45.190
Quote, space.

804
01:03:45.850 --> 01:03:52.850
June, July, September, October, November.

805
01:03:53.830 --> 01:03:55.750
I'm not going to type all that in one character.

806
01:03:55.750 --> 01:03:57.290
"Quote, right bracket."

807
01:03:58.650 --> 01:04:03.350
But it's month equals, open square bracket, June, comma,

808
01:04:03.550 --> 01:04:07.510
July, comma, September, comma, October, comma, November,

809
01:04:07.890 --> 01:04:08.070
comma.

810
01:04:08.690 --> 01:04:09.970
Actually, don't put the comma at the end.

811
01:04:10.230 --> 01:04:11.450
But you can if you want.

812
01:04:11.470 --> 01:04:12.110
I won't mess it up.

813
01:04:12.710 --> 01:04:14.190
And then close the square bracket.

814
01:04:14.290 --> 01:04:14.890
I press Enter.

815
01:04:15.270 --> 01:04:16.670
"In left bracket, 24."

816
01:04:16.690 --> 01:04:18.050
OK, now I'm safe in my month variable, OK?

817
01:04:18.170 --> 01:04:19.270
So now we should have a budget.

818
01:04:20.570 --> 01:04:22.570
The budget should be five items long.

819
01:04:22.670 --> 01:04:23.810
The month should be five items long.

820
01:04:23.810 --> 01:04:25.690
We need to create one more, OK?

821
01:04:26.370 --> 01:04:28.750
And it's going to be cookie budget, OK?

822
01:04:29.070 --> 01:04:31.370
Because I like cookies, OK?

823
01:04:31.730 --> 01:04:32.930
Maybe you like cookies too.

824
01:04:33.130 --> 01:04:34.150
I don't know if you do.

825
01:04:34.270 --> 01:04:35.970
But hopefully, you do.

826
01:04:37.830 --> 01:04:40.150
And our little data set here is going

827
01:04:40.150 --> 01:04:41.730
to represent the budget.

828
01:04:41.970 --> 01:04:43.850
We have the total budget for each month

829
01:04:43.850 --> 01:04:46.370
and the budget we have for cookies each month.

830
01:04:46.430 --> 01:04:47.890
And you can kind of imagine this as like,

831
01:04:47.950 --> 01:04:52.090
imagine you're like a child in like 1964, OK?

832
01:04:52.090 --> 01:04:55.690
And your budget is $7 a month or something like that, OK?

833
01:04:56.730 --> 01:04:58.710
Just we're keeping things really simple, OK?

834
01:05:00.010 --> 01:05:02.710
So our cookie budget is going to be,

835
01:05:02.770 --> 01:05:03.970
and I'm going to use the same value.

836
01:05:04.190 --> 01:05:06.230
"Month equals left bracket, June, July, September, October.

837
01:05:06.570 --> 01:05:07.350
Month equals left bracket.

838
01:05:07.510 --> 01:05:08.950
Month equals cookie underscore budget equals left bracket,

839
01:05:09.010 --> 01:05:10.830
3, 2, 0, 4, 5, right bracket."

840
01:05:11.230 --> 01:05:13.650
3, 2, 0, 4, and 5.

841
01:05:13.950 --> 01:05:16.630
So let's do cookie underscore budget.

842
01:05:17.970 --> 01:05:25.530
C, budget, space, left bracket, space, space, 5.

843
01:05:25.970 --> 01:05:27.110
I think it was 3, 2, 0, 4, 5.

844
01:05:27.190 --> 01:05:28.730
I went down fast there because I knew

845
01:05:28.730 --> 01:05:30.450
I wasn't going to remember the numbers if I didn't.

846
01:05:30.550 --> 01:05:32.630
But it's cookie underscore budget

847
01:05:34.470 --> 01:05:41.230
equals open square bracket, 3, 2, 0, 4, 5, OK?

848
01:05:42.050 --> 01:05:43.350
And if it's a little different for the curriculum,

849
01:05:43.470 --> 01:05:44.150
it's not the end of the book.

850
01:05:44.730 --> 01:05:46.870
And then we want to close the square bracket.

851
01:05:47.510 --> 01:05:48.030
"Right bracket."

852
01:05:48.110 --> 01:05:48.530
Should I close it?

853
01:05:48.550 --> 01:05:49.810
"Right bracket."

854
01:05:50.010 --> 01:05:50.650
Yeah, do it.

855
01:05:51.850 --> 01:05:52.190
5.

856
01:05:53.510 --> 01:05:56.070
OK, so now we should have three lists.

857
01:05:57.190 --> 01:06:00.150
In left bracket, 25, right bracket, colon.

858
01:06:01.250 --> 01:06:03.510
OK, but no output because I saved a variable, OK?

859
01:06:03.630 --> 01:06:05.310
And now one thing I do want you to check,

860
01:06:05.790 --> 01:06:08.870
I know we're all frantically inputting lists right now

861
01:06:08.870 --> 01:06:10.310
and not really listening to me.

862
01:06:10.370 --> 01:06:11.870
But what I'm going to do is I'm going

863
01:06:11.870 --> 01:06:13.930
to use my len function to check all three lists.

864
01:06:13.930 --> 01:06:15.830
If any of them don't have five items,

865
01:06:15.930 --> 01:06:16.970
we're going to have a problem, OK?

866
01:06:17.370 --> 01:06:18.310
We're going to have a problem.

867
01:06:18.970 --> 01:06:20.590
So let's do len budget.

868
01:06:22.210 --> 01:06:22.710
Len.

869
01:06:23.830 --> 01:06:26.990
"Out left bracket, 25, right bracket, colon."

870
01:06:27.250 --> 01:06:27.590
5.

871
01:06:27.650 --> 01:06:28.070
Len.

872
01:06:29.090 --> 01:06:29.810
Cookie budget.

873
01:06:30.990 --> 01:06:31.910
Underscore budget.

874
01:06:32.250 --> 01:06:32.550
"Cookie.

875
01:06:33.510 --> 01:06:34.010
Budget.

876
01:06:34.570 --> 01:06:35.070
37.

877
01:06:35.730 --> 01:06:36.070
In left.

878
01:06:36.190 --> 01:06:36.570
Cookie.

879
01:06:36.670 --> 01:06:36.870
Len."

880
01:06:37.170 --> 01:06:38.250
I got an error there, but I.

881
01:06:38.370 --> 01:06:38.610
"Cookie.

882
01:06:40.490 --> 01:06:40.810
Right.

883
01:06:41.030 --> 01:06:41.850
Name error.

884
01:06:41.950 --> 01:06:42.590
Trace back."

885
01:06:42.590 --> 01:06:43.970
Did I call it something else?

886
01:06:46.750 --> 01:06:47.270
"In 37.

887
01:06:48.090 --> 01:06:48.430
In left.

888
01:06:49.110 --> 01:06:50.150
Cookie slash.

889
01:06:51.150 --> 01:06:54.790
In left bracket, 29, right bracket, colon.

890
01:06:55.330 --> 01:06:56.230
Cookie slash.

891
01:06:56.930 --> 01:06:57.270
In left.

892
01:06:57.450 --> 01:06:58.930
In left bracket, 29."

893
01:06:59.270 --> 01:07:00.790
Let's just see what I did wrong there.

894
01:07:02.610 --> 01:07:03.130
Yeah.

895
01:07:03.290 --> 01:07:04.090
In left bracket.

896
01:07:04.430 --> 01:07:06.590
In left bracket, colon.

897
01:07:07.150 --> 01:07:08.190
5, right bracket.

898
01:07:09.130 --> 01:07:09.550
Cookie.

899
01:07:09.550 --> 01:07:12.110
In left bracket, 29, right bracket, colon.

900
01:07:12.670 --> 01:07:15.470
Cookie line budget equals left bracket, 3.

901
01:07:15.950 --> 01:07:20.980
"In left bracket, 37 dash."

902
01:07:21.000 --> 01:07:21.960
Am I doing caps or something?

903
01:07:22.200 --> 01:07:22.820
"Name error.

904
01:07:22.920 --> 01:07:23.520
Trace back.

905
01:07:24.880 --> 01:07:26.260
In caps lock on.

906
01:07:27.000 --> 01:07:28.140
Caps lock off.

907
01:07:29.060 --> 01:07:29.940
Cookie slash.

908
01:07:33.130 --> 01:07:33.950
T. 37."

909
01:07:34.390 --> 01:07:35.430
Yeah, I don't know what I did wrong there.

910
01:07:36.170 --> 01:07:37.230
I'm going to save the cookie.

911
01:07:37.530 --> 01:07:39.010
Yeah, you tell me what I did wrong.

912
01:07:39.010 --> 01:07:41.750
I was going to say that I don't see caps lock on, but yeah.

913
01:07:42.350 --> 01:07:42.970
Yeah, odd, right?

914
01:07:42.970 --> 01:07:47.010
Yeah, the chat is saying you missed an O in cookie.

915
01:07:48.050 --> 01:07:48.570
"Space."

916
01:07:48.990 --> 01:07:50.330
There's only one O in cookie?

917
01:07:53.750 --> 01:07:54.830
IE line budget.

918
01:07:55.010 --> 01:07:57.450
Yeah, it was cookie with one O.

919
01:07:58.810 --> 01:08:02.450
So this really is like a small child in 1964, OK?

920
01:08:02.830 --> 01:08:06.090
But let's do, you can imagine all the R's being backward

921
01:08:06.090 --> 01:08:07.050
and stuff like that.

922
01:08:07.430 --> 01:08:10.210
Let's do, I'll just do this.

923
01:08:10.210 --> 01:08:15.609
I'm going to do cookie budget spelled correctly.

924
01:08:15.990 --> 01:08:17.229
And there's something about programming

925
01:08:17.229 --> 01:08:20.149
that makes my spelling ability massively decrease.

926
01:08:20.210 --> 01:08:21.790
My already poor spelling ability just

927
01:08:21.790 --> 01:08:23.930
decreases precipitously when I'm doing programming.

928
01:08:24.029 --> 01:08:25.529
It must be like a left brain, right brain thing.

929
01:08:26.410 --> 01:08:27.370
"Equals cookie."

930
01:08:27.850 --> 01:08:29.069
...

931
01:08:29.450 --> 01:08:31.130
I just fixed it, basically.

932
01:08:31.330 --> 01:08:34.330
If you got it right, I just overwrote the variable

933
01:08:34.330 --> 01:08:35.450
with a new variable, OK?

934
01:08:35.510 --> 01:08:37.189
Or I reassigned it.

935
01:08:38.010 --> 01:08:39.050
All right.

936
01:08:39.050 --> 01:08:41.910
So len cookie budget.

937
01:08:42.390 --> 01:08:43.109
"Cookie line budget.

938
01:08:46.779 --> 01:08:49.899
Out left bracket 33, right bracket colon."

939
01:08:50.640 --> 01:08:53.020
And then let's do len cookie budget.

940
01:08:53.220 --> 01:08:56.560
And then we're going to do len month, OK?

941
01:08:57.020 --> 01:08:59.899
"Out left bracket 34, right bracket colon."

942
01:09:00.399 --> 01:09:02.160
So now let's create our data frame.

943
01:09:02.220 --> 01:09:03.779
And then I'm going to explain a few things about how

944
01:09:03.779 --> 01:09:06.140
we work with two dimensional data.

945
01:09:06.460 --> 01:09:08.560
So it's a two step process.

946
01:09:08.560 --> 01:09:09.660
So we first create a dictionary.

947
01:09:10.020 --> 01:09:12.700
And then we create the data frame from the dictionary, OK?

948
01:09:13.080 --> 01:09:14.560
So we have our three variables.

949
01:09:15.560 --> 01:09:18.520
And now let's use them to create the dictionary.

950
01:09:18.779 --> 01:09:22.939
So we're going to call it monthly underscore budget.

951
01:09:24.260 --> 01:09:29.960
"M-O-N-T-H-L-Y. Monthly budget."

952
01:09:32.020 --> 01:09:32.899
Monthly budget.

953
01:09:33.160 --> 01:09:34.920
Monthly underscore budget equals.

954
01:09:35.359 --> 01:09:36.899
And then let's do an open brace.

955
01:09:37.979 --> 01:09:39.960
And I'm going to press Enter just for my sanity.

956
01:09:42.100 --> 01:09:45.000
And then what we want to do is, in quotes,

957
01:09:45.140 --> 01:09:46.180
I'm going to put budget.

958
01:09:47.700 --> 01:09:52.200
And these are the labels for what

959
01:09:52.200 --> 01:09:53.560
are going to be columns in a minute.

960
01:09:53.720 --> 01:09:55.020
But we'll talk about that in a minute.

961
01:09:55.620 --> 01:09:57.440
But basically, remember, the key is the label.

962
01:09:58.360 --> 01:09:58.720
Budget.

963
01:09:58.880 --> 01:09:59.860
And I did lowercase.

964
01:10:00.080 --> 01:10:01.820
I keep everything lowercase, OK?

965
01:10:01.820 --> 01:10:02.680
Don't confuse yourself.

966
01:10:04.180 --> 01:10:08.340
And then I did a colon and then the variable cookie budget.

967
01:10:08.700 --> 01:10:09.880
And then we'll go over this again.

968
01:10:12.190 --> 01:10:13.670
"Cookie line budget.

969
01:10:14.650 --> 01:10:15.190
Cookie.

970
01:10:17.190 --> 01:10:18.710
Cookie line budget."

971
01:10:18.910 --> 01:10:19.430
I'm too lazy.

972
01:10:19.490 --> 01:10:19.850
OK.

973
01:10:21.130 --> 01:10:23.510
And then let's do quote.

974
01:10:24.570 --> 01:10:25.230
Oh, no.

975
01:10:25.510 --> 01:10:26.730
That's completely incorrect.

976
01:10:27.290 --> 01:10:28.130
That should be budget.

977
01:10:29.270 --> 01:10:32.350
...

978
01:10:32.350 --> 01:10:36.750
Budget, in quotes, colon, budget, the variable, comma.

979
01:10:37.190 --> 01:10:39.990
And let's do, in quotes, cookie underscore budget.

980
01:10:40.950 --> 01:10:41.190
...

981
01:10:42.910 --> 01:10:43.590
Colon.

982
01:10:44.230 --> 01:10:46.450
And then let's use our cookie budget variable.

983
01:10:47.890 --> 01:10:49.370
...

984
01:10:50.610 --> 01:10:52.790
...

985
01:10:52.790 --> 01:10:56.310
And then let's do month, in quotes.

986
01:10:56.890 --> 01:10:57.250
"Quote."

987
01:10:57.850 --> 01:10:59.170
I'll go over this again.

988
01:10:59.230 --> 01:10:59.890
I know this is confusing.

989
01:11:00.490 --> 01:11:04.130
"M-O-N-T-H, month, colon."

990
01:11:04.230 --> 01:11:04.990
And a new line.

991
01:11:05.150 --> 01:11:07.870
And now I'm going to do the right brace.

992
01:11:08.170 --> 01:11:08.990
Right brace.

993
01:11:09.090 --> 01:11:09.930
So what do we have here?

994
01:11:09.970 --> 01:11:12.430
We have monthly underscore budget.

995
01:11:12.550 --> 01:11:13.630
That's our variable name.

996
01:11:16.290 --> 01:11:17.970
Equals left brace.

997
01:11:18.650 --> 01:11:20.750
I did a new line, but you don't have to.

998
01:11:22.650 --> 01:11:26.370
Quote, budget, end quote, colon.

999
01:11:27.190 --> 01:11:28.450
Then our budget variable.

1000
01:11:28.450 --> 01:11:30.030
Budget with no quote, OK?

1001
01:11:31.510 --> 01:11:32.050
Comma.

1002
01:11:32.650 --> 01:11:36.890
Next line is, quote, cookie underscore budget.

1003
01:11:37.010 --> 01:11:38.890
Quote, colon.

1004
01:11:39.470 --> 01:11:42.450
And then we have our cookie underscore budget variable.

1005
01:11:42.910 --> 01:11:43.490
Comma.

1006
01:11:43.870 --> 01:11:44.830
Then we have a new line.

1007
01:11:45.070 --> 01:11:47.330
And then we have month, in quotes.

1008
01:11:47.690 --> 01:11:49.670
So quote, month, quote, colon.

1009
01:11:50.250 --> 01:11:54.790
And then we have our month variable, M-O-N-T-H.

1010
01:11:55.810 --> 01:11:58.390
And then we, I did put a comma, but you

1011
01:11:58.390 --> 01:11:59.890
don't need to, on the last one.

1012
01:12:00.330 --> 01:12:03.230
And then you can do a right brace, OK?

1013
01:12:03.830 --> 01:12:04.550
I'm going to hit Enter.

1014
01:12:04.690 --> 01:12:08.310
Hopefully it'll work for me.

1015
01:12:09.070 --> 01:12:13.410
Now, so what we have is a variable, monthly budget,

1016
01:12:13.590 --> 01:12:16.070
with three key value pairs.

1017
01:12:16.710 --> 01:12:20.090
And the key is each describing it.

1018
01:12:20.110 --> 01:12:22.610
But we basically just kept it the same as the variable names,

1019
01:12:22.690 --> 01:12:22.910
OK?

1020
01:12:22.990 --> 01:12:26.730
So it's budget, in quotes, budget, the variable,

1021
01:12:27.290 --> 01:12:28.830
cookie underscore budget, in quotes,

1022
01:12:29.010 --> 01:12:31.250
cookie underscore budget, the variable,

1023
01:12:31.630 --> 01:12:35.970
and then monthly, or month, in quotes, month, the variable,

1024
01:12:36.250 --> 01:12:36.430
OK?

1025
01:12:37.690 --> 01:12:41.530
If people in the chat want to kind of paste this

1026
01:12:41.530 --> 01:12:43.290
in so people can copy it in case they're

1027
01:12:43.290 --> 01:12:47.470
having issues or something, then go ahead and paste it

1028
01:12:47.470 --> 01:12:47.990
in for people.

1029
01:12:48.250 --> 01:12:50.590
So they have something to copy if they're having trouble.

1030
01:12:51.570 --> 01:12:52.750
But it is good practice.

1031
01:12:53.350 --> 01:12:54.310
Yeah, put it in the chat.

1032
01:12:54.310 --> 01:13:01.130
And then it is good practice to type this all in and just

1033
01:13:01.130 --> 01:13:01.870
take your time, OK?

1034
01:13:01.870 --> 01:13:04.270
I know it can be very easy to get syntax errors in something

1035
01:13:04.270 --> 01:13:04.810
like this.

1036
01:13:05.270 --> 01:13:07.630
It's totally normal when you start learning programming

1037
01:13:08.510 --> 01:13:10.130
to get constant syntax errors.

1038
01:13:10.270 --> 01:13:10.890
And you know what?

1039
01:13:11.110 --> 01:13:12.370
You'll be missing a quote.

1040
01:13:12.490 --> 01:13:13.170
There won't be a colon.

1041
01:13:13.350 --> 01:13:14.530
It'll be something annoying.

1042
01:13:15.390 --> 01:13:17.690
And the things to try are you can start again

1043
01:13:19.650 --> 01:13:22.130
or go character by character, OK?

1044
01:13:22.130 --> 01:13:24.410
And using the review, OK?

1045
01:13:24.510 --> 01:13:26.050
And in fact, I think in some ways,

1046
01:13:26.150 --> 01:13:29.190
I think it makes us more patient with stuff like that.

1047
01:13:29.290 --> 01:13:31.270
I feel like a lot of times I've noticed when I teach sighted

1048
01:13:31.270 --> 01:13:37.590
people, it's like they're like, they don't really think.

1049
01:13:37.750 --> 01:13:39.090
They're seeing it in their brain so much

1050
01:13:39.090 --> 01:13:40.510
that they're not seeing what's on the screen.

1051
01:13:40.930 --> 01:13:43.030
So they'll kind of be like, oh, no,

1052
01:13:43.110 --> 01:13:43.970
but I did everything right.

1053
01:13:44.330 --> 01:13:45.450
But it's really hard to miss.

1054
01:13:45.590 --> 01:13:47.170
It's really easy to miss something visually.

1055
01:13:48.030 --> 01:13:50.190
I'm not saying it's not useful to see things visually too.

1056
01:13:50.190 --> 01:13:52.230
But it's really easy to miss something visually.

1057
01:13:52.470 --> 01:13:54.650
But often, if you review character by character

1058
01:13:54.650 --> 01:13:57.970
using NVDA, you're actually fairly liable to catch things

1059
01:13:57.970 --> 01:13:59.710
because you're like, oh, wait, oh, whoa.

1060
01:14:00.210 --> 01:14:02.150
You're not going to have, there's not really

1061
01:14:02.150 --> 01:14:03.650
as many mirages that can win.

1062
01:14:04.410 --> 01:14:05.950
OK, so we have our monthly budget.

1063
01:14:06.090 --> 01:14:09.190
I was just letting, giving you some time to catch up there.

1064
01:14:11.350 --> 01:14:13.190
So we have our dictionary now.

1065
01:14:13.870 --> 01:14:16.330
And remember our type function, our old faithful type function?

1066
01:14:16.350 --> 01:14:17.050
We haven't used it in a while.

1067
01:14:17.070 --> 01:14:18.450
Let's just run it on monthly budget.

1068
01:14:19.570 --> 01:14:20.050
P.

1069
01:14:21.170 --> 01:14:24.930
So T-Y-P-E, open parenthesis, monthly.

1070
01:14:25.750 --> 01:14:30.630
...

1071
01:14:32.110 --> 01:14:36.630
"Right paren, out left bracket 36, right bracket colon, dict."

1072
01:14:36.850 --> 01:14:38.810
It pronounced it kind of funny, but dict.

1073
01:14:39.170 --> 01:14:40.510
It's short for dictionary.

1074
01:14:40.790 --> 01:14:42.290
That's our data type that we're using here.

1075
01:14:43.130 --> 01:14:45.150
So remember, dictionary, it's really just labeled data.

1076
01:14:45.290 --> 01:14:47.730
And so what we did here was that we

1077
01:14:47.730 --> 01:14:50.250
had our three lists, each with five items,

1078
01:14:50.350 --> 01:14:52.050
saved as variables, and then we gave them

1079
01:14:52.050 --> 01:14:54.870
names in the dictionary, keys, as keys.

1080
01:14:55.650 --> 01:14:58.010
Now we're going to use this monthly budget.

1081
01:14:58.830 --> 01:15:01.570
We could pull out data from this, but we have no reason to.

1082
01:15:01.670 --> 01:15:04.070
So what we're going to do is create a data frame in Pandas.

1083
01:15:04.430 --> 01:15:05.650
So we're going to do Pandas.

1084
01:15:05.990 --> 01:15:06.870
"P-A."

1085
01:15:07.050 --> 01:15:09.550
OK, so sorry, let's save it to a variable.

1086
01:15:09.690 --> 01:15:11.950
So D-F, and I'll explain.

1087
01:15:12.030 --> 01:15:15.810
This is another conventional variable, short variable.

1088
01:15:16.070 --> 01:15:31.050
So it's D-F equals, and now do Pandas dot data frame.

1089
01:15:31.810 --> 01:15:37.690
And it's capital D-A-T-A, capital F frame.

1090
01:15:39.670 --> 01:15:44.010
"F-R-A-M-E," and we call that camel case or word case

1091
01:15:44.010 --> 01:15:45.150
is what people call it sometimes.

1092
01:15:46.170 --> 01:15:48.070
The camel case is a little more evocative.

1093
01:15:48.250 --> 01:15:49.430
Then open parenthesis.

1094
01:15:50.650 --> 01:15:51.850
"Data frame."

1095
01:15:51.970 --> 01:15:55.910
And then we're going to pass it our monthly budget variable.

1096
01:15:57.490 --> 01:16:03.010
...

1097
01:16:03.390 --> 01:16:11.430
So it's D-F equals Pandas dot capital D data, capital F

1098
01:16:11.430 --> 01:16:13.350
frame, open parenthesis.

1099
01:16:14.290 --> 01:16:16.730
And then we pass in our monthly underscore budget.

1100
01:16:16.890 --> 01:16:18.170
Then we close the parenthesis.

1101
01:16:18.950 --> 01:16:22.510
And that should create a Pandas data frame from our dictionary

1102
01:16:22.510 --> 01:16:25.130
and assign it to D-F, the variable D-F.

1103
01:16:25.230 --> 01:16:26.090
It's a very short variable.

1104
01:16:28.080 --> 01:16:30.300
"In left bracket, 38, right bracket."

1105
01:16:30.300 --> 01:16:31.920
Because we assigned a variable, we don't get any output.

1106
01:16:32.900 --> 01:16:35.780
But now we have a data frame variable.

1107
01:16:36.840 --> 01:16:42.060
And just like with S before, D-F is a conventional variable

1108
01:16:42.060 --> 01:16:45.600
name for a data frame.

1109
01:16:45.860 --> 01:16:47.640
So S was a conventional name for series.

1110
01:16:47.800 --> 01:16:49.120
D-F is a conventional one for data frame.

1111
01:16:49.260 --> 01:16:53.000
If you only have one data frame, then people

1112
01:16:53.000 --> 01:16:55.640
will conventionally use the variable name

1113
01:16:55.640 --> 01:16:57.220
D-F for the data frame.

1114
01:16:57.280 --> 01:16:58.380
If you have more than one data frame

1115
01:16:58.380 --> 01:17:00.480
and you're doing other things like that,

1116
01:17:00.760 --> 01:17:02.300
you should probably give them other names, more

1117
01:17:02.300 --> 01:17:03.480
descriptive names.

1118
01:17:06.500 --> 01:17:09.260
I figure people are kind of taking a while to catch up.

1119
01:17:09.540 --> 01:17:11.740
But I'm going to start explaining a little bit

1120
01:17:11.740 --> 01:17:13.060
about the data frame here, OK?

1121
01:17:13.280 --> 01:17:15.260
I'm going to just do a little time check, whatever you like.

1122
01:17:15.940 --> 01:17:20.320
2, or "2 colon 22 PM."

1123
01:17:20.540 --> 01:17:21.460
2.22, OK.

1124
01:17:21.760 --> 01:17:24.320
So yeah, so now I'm going to show you a couple of the data

1125
01:17:24.320 --> 01:17:27.740
frame fundamentals, OK?

1126
01:17:27.760 --> 01:17:29.420
So the basic things you can do with the data frame.

1127
01:17:31.940 --> 01:17:34.740
So the first thing to know about a data frame

1128
01:17:34.740 --> 01:17:37.040
is, well, we'll look at the representation in a minute.

1129
01:17:37.320 --> 01:17:40.520
But before we look at the representation, I want to,

1130
01:17:40.980 --> 01:17:43.880
which is only marginally useful for screen reader users,

1131
01:17:44.640 --> 01:17:46.200
I want to talk about the format.

1132
01:17:46.660 --> 01:17:49.080
So the data frame, it's two-dimensional data, OK?

1133
01:17:49.440 --> 01:17:51.540
So you can kind of think about it

1134
01:17:51.540 --> 01:17:54.620
as if you imagine a line going from left to right

1135
01:17:55.120 --> 01:17:56.000
in your mind.

1136
01:17:56.560 --> 01:17:59.100
And then for each item on that line,

1137
01:17:59.200 --> 01:18:03.000
there's also another list going from top to bottom, OK?

1138
01:18:03.560 --> 01:18:05.840
And if you've ever used Excel, it's

1139
01:18:05.840 --> 01:18:06.780
the same as a spreadsheet.

1140
01:18:06.960 --> 01:18:09.280
So you have from left to right, you have columns.

1141
01:18:09.780 --> 01:18:12.000
And from top to bottom, we have rows, OK?

1142
01:18:12.000 --> 01:18:13.640
It's a table, OK?

1143
01:18:13.840 --> 01:18:16.160
So we have an x-dimension and a y-dimension.

1144
01:18:17.600 --> 01:18:21.780
And so our x-dimension has columns,

1145
01:18:21.840 --> 01:18:24.460
which are going to be things like our monthly budget,

1146
01:18:24.720 --> 01:18:28.800
our cookie budget, our budget, and our month.

1147
01:18:29.280 --> 01:18:31.000
Those are the items from left to right.

1148
01:18:31.040 --> 01:18:31.480
We have three.

1149
01:18:32.040 --> 01:18:35.360
And then from up to down, the rows

1150
01:18:35.360 --> 01:18:37.020
are going to be our five items that

1151
01:18:37.020 --> 01:18:38.480
are going to be data for each of those,

1152
01:18:38.480 --> 01:18:42.260
and each month's different kinds of budget, OK?

1153
01:18:42.940 --> 01:18:45.000
So let's try out a few different things, OK?

1154
01:18:45.080 --> 01:18:47.300
I want to kind of get to some stuff at the end that's

1155
01:18:47.300 --> 01:18:47.720
pretty cool.

1156
01:18:48.220 --> 01:18:52.920
So I'm going to try to pick up the pace like 20% here, OK?

1157
01:18:53.320 --> 01:18:55.020
Let's still try to explain things fully.

1158
01:18:56.420 --> 01:18:57.760
So let's do clear.

1159
01:18:57.880 --> 01:18:59.000
I'm going to clear things because we're

1160
01:18:59.000 --> 01:19:00.260
going to experiment with our data frame now.

1161
01:19:00.320 --> 01:19:01.080
So Control-L.

1162
01:19:01.960 --> 01:19:04.280
"In left bracket, 38, right bracket, 12."

1163
01:19:04.280 --> 01:19:06.180
We now have our data frame variable

1164
01:19:06.180 --> 01:19:06.920
that we're going to work with.

1165
01:19:07.340 --> 01:19:11.160
So let's first do just listen a little

1166
01:19:11.160 --> 01:19:13.800
to what the format of the data frame is, the representation.

1167
01:19:14.700 --> 01:19:15.160
D-F.

1168
01:19:15.160 --> 01:19:19.380
"D-F. Out left bracket, 38, right bracket, colon.

1169
01:19:20.640 --> 01:19:22.520
Budget cookie line, budget month."

1170
01:19:22.620 --> 01:19:24.100
That was the column names, OK?

1171
01:19:24.900 --> 01:19:27.540
Now let's hear the actual table stuff.

1172
01:19:30.190 --> 01:19:31.290
"0, 10, June 3."

1173
01:19:31.290 --> 01:19:32.310
0, 10, June.

1174
01:19:32.530 --> 01:19:33.390
And then it said 3.

1175
01:19:33.510 --> 01:19:34.290
But it said June 3rd.

1176
01:19:34.310 --> 01:19:36.230
It's trying to predict things in a not useful way.

1177
01:19:36.230 --> 01:19:40.150
So 0, 10, June 3rd, OK?

1178
01:19:40.270 --> 01:19:42.210
So the first item is the index.

1179
01:19:42.570 --> 01:19:45.290
Remember, it's the range from 0 to 4.

1180
01:19:46.070 --> 01:19:48.450
So that first item is not going to really mean anything.

1181
01:19:48.550 --> 01:19:49.650
It just means it's the first item.

1182
01:19:49.730 --> 01:19:50.630
That's what the 0 is.

1183
01:19:51.010 --> 01:19:53.310
Then 10 was our budget.

1184
01:19:54.990 --> 01:19:56.370
The month was June.

1185
01:19:56.490 --> 01:19:57.930
And then the cookie budget was 3.

1186
01:19:58.310 --> 01:19:59.170
So let's hear another row.

1187
01:20:01.470 --> 01:20:02.630
"1, 10, July 2."

1188
01:20:02.690 --> 01:20:03.430
1, 10, July 2nd.

1189
01:20:03.710 --> 01:20:05.970
So 1 is the index.

1190
01:20:06.470 --> 01:20:07.570
10 is the budget.

1191
01:20:08.010 --> 01:20:08.970
July is the month.

1192
01:20:09.190 --> 01:20:10.250
And 2 is the cookie budget.

1193
01:20:10.350 --> 01:20:12.590
So we're going to be spending $2 that month on cookies.

1194
01:20:13.030 --> 01:20:13.990
We'll just do one more.

1195
01:20:16.750 --> 01:20:18.270
"2, 5, 0, September."

1196
01:20:18.930 --> 01:20:20.190
And then so it's so on.

1197
01:20:20.230 --> 01:20:21.470
It'll do that for each line, OK?

1198
01:20:21.490 --> 01:20:22.630
I won't review the whole thing.

1199
01:20:23.250 --> 01:20:25.810
And at the end, there's no D type or anything like that.

1200
01:20:25.950 --> 01:20:28.430
That is because there's different data in each column.

1201
01:20:28.610 --> 01:20:30.090
So a D type doesn't mean anything.

1202
01:20:30.190 --> 01:20:31.510
There's all sorts of D types in here.

1203
01:20:31.910 --> 01:20:32.970
We have integers.

1204
01:20:33.130 --> 01:20:34.270
And we also have strings, OK?

1205
01:20:36.970 --> 01:20:40.050
So now, I will say what we're going to learn right now

1206
01:20:40.050 --> 01:20:43.550
is how to learn a whole bunch of stuff about the data frame

1207
01:20:43.550 --> 01:20:45.370
without using the string representation.

1208
01:20:47.770 --> 01:20:50.490
And I'll talk more about why the string representation,

1209
01:20:50.510 --> 01:20:52.950
why you're actually not missing out on that much by not

1210
01:20:53.390 --> 01:20:54.850
reviewing the string representation.

1211
01:20:56.990 --> 01:20:59.490
It actually, you're not missing out on very much

1212
01:20:59.490 --> 01:21:00.370
compared to a sighted person.

1213
01:21:00.410 --> 01:21:02.330
But I'll kind of return to that topic in a minute, OK?

1214
01:21:02.350 --> 01:21:04.250
When we have a longer data set where it's more obvious.

1215
01:21:05.390 --> 01:21:06.110
All right.

1216
01:21:06.310 --> 01:21:10.570
So let's do a couple of basic functions with the data frame.

1217
01:21:11.290 --> 01:21:13.310
The first one is, and this is what

1218
01:21:13.310 --> 01:21:14.830
I always do within your data set,

1219
01:21:14.930 --> 01:21:16.890
is how big is the data set?

1220
01:21:16.990 --> 01:21:19.070
So let's do df.shape.

1221
01:21:25.750 --> 01:21:29.910
df.shape, S-H-A-P-E, no open and closed parentheses.

1222
01:21:30.090 --> 01:21:31.630
So it's an attribute, not a method.

1223
01:21:31.810 --> 01:21:33.270
Some of these are attributes, not methods.

1224
01:21:33.270 --> 01:21:35.350
So they're kind of like little variables inside the data

1225
01:21:35.350 --> 01:21:35.570
frame.

1226
01:21:35.970 --> 01:21:37.690
They're not functions inside the data frame.

1227
01:21:39.010 --> 01:21:42.770
"Out left bracket 39 right bracket colon left

1228
01:21:42.770 --> 01:21:45.650
paren 5 3 right paren."

1229
01:21:46.510 --> 01:21:52.170
So it said left paren 5 comma 3 right paren.

1230
01:21:52.370 --> 01:21:54.510
So it gives us two numbers in parentheses.

1231
01:21:55.450 --> 01:21:56.910
And the first number is 5.

1232
01:21:57.690 --> 01:22:00.170
And you can maybe guess because you know how many,

1233
01:22:00.230 --> 01:22:02.250
you know the dimension, you know what we put in.

1234
01:22:02.690 --> 01:22:04.710
So the first number is how many rows.

1235
01:22:05.170 --> 01:22:08.490
And the second number is how many columns.

1236
01:22:08.830 --> 01:22:10.670
So it's 5 for the number of rows,

1237
01:22:11.110 --> 01:22:12.590
3 for the number of columns.

1238
01:22:14.210 --> 01:22:15.630
That's the shape of the data.

1239
01:22:16.690 --> 01:22:17.930
And you can kind of think that makes sense.

1240
01:22:18.070 --> 01:22:20.250
You know, like if you imagine it like, oh,

1241
01:22:20.310 --> 01:22:23.010
if we had a lot of columns and only a few rows,

1242
01:22:23.110 --> 01:22:24.390
then the data is really long.

1243
01:22:24.470 --> 01:22:26.910
If we have a lot of rows and only a few columns,

1244
01:22:26.950 --> 01:22:29.870
the data is long in a top to bottom dimension.

1245
01:22:29.870 --> 01:22:32.250
So it does kind of change the shape.

1246
01:22:32.450 --> 01:22:34.130
Or the data could be perfectly square

1247
01:22:34.130 --> 01:22:36.090
if we have five columns, five rows, et cetera, et cetera.

1248
01:22:37.810 --> 01:22:41.190
So that shape tells us we have five rows and three columns.

1249
01:22:41.370 --> 01:22:44.210
Now you're like, well, Patrick, I already knew that

1250
01:22:44.210 --> 01:22:45.610
because we created the data ourselves.

1251
01:22:45.930 --> 01:22:47.890
But don't worry, we're going to be in a minute

1252
01:22:48.470 --> 01:22:53.450
using a real life data set that will pull in much faster

1253
01:22:53.450 --> 01:22:55.050
than we even created this toy data.

1254
01:22:56.330 --> 01:22:57.990
And that'll be much more useful then.

1255
01:22:58.610 --> 01:23:02.190
So df.shape, that tells us the number of rows and columns.

1256
01:23:02.770 --> 01:23:04.310
Let's now do this.

1257
01:23:04.450 --> 01:23:05.130
And this is honestly,

1258
01:23:05.230 --> 01:23:08.090
it's the thing you will do the most often in Pandas.

1259
01:23:08.470 --> 01:23:09.930
So pay attention to this.

1260
01:23:10.230 --> 01:23:12.350
The thing you will do the most often in Pandas

1261
01:23:12.350 --> 01:23:16.010
is pull out a column from a data frame.

1262
01:23:16.190 --> 01:23:19.310
This is the most commonly performed operation in Pandas,

1263
01:23:19.390 --> 01:23:19.970
in my opinion.

1264
01:23:20.550 --> 01:23:24.130
So df. and then give any of the names.

1265
01:23:24.250 --> 01:23:27.110
Let's do our month, df.month.

1266
01:23:27.770 --> 01:23:34.490
"D-F, dot M-O-N-T-H,

1267
01:23:35.150 --> 01:23:39.710
out left bracket 40, right bracket colon, zero June,

1268
01:23:40.990 --> 01:23:44.150
July 1st, September 2nd."

1269
01:23:44.170 --> 01:23:45.850
Reading it in a weird way because it tries,

1270
01:23:46.070 --> 01:23:47.250
you know how screen readers are.

1271
01:23:47.310 --> 01:23:48.090
They try to be smart,

1272
01:23:48.210 --> 01:23:49.330
but sometimes they're not always smart.

1273
01:23:49.690 --> 01:23:51.510
So it's like September 2nd,

1274
01:23:51.790 --> 01:23:55.170
because it's a two, then a big space, and then September.

1275
01:23:55.170 --> 01:23:56.830
So it's like September 2nd,

1276
01:23:57.310 --> 01:24:00.210
but it's kind of guessing wrong, but that's fine.

1277
01:24:01.770 --> 01:24:04.810
So we have other ways of doing things with this,

1278
01:24:05.470 --> 01:24:10.550
but the, so basically what we did was we pulled out,

1279
01:24:10.630 --> 01:24:11.690
we did df.month.

1280
01:24:11.970 --> 01:24:15.150
And what that gives us back is that column as a series.

1281
01:24:15.490 --> 01:24:16.730
And this is why I say,

1282
01:24:16.810 --> 01:24:19.330
we're not gonna neglect our series stuff

1283
01:24:19.330 --> 01:24:22.050
because now we can start combining things together.

1284
01:24:22.430 --> 01:24:24.150
So what if we do df,

1285
01:24:24.150 --> 01:24:26.310
what if we want to know the average cookie budget

1286
01:24:26.310 --> 01:24:26.950
for each month?

1287
01:24:27.250 --> 01:24:30.390
Okay, now we're gonna combine a couple of things together.

1288
01:24:30.590 --> 01:24:31.770
Okay, and this is called chaining.

1289
01:24:32.530 --> 01:24:33.810
So let's do df.

1290
01:24:36.650 --> 01:24:38.770
...

1291
01:24:39.790 --> 01:24:40.990
Cookie underscore budget.

1292
01:24:42.590 --> 01:24:46.930
"C-O-O-K-I-E, cookie, B-U-D-G-E-T."

1293
01:24:46.950 --> 01:24:47.590
And another dot.

1294
01:24:49.890 --> 01:24:50.970
Budget, dot.

1295
01:24:51.030 --> 01:24:52.330
So it's df.cookiebudget,

1296
01:24:52.450 --> 01:24:55.870
cookie underscore budget, dot mean for the average.

1297
01:24:56.500 --> 01:25:00.290
M-E-A-N mean, right parenthesis.

1298
01:25:00.330 --> 01:25:02.310
Open the parenthesis and then we'll close the parenthesis.

1299
01:25:02.430 --> 01:25:03.550
Do we have a question or anything there?

1300
01:25:04.530 --> 01:25:05.570
I heard someone on the mic.

1301
01:25:06.110 --> 01:25:09.050
I think maybe someone accidentally unmuted themselves

1302
01:25:09.050 --> 01:25:10.730
and we might've been hearing a screen reader.

1303
01:25:11.190 --> 01:25:13.430
So maybe proceed with caution.

1304
01:25:15.730 --> 01:25:19.930
Out left bracket 41, right bracket colon 2.8.

1305
01:25:20.290 --> 01:25:22.470
So what we did there, and now we're kind of getting,

1306
01:25:22.630 --> 01:25:25.010
things are getting a little interesting here, right?

1307
01:25:25.050 --> 01:25:26.590
So we're combining some stuff together.

1308
01:25:26.590 --> 01:25:30.750
We're doing df.cookie underscore budget, dot mean.

1309
01:25:30.910 --> 01:25:33.510
So in one action, we pulled out the column

1310
01:25:33.510 --> 01:25:37.290
and got the mean of the data in that column, okay?

1311
01:25:38.050 --> 01:25:41.850
When you start combining the methods one into the other,

1312
01:25:42.930 --> 01:25:45.890
we have a word for that and it's called chaining, okay?

1313
01:25:46.010 --> 01:25:47.270
And Pandas has a lot of functionality

1314
01:25:47.270 --> 01:25:49.030
that allows us to facilitate chaining.

1315
01:25:49.190 --> 01:25:51.650
That's a little bit more for intermediate users,

1316
01:25:51.690 --> 01:25:52.950
but it's very cool stuff.

1317
01:25:53.290 --> 01:25:54.490
And sometimes you'll just be like,

1318
01:25:54.490 --> 01:25:57.370
df.this, dot this, dot this, dot this.

1319
01:25:57.390 --> 01:25:58.810
And you combine a whole bunch of things together

1320
01:25:58.810 --> 01:26:00.090
and in one line,

1321
01:26:00.210 --> 01:26:02.690
you get kind of almost like a whole little data analysis.

1322
01:26:03.050 --> 01:26:04.790
So, and we'll be getting by the end,

1323
01:26:04.890 --> 01:26:06.230
maybe the last thing we do in this workshop

1324
01:26:06.230 --> 01:26:08.130
will be kind of a little bit of a longer chain like that.

1325
01:26:08.550 --> 01:26:09.910
So, okay.

1326
01:26:10.030 --> 01:26:12.490
So that pulls out the column.

1327
01:26:12.690 --> 01:26:13.890
Okay, so we've pulled out the column

1328
01:26:13.890 --> 01:26:18.090
and then you can also in the same action, do things to it.

1329
01:26:18.150 --> 01:26:19.450
So like use our methods, okay?

1330
01:26:19.750 --> 01:26:23.490
So df.cookie budget, which is a series.

1331
01:26:23.490 --> 01:26:24.810
And then we can use a method

1332
01:26:24.810 --> 01:26:26.050
that we normally use on a series,

1333
01:26:26.710 --> 01:26:30.290
the mean method in the same action, okay?

1334
01:26:30.350 --> 01:26:31.230
And then we get,

1335
01:26:31.350 --> 01:26:33.530
it smoothly get the mean of that column,

1336
01:26:33.630 --> 01:26:34.770
which is very nice, honestly.

1337
01:26:34.930 --> 01:26:37.150
Like, and how much typing around

1338
01:26:37.150 --> 01:26:38.710
would that take you to do in Excel?

1339
01:26:39.430 --> 01:26:41.090
You'd have to like set up a whole thing,

1340
01:26:41.190 --> 01:26:42.170
you know, and type into it.

1341
01:26:42.170 --> 01:26:43.990
It's just, you know, it's very quick.

1342
01:26:44.130 --> 01:26:45.610
When you start getting fast with this,

1343
01:26:45.650 --> 01:26:48.610
you start getting data really fast

1344
01:26:48.610 --> 01:26:49.970
and you're kind of at your fingertips, okay?

1345
01:26:50.370 --> 01:26:54.950
So what else do I need to show you here for data frames?

1346
01:26:55.550 --> 01:26:56.870
We pulled out the column.

1347
01:26:58.250 --> 01:27:02.410
I'm gonna show you really quick how to pull out a row, okay?

1348
01:27:03.790 --> 01:27:10.210
And then we're going to kind of move on to the next thing.

1349
01:27:10.310 --> 01:27:12.010
Okay, so let's do df.

1350
01:27:13.450 --> 01:27:17.530
There's two ways to pull out a row.

1351
01:27:17.670 --> 01:27:19.490
I think we're getting a little tight.

1352
01:27:19.490 --> 01:27:20.990
So I'm gonna only show you one of them,

1353
01:27:21.070 --> 01:27:22.610
but I'll kind of point to the other one, okay?

1354
01:27:23.130 --> 01:27:24.610
Two colon 32 PM.

1355
01:27:24.750 --> 01:27:25.290
We're not doing too bad.

1356
01:27:25.490 --> 01:27:25.890
We're actually,

1357
01:27:29.770 --> 01:27:32.230
so, okay, I'll show you the full version here.

1358
01:27:32.250 --> 01:27:33.350
I'm sorry, I just want to make sure

1359
01:27:33.350 --> 01:27:34.130
that we get to everything.

1360
01:27:34.390 --> 01:27:37.070
So what I want to show you is,

1361
01:27:38.230 --> 01:27:39.990
right now we have it on this data frame,

1362
01:27:40.050 --> 01:27:41.830
we have an index, but it's kind of useless.

1363
01:27:41.990 --> 01:27:44.910
It just counts zero, one, two, three, four, you know?

1364
01:27:45.270 --> 01:27:47.230
So, and we can actually pull out the index

1365
01:27:47.230 --> 01:27:49.430
and listen to what the index is by itself

1366
01:27:49.430 --> 01:27:50.830
by doing df.index.

1367
01:27:55.010 --> 01:27:56.370
df.index,

1368
01:27:56.370 --> 01:27:57.190
no parenthesis,

1369
01:27:57.830 --> 01:28:00.570
"out left bracket 42 right bracket colon,

1370
01:28:01.150 --> 01:28:02.550
range index left paren,

1371
01:28:03.190 --> 01:28:06.250
start equals zero, stop equals five,

1372
01:28:07.510 --> 01:28:08.770
step equals one right."

1373
01:28:08.770 --> 01:28:09.790
So basically this says,

1374
01:28:09.990 --> 01:28:12.390
it's a way of representing counting up.

1375
01:28:12.530 --> 01:28:15.110
It says range index, start at zero,

1376
01:28:15.110 --> 01:28:17.870
stop at four, count up by one.

1377
01:28:18.190 --> 01:28:21.490
Okay, it's a function that allows us to create,

1378
01:28:21.630 --> 01:28:23.150
and we can actually run this function.

1379
01:28:23.290 --> 01:28:25.010
It exists in pandas, range index,

1380
01:28:25.530 --> 01:28:30.010
which allows us to create like an index,

1381
01:28:30.070 --> 01:28:31.090
which counts up for us,

1382
01:28:31.130 --> 01:28:31.830
which is actually pretty useful.

1383
01:28:31.910 --> 01:28:33.830
We're going to use this in one of Sarah's workshops

1384
01:28:35.230 --> 01:28:38.510
to create some data that we'll then use for soundification.

1385
01:28:39.030 --> 01:28:40.150
But basically it means,

1386
01:28:40.570 --> 01:28:43.310
okay, right now the index counts up from zero up to four.

1387
01:28:43.450 --> 01:28:43.610
Okay?

1388
01:28:44.390 --> 01:28:45.690
That's not that useful.

1389
01:28:46.670 --> 01:28:48.810
What you want with an index is something that is,

1390
01:28:49.130 --> 01:28:51.510
it's ideally it's unique, okay?

1391
01:28:51.810 --> 01:28:52.530
And descriptive.

1392
01:28:53.130 --> 01:28:54.630
And this is unique, you know,

1393
01:28:54.690 --> 01:28:56.290
if each row has its own number,

1394
01:28:56.610 --> 01:28:57.590
but it's not descriptive.

1395
01:28:58.490 --> 01:29:00.770
And when you look for descriptiveness,

1396
01:29:00.970 --> 01:29:01.790
what you want to think about,

1397
01:29:01.850 --> 01:29:03.410
like what is this row?

1398
01:29:04.350 --> 01:29:05.510
So remember columns,

1399
01:29:06.370 --> 01:29:09.730
they represent attributes of our data.

1400
01:29:09.930 --> 01:29:11.930
So different facets of the data.

1401
01:29:11.930 --> 01:29:14.750
So for example, the month, the cookie budget, the budget,

1402
01:29:15.050 --> 01:29:16.470
those are facets of the data.

1403
01:29:17.010 --> 01:29:21.510
The rows, they represent the, an entity.

1404
01:29:21.850 --> 01:29:25.490
So a specific item or a thing or object

1405
01:29:25.490 --> 01:29:27.490
or concept or something, okay?

1406
01:29:27.790 --> 01:29:28.410
An entity.

1407
01:29:29.350 --> 01:29:31.130
And in our case, you know, each,

1408
01:29:31.270 --> 01:29:32.510
so each the columns they're actually,

1409
01:29:32.570 --> 01:29:35.090
they're facets and they're facets of a month.

1410
01:29:35.570 --> 01:29:38.710
Each row represents a different month, okay?

1411
01:29:38.730 --> 01:29:39.730
In our budget.

1412
01:29:39.730 --> 01:29:42.450
And a month of budget.

1413
01:29:43.170 --> 01:29:45.530
And so what would actually be most descriptive here

1414
01:29:45.530 --> 01:29:46.550
would be the month.

1415
01:29:47.030 --> 01:29:48.630
Because, you know, we'll always want to know,

1416
01:29:48.750 --> 01:29:50.490
okay, well, yeah, that's June's cookie budget.

1417
01:29:50.590 --> 01:29:51.730
That's June's regular budget.

1418
01:29:52.350 --> 01:29:54.230
So let's do DF.

1419
01:29:55.670 --> 01:29:58.770
Let's, what we want to do is overwrite the index

1420
01:30:00.250 --> 01:30:05.110
with the, a more useful series, okay?

1421
01:30:05.370 --> 01:30:08.050
And so we can actually do that by picking out a column

1422
01:30:08.050 --> 01:30:09.670
and over, using it to overwrite it.

1423
01:30:09.770 --> 01:30:10.610
So this is pretty cool.

1424
01:30:10.790 --> 01:30:11.910
DF.index.

1425
01:30:13.510 --> 01:30:16.310
"DF, dot,

1426
01:30:16.350 --> 01:30:18.670
I-N-D-E-X.

1427
01:30:19.090 --> 01:30:19.570
Index.

1428
01:30:19.750 --> 01:30:20.070
Space.

1429
01:30:20.290 --> 01:30:20.850
Equals.

1430
01:30:21.090 --> 01:30:21.610
Equals.

1431
01:30:21.690 --> 01:30:22.090
Space."

1432
01:30:22.250 --> 01:30:22.750
Space.

1433
01:30:23.090 --> 01:30:25.730
And now let's do DF.month.

1434
01:30:26.210 --> 01:30:30.150
"DF, M-O-N-T-H."

1435
01:30:30.270 --> 01:30:32.850
So it's DF.index equals DF.month.

1436
01:30:33.130 --> 01:30:35.650
And what that does is it's just like variable assignment.

1437
01:30:35.650 --> 01:30:38.010
What you're doing is you're overwriting the index

1438
01:30:39.010 --> 01:30:40.810
with another column, okay?

1439
01:30:42.530 --> 01:30:44.350
And that column that has more descriptive data.

1440
01:30:44.390 --> 01:30:46.610
It will actually keep the month column.

1441
01:30:46.710 --> 01:30:48.050
There's no reason to get rid of the month column.

1442
01:30:48.350 --> 01:30:49.150
But from now on,

1443
01:30:49.190 --> 01:30:50.870
the index will be replaced with the month.

1444
01:30:51.570 --> 01:30:53.810
If your dataset had like, you know,

1445
01:30:54.450 --> 01:30:56.270
if your dataset was longer than a year,

1446
01:30:56.350 --> 01:30:58.130
you would need to have the year and the month

1447
01:30:58.130 --> 01:30:59.270
to be the unique index.

1448
01:30:59.390 --> 01:31:00.710
But that would still be a great index.

1449
01:31:00.810 --> 01:31:02.970
The year and the month would be a very common index

1450
01:31:02.970 --> 01:31:04.970
for like a dataset that involved time.

1451
01:31:05.490 --> 01:31:08.190
"In left bracket 44, right bracket colon."

1452
01:31:08.310 --> 01:31:09.550
And remember, we're assigning something

1453
01:31:09.550 --> 01:31:10.710
so we don't actually get any output.

1454
01:31:10.830 --> 01:31:11.850
Remember when we assign variables

1455
01:31:11.850 --> 01:31:13.770
or we overwrite stuff within data,

1456
01:31:13.910 --> 01:31:15.190
this is the first time we've done that.

1457
01:31:15.250 --> 01:31:15.930
We don't get an output.

1458
01:31:16.430 --> 01:31:18.710
So let's do, now if we do DF.index,

1459
01:31:18.890 --> 01:31:19.830
you should get the month.

1460
01:31:20.190 --> 01:31:24.510
"D-F dot I-N-D-E-X.

1461
01:31:24.610 --> 01:31:27.310
Out left bracket 44, right bracket colon.

1462
01:31:27.910 --> 01:31:31.790
Index left paren, left bracket June, July, Sep."

1463
01:31:31.990 --> 01:31:33.770
The month is overwrote it correctly.

1464
01:31:34.420 --> 01:31:35.010
So, okay.

1465
01:31:35.110 --> 01:31:37.810
And now if we look at the data frame, DF,

1466
01:31:38.370 --> 01:31:39.250
the representation.

1467
01:31:39.670 --> 01:31:42.490
"Out left bracket 45, right bracket colon.

1468
01:31:43.750 --> 01:31:45.210
Budget, month.

1469
01:31:46.310 --> 01:31:47.130
Those are the columns.

1470
01:31:47.430 --> 01:31:50.150
Month, June 10th.

1471
01:31:50.650 --> 01:31:53.450
June, July 10th."

1472
01:31:54.290 --> 01:31:54.750
So, okay.

1473
01:31:54.810 --> 01:31:56.190
It's a little difficult to parse that,

1474
01:31:56.250 --> 01:31:59.170
but what it's saying is that the column on the left,

1475
01:31:59.530 --> 01:32:01.850
which is the index and the representation has changed.

1476
01:32:02.010 --> 01:32:02.230
Okay.

1477
01:32:03.010 --> 01:32:04.870
Now this is actually even more clear.

1478
01:32:05.050 --> 01:32:06.030
So now if you want to,

1479
01:32:06.110 --> 01:32:08.590
say we pulled out the cookie budget, DF.cookiebudget.

1480
01:32:09.050 --> 01:32:12.750
...

1481
01:32:12.890 --> 01:32:14.210
So DF.cookiebudget.

1482
01:32:14.470 --> 01:32:15.870
And this is where it'll strike you

1483
01:32:15.870 --> 01:32:17.350
as a little more useful maybe.

1484
01:32:17.830 --> 01:32:20.690
"Out left bracket 46, right bracket colon.

1485
01:32:22.950 --> 01:32:26.450
Month, June 3rd, July 2nd."

1486
01:32:26.490 --> 01:32:28.430
So it's saying the June 3rd is pretty annoying.

1487
01:32:28.590 --> 01:32:31.150
June 3, that's our cookie budget for June.

1488
01:32:31.150 --> 01:32:35.890
July 2nd too, that's our cookie budget for July.

1489
01:32:37.570 --> 01:32:38.810
"September zero."

1490
01:32:38.930 --> 01:32:39.910
It said September zero.

1491
01:32:42.250 --> 01:32:45.230
"October 4th, November 5th."

1492
01:32:45.230 --> 01:32:45.350
Okay.

1493
01:32:45.890 --> 01:32:50.190
So it's, you know, September zero,

1494
01:32:50.750 --> 01:32:54.910
October four and November five.

1495
01:32:55.130 --> 01:32:55.470
Okay.

1496
01:32:55.830 --> 01:32:57.390
So now we have our data.

1497
01:32:57.510 --> 01:32:59.590
When we pull out a column, it continues to be labeled,

1498
01:32:59.590 --> 01:33:01.250
which is actually really useful

1499
01:33:01.250 --> 01:33:03.470
if you're like reading this data or something like that.

1500
01:33:03.550 --> 01:33:05.190
You want it to continue to be labeled.

1501
01:33:05.690 --> 01:33:07.810
So having a useful index like that is very good.

1502
01:33:08.030 --> 01:33:08.050
Okay.

1503
01:33:09.850 --> 01:33:14.090
Now, the last thing I'd like to do here is pull out the,

1504
01:33:15.670 --> 01:33:17.530
well, one more thing I want to show you,

1505
01:33:17.590 --> 01:33:19.710
and then we're going to pull out a row very quickly

1506
01:33:19.710 --> 01:33:20.610
using this index.

1507
01:33:20.890 --> 01:33:23.390
And then I do want to move on to our big data set

1508
01:33:23.390 --> 01:33:24.090
because that's cool stuff.

1509
01:33:24.150 --> 01:33:24.870
But we're going to be working

1510
01:33:24.870 --> 01:33:26.170
with our big data set next week too.

1511
01:33:26.870 --> 01:33:27.630
All right.

1512
01:33:27.630 --> 01:33:29.950
So what if we want to calculate,

1513
01:33:31.990 --> 01:33:36.210
or we want to get an idea of how much we're going to spend

1514
01:33:36.210 --> 01:33:37.910
on cookies each month.

1515
01:33:38.270 --> 01:33:38.350
Okay.

1516
01:33:38.990 --> 01:33:40.210
And this is very cool.

1517
01:33:40.330 --> 01:33:42.350
Pandas makes this very straightforward

1518
01:33:42.350 --> 01:33:43.590
and in a very cool way.

1519
01:33:46.830 --> 01:33:49.150
So we have two columns.

1520
01:33:49.230 --> 01:33:50.550
We have our budget column

1521
01:33:50.550 --> 01:33:52.070
and we have our cookie budget column.

1522
01:33:52.370 --> 01:33:54.330
And what we're going to do now is a small thing

1523
01:33:54.330 --> 01:33:57.390
and it will tell us the percentage of each month

1524
01:33:57.390 --> 01:34:01.470
that is taken up by cookies in that month.

1525
01:34:01.610 --> 01:34:01.690
Okay.

1526
01:34:02.150 --> 01:34:08.130
So we're going to do df.cookie underscore budget.

1527
01:34:12.130 --> 01:34:16.730
So df.cookie underscore budget space divided by,

1528
01:34:18.860 --> 01:34:22.440
so I'll use slash for divided by df.budget.

1529
01:34:27.430 --> 01:34:36.170
out left bracket 47 right bracket colon month, June 0.300.

1530
01:34:36.790 --> 01:34:39.170
0.30.

1531
01:34:39.930 --> 01:34:41.590
So that's 30%.

1532
01:34:41.590 --> 01:34:41.930
Okay.

1533
01:34:42.050 --> 01:34:43.550
So it's a floating point number

1534
01:34:43.550 --> 01:34:46.690
that tells us out of one,

1535
01:34:47.330 --> 01:34:51.130
if it says 0.3, that means it's out of one.

1536
01:34:51.270 --> 01:34:57.010
So 30% of our budget is taken up by cookies in June.

1537
01:34:57.010 --> 01:34:57.570
Let's try it.

1538
01:34:57.650 --> 01:34:58.630
Let's listen to July.

1539
01:35:00.370 --> 01:35:08.530
July, 0.20

1540
01:35:09.130 --> 01:35:11.370
So 0.2, remember that's the same.

1541
01:35:11.450 --> 01:35:12.710
If you convert that to a percentage,

1542
01:35:12.930 --> 01:35:18.790
that's 20% of our budget is going to be taken up

1543
01:35:18.790 --> 01:35:20.070
by cookies in July.

1544
01:35:20.250 --> 01:35:21.030
Let's do September.

1545
01:35:22.430 --> 01:35:26.990
September, 0

1546
01:35:26.990 --> 01:35:29.090
so we didn't spend any money on cookies in September.

1547
01:35:29.230 --> 01:35:30.970
That's zero spent that month on cookies.

1548
01:35:31.170 --> 01:35:31.230
Okay.

1549
01:35:31.390 --> 01:35:32.370
So that's pretty cool.

1550
01:35:33.030 --> 01:35:34.770
And that, so, and it's becomes,

1551
01:35:34.910 --> 01:35:37.370
it was made more useful by the fact that we labeled,

1552
01:35:37.830 --> 01:35:40.450
you know, we changed the index to be the month.

1553
01:35:40.530 --> 01:35:42.430
So now we can kind of keep track of the months

1554
01:35:42.430 --> 01:35:43.950
even as we do these operations.

1555
01:35:43.990 --> 01:35:44.390
Okay.

1556
01:35:44.850 --> 01:35:46.810
And we've answered that question for ourselves.

1557
01:35:46.910 --> 01:35:53.290
We were like, yes, what, what, you know, month is,

1558
01:35:54.250 --> 01:35:57.930
like what month is a, you know, September?

1559
01:35:58.190 --> 01:35:59.350
How much did we spend on cookies

1560
01:35:59.350 --> 01:36:00.490
or what percentage of our budget

1561
01:36:00.490 --> 01:36:01.550
did we spend on cookies in July?

1562
01:36:02.010 --> 01:36:05.570
So we answered that question for ourselves by doing this.

1563
01:36:05.630 --> 01:36:06.750
And what we did was, you know,

1564
01:36:06.790 --> 01:36:08.550
we divided one column by another.

1565
01:36:08.970 --> 01:36:10.390
And so what it does is it goes through

1566
01:36:10.390 --> 01:36:14.250
and it goes row by row and it divides each by each.

1567
01:36:14.330 --> 01:36:16.610
So it says cookie budget divided by budget,

1568
01:36:16.790 --> 01:36:18.090
cookie budget divided by budget,

1569
01:36:18.230 --> 01:36:19.550
cookie budget divided by budget.

1570
01:36:19.890 --> 01:36:21.850
And then it gives us a new series

1571
01:36:22.210 --> 01:36:23.950
that is actually the,

1572
01:36:25.310 --> 01:36:28.010
that is the division of the two columns.

1573
01:36:28.350 --> 01:36:28.510
Okay.

1574
01:36:28.830 --> 01:36:30.650
And imagine that would also take a ton of work

1575
01:36:30.650 --> 01:36:31.530
to do in Excel, right?

1576
01:36:31.570 --> 01:36:32.750
I mean, if you were going to make a new column

1577
01:36:32.750 --> 01:36:34.070
and also very error prone,

1578
01:36:34.410 --> 01:36:35.610
I've never done something like that

1579
01:36:35.610 --> 01:36:37.850
without creating a ton of errors and stuff like that.

1580
01:36:38.050 --> 01:36:41.130
So, and we're not going to do it in the interest of time,

1581
01:36:41.150 --> 01:36:44.350
but you can, now I could take this series

1582
01:36:44.350 --> 01:36:47.810
and add it back into our data frame as a new column,

1583
01:36:47.890 --> 01:36:48.970
which would be like percentage,

1584
01:36:48.970 --> 01:36:52.030
we could call it budget percentage on cookies or something.

1585
01:36:52.710 --> 01:36:54.250
And we can add it back in.

1586
01:36:54.450 --> 01:36:57.310
I won't do it now in the interest of time.

1587
01:36:58.510 --> 01:36:58.810
Okay.

1588
01:36:58.970 --> 01:37:00.970
And one last thing I promised I'd show you is

1589
01:37:00.970 --> 01:37:02.970
what if we want to plot only the data

1590
01:37:02.970 --> 01:37:04.110
for September, for example.

1591
01:37:04.850 --> 01:37:06.810
So we could do df.

1592
01:37:08.350 --> 01:37:08.830
...

1593
01:37:09.470 --> 01:37:09.950
Dot.

1594
01:37:10.490 --> 01:37:10.970
...

1595
01:37:11.090 --> 01:37:12.090
L-O-C.

1596
01:37:12.230 --> 01:37:12.470
"Dot.

1597
01:37:12.850 --> 01:37:14.290
L-O-C.

1598
01:37:14.550 --> 01:37:15.490
For location.

1599
01:37:15.490 --> 01:37:19.310
And then open square bracket.

1600
01:37:19.570 --> 01:37:20.330
L-O-C."

1601
01:37:20.670 --> 01:37:21.550
Quote September.

1602
01:37:22.130 --> 01:37:22.470
"Quote.

1603
01:37:22.510 --> 01:37:25.370
...

1604
01:37:25.610 --> 01:37:25.950
Quote.

1605
01:37:25.990 --> 01:37:26.470
September.

1606
01:37:27.570 --> 01:37:28.210
"Quote.

1607
01:37:28.450 --> 01:37:28.970
Right bracket."

1608
01:37:29.270 --> 01:37:29.650
Close square bracket.

1609
01:37:29.790 --> 01:37:30.710
So it's df.

1610
01:37:31.090 --> 01:37:31.830
L-O-C.

1611
01:37:32.030 --> 01:37:32.890
Open square bracket.

1612
01:37:33.110 --> 01:37:33.310
Quote.

1613
01:37:33.410 --> 01:37:33.790
September.

1614
01:37:34.030 --> 01:37:34.270
Quote.

1615
01:37:34.410 --> 01:37:35.010
Close square bracket.

1616
01:37:36.490 --> 01:37:37.790
"Out left bracket.

1617
01:37:37.930 --> 01:37:38.410
48.

1618
01:37:38.570 --> 01:37:39.190
Right bracket.

1619
01:37:39.330 --> 01:37:39.610
Colon.

1620
01:37:40.810 --> 01:37:41.730
Budget five.

1621
01:37:43.010 --> 01:37:44.410
Cookie line budget zero.

1622
01:37:45.550 --> 01:37:46.410
Month September."

1623
01:37:46.710 --> 01:37:47.490
So the month is September.

1624
01:37:47.970 --> 01:37:50.010
Remember our cookie budget for September is zero.

1625
01:37:50.130 --> 01:37:51.130
It's a very sad month.

1626
01:37:51.990 --> 01:37:54.230
And then the budget is five.

1627
01:37:56.190 --> 01:37:57.470
Very, pretty cool, right?

1628
01:37:58.090 --> 01:38:01.850
So the, and that is another series.

1629
01:38:02.050 --> 01:38:04.030
And when you do, when you pull out a row,

1630
01:38:04.090 --> 01:38:07.590
it gives you a series where the index is a,

1631
01:38:08.730 --> 01:38:11.490
is the column name and the value

1632
01:38:11.490 --> 01:38:13.310
is the actual value of that data.

1633
01:38:13.310 --> 01:38:13.670
Okay.

1634
01:38:13.710 --> 01:38:16.430
So if you imagine in your mind,

1635
01:38:16.470 --> 01:38:21.330
in your mind, just lifting out the row.

1636
01:38:21.750 --> 01:38:22.070
Okay.

1637
01:38:22.170 --> 01:38:23.190
We have our row.

1638
01:38:23.450 --> 01:38:26.670
Imagine it kind of flying out of the data frame.

1639
01:38:26.870 --> 01:38:30.010
And then we only have that data now.

1640
01:38:30.150 --> 01:38:32.850
So it then takes it and it says, okay,

1641
01:38:32.910 --> 01:38:33.890
what were the column names?

1642
01:38:33.990 --> 01:38:36.830
It turns it around and says, what were the column names?

1643
01:38:37.890 --> 01:38:38.430
Okay.

1644
01:38:38.670 --> 01:38:40.690
And now the column names become the index.

1645
01:38:41.290 --> 01:38:41.570
Okay.

1646
01:38:42.430 --> 01:38:45.890
So, and so they tell you what that, you know,

1647
01:38:45.930 --> 01:38:47.550
it gives you a nice little label for that

1648
01:38:47.550 --> 01:38:48.810
particular item of data.

1649
01:38:49.050 --> 01:38:50.950
So in this case, it was, our budget was $5.

1650
01:38:51.610 --> 01:38:53.170
We didn't have that much money in September.

1651
01:38:53.430 --> 01:38:55.610
So we weren't able to spend any money on cookies.

1652
01:38:55.830 --> 01:38:55.950
Okay.

1653
01:38:56.870 --> 01:38:58.290
Now we really will move on.

1654
01:38:58.330 --> 01:39:02.210
There's also a df.iloc, which we won't try out,

1655
01:39:02.310 --> 01:39:05.230
but that will tell you if you know the number of,

1656
01:39:06.390 --> 01:39:10.290
you know, where in the data set it is,

1657
01:39:10.290 --> 01:39:11.750
regardless of what the index is.

1658
01:39:12.030 --> 01:39:14.590
So you can pull out the first item by doing df.iloc zero,

1659
01:39:14.930 --> 01:39:16.110
and that would pull out the first item,

1660
01:39:16.130 --> 01:39:17.270
no matter what the index is.

1661
01:39:17.750 --> 01:39:20.330
So that's df.iloc for index location.

1662
01:39:21.390 --> 01:39:22.330
That's what they named it.

1663
01:39:22.450 --> 01:39:22.510
Okay.

1664
01:39:22.790 --> 01:39:24.850
So that's another useful one that we won't do.

1665
01:39:24.970 --> 01:39:26.870
Cause I do want to pull in this data set really quick.

1666
01:39:29.780 --> 01:39:31.200
...

1667
01:39:31.320 --> 01:39:32.260
I think we're actually going to be good.

1668
01:39:32.780 --> 01:39:32.940
Okay.

1669
01:39:32.980 --> 01:39:34.780
So now we're going to do another cool thing.

1670
01:39:35.360 --> 01:39:36.420
I hope that this,

1671
01:39:36.640 --> 01:39:39.140
I feel like this little bit should be a little bit exciting

1672
01:39:39.140 --> 01:39:39.640
for you guys.

1673
01:39:39.640 --> 01:39:42.240
So what we're going to do is,

1674
01:39:42.500 --> 01:39:43.120
we're going to,

1675
01:39:43.240 --> 01:39:44.720
we're done with this data frame,

1676
01:39:44.820 --> 01:39:46.640
but we're going to produce a new data frame with,

1677
01:39:46.860 --> 01:39:47.900
it's a real data set.

1678
01:39:48.000 --> 01:39:50.280
So what's that we've done so far is toy data, right?

1679
01:39:50.340 --> 01:39:51.120
It's data we made up.

1680
01:39:51.520 --> 01:39:53.420
Now we're going to work with data that actually reflects

1681
01:39:53.420 --> 01:39:54.360
something in the real world.

1682
01:39:54.940 --> 01:39:58.140
So what I want you to do is type d,

1683
01:39:58.300 --> 01:39:59.100
I'm going to clear the screen

1684
01:39:59.100 --> 01:40:00.000
because we're starting something new,

1685
01:40:00.600 --> 01:40:02.440
and we're going to overwrite our df variables.

1686
01:40:02.560 --> 01:40:04.260
So you can kind of say goodbye to the df variable

1687
01:40:04.260 --> 01:40:06.100
that we made that you worked so hard on.

1688
01:40:06.160 --> 01:40:07.020
So I'm sorry for that.

1689
01:40:07.020 --> 01:40:09.180
We'll do df equals,

1690
01:40:10.580 --> 01:40:13.580
"df equals space"

1691
01:40:13.600 --> 01:40:14.760
equals space,

1692
01:40:14.760 --> 01:40:15.040
pandas,

1693
01:40:16.080 --> 01:40:18.620
"p-a-n-d-a-s,

1694
01:40:19.980 --> 01:40:20.360
pandas,"

1695
01:40:20.600 --> 01:40:22.700
read underscore csv,

1696
01:40:24.300 --> 01:40:25.780
"r-e-a-d,

1697
01:40:26.160 --> 01:40:26.540
read,

1698
01:40:27.060 --> 01:40:28.160
c-s-v,"

1699
01:40:28.160 --> 01:40:28.880
and then open,

1700
01:40:29.300 --> 01:40:30.620
open parenthesis,

1701
01:40:31.800 --> 01:40:32.800
"csv,"

1702
01:40:33.580 --> 01:40:34.080
okay,

1703
01:40:34.280 --> 01:40:35.140
"left paren" quote,

1704
01:40:36.100 --> 01:40:38.840
and then we do,

1705
01:40:39.120 --> 01:40:40.440
I'm going to give you a URL.

1706
01:40:40.880 --> 01:40:42.480
So it's going to be http,

1707
01:40:43.560 --> 01:40:45.580
...

1708
01:40:45.680 --> 01:40:46.000
colon,

1709
01:40:47.420 --> 01:40:48.980
"h-t-t-p,"

1710
01:40:49.860 --> 01:40:50.760
slash, slash,

1711
01:40:51.880 --> 01:40:53.720
bit.ly,

1712
01:40:54.220 --> 01:40:54.700
for a short,

1713
01:40:54.780 --> 01:40:55.380
this is a short,

1714
01:40:55.480 --> 01:40:56.980
a URL shortening service,

1715
01:40:58.620 --> 01:40:59.980
...

1716
01:41:00.240 --> 01:41:00.620
"bit,

1717
01:41:01.460 --> 01:41:03.100
dot, l-y,"

1718
01:41:03.240 --> 01:41:03.700
forward slash,

1719
01:41:03.700 --> 01:41:05.780
...

1720
01:41:05.780 --> 01:41:08.420
n-y-c-b-n-b,

1721
01:41:08.540 --> 01:41:09.840
for n-y-c-b-n-b,

1722
01:41:11.300 --> 01:41:14.020
"n-y-c-b-n-b,"

1723
01:41:14.040 --> 01:41:14.900
and I'll go over this again,

1724
01:41:15.620 --> 01:41:17.220
n-y-c-b-n-b,

1725
01:41:18.260 --> 01:41:19.380
and then close the parenthesis,

1726
01:41:20.340 --> 01:41:20.860
"right paren,"

1727
01:41:21.420 --> 01:41:22.820
I'm going to make sure it worked for me,

1728
01:41:22.920 --> 01:41:24.180
and then I'm going to explain it again.

1729
01:41:25.000 --> 01:41:25.660
...

1730
01:41:25.760 --> 01:41:27.600
...

1731
01:41:28.180 --> 01:41:28.660
...

1732
01:41:28.720 --> 01:41:29.080
...

1733
01:41:29.200 --> 01:41:29.800
...

1734
01:41:29.900 --> 01:41:30.300
...

1735
01:41:30.680 --> 01:41:31.060
pandas,

1736
01:41:31.380 --> 01:41:31.960
dot read,

1737
01:41:31.960 --> 01:41:32.060
...

1738
01:41:33.020 --> 01:41:33.560
...

1739
01:41:33.980 --> 01:41:34.160
...

1740
01:41:34.320 --> 01:41:34.840
...

1741
01:41:35.500 --> 01:41:36.040
...

1742
01:41:36.340 --> 01:41:36.800
...

1743
01:41:37.420 --> 01:41:37.760
...

1744
01:41:38.360 --> 01:41:38.900
...

1745
01:41:39.280 --> 01:41:39.760
...

1746
01:41:42.280 --> 01:41:42.820
...

1747
01:41:43.040 --> 01:41:43.360
...

1748
01:41:43.460 --> 01:41:43.840
...

1749
01:41:44.300 --> 01:41:44.400
...

1750
01:41:45.040 --> 01:41:45.440
...

1751
01:41:45.620 --> 01:41:45.820
...

1752
01:41:48.550 --> 01:41:50.090
...

1753
01:41:50.230 --> 01:41:51.650
that was the longest three seconds of my life.

1754
01:41:53.010 --> 01:41:53.790
Okay, so,

1755
01:41:55.310 --> 01:41:56.570
what did we do there?

1756
01:41:56.750 --> 01:41:57.390
So we do,

1757
01:41:57.670 --> 01:41:59.150
we typed df,

1758
01:41:59.650 --> 01:42:01.050
for our new data frame variable,

1759
01:42:01.250 --> 01:42:01.850
equals,

1760
01:42:02.950 --> 01:42:03.490
pandas,

1761
01:42:04.110 --> 01:42:05.230
dot read,

1762
01:42:05.330 --> 01:42:05.810
underscore,

1763
01:42:06.030 --> 01:42:06.670
csv,

1764
01:42:06.730 --> 01:42:07.730
r-e-a-d,

1765
01:42:08.050 --> 01:42:08.470
underscore,

1766
01:42:08.750 --> 01:42:09.490
csv,

1767
01:42:10.670 --> 01:42:11.210
open,

1768
01:42:11.990 --> 01:42:12.530
parenthesis,

1769
01:42:13.110 --> 01:42:13.450
quote,

1770
01:42:13.690 --> 01:42:14.850
and then we have a URL.

1771
01:42:15.330 --> 01:42:15.910
So it's going to be,

1772
01:42:16.210 --> 01:42:17.070
h-t-t-p,

1773
01:42:17.330 --> 01:42:17.770
colon,

1774
01:42:17.970 --> 01:42:18.210
slash,

1775
01:42:18.270 --> 01:42:18.610
slash,

1776
01:42:19.830 --> 01:42:20.130
bit,

1777
01:42:20.170 --> 01:42:21.010
dot l-y,

1778
01:42:21.270 --> 01:42:22.010
b-i-t,

1779
01:42:22.190 --> 01:42:23.090
dot l-y,

1780
01:42:23.450 --> 01:42:24.310
forward slash,

1781
01:42:24.730 --> 01:42:25.530
n-y-c,

1782
01:42:25.690 --> 01:42:26.230
New York City,

1783
01:42:27.090 --> 01:42:27.750
b-n-b.

1784
01:42:28.030 --> 01:42:30.150
So it's n-y-c-b-n-b,

1785
01:42:30.490 --> 01:42:30.770
okay?

1786
01:42:31.130 --> 01:42:31.930
And helpers can,

1787
01:42:31.930 --> 01:42:34.190
one of the helpers copy the line

1788
01:42:34.190 --> 01:42:36.790
and paste it into the chat,

1789
01:42:37.130 --> 01:42:38.550
and no shame in copying this one,

1790
01:42:38.590 --> 01:42:39.630
because it's the URL, okay?

1791
01:42:40.050 --> 01:42:41.650
I tried to make it simple so people could type it

1792
01:42:41.650 --> 01:42:42.470
if they didn't want to copy.

1793
01:42:42.570 --> 01:42:43.790
I know copying can sometimes be clunky,

1794
01:42:44.530 --> 01:42:47.190
but we do have it right there in the,

1795
01:42:47.930 --> 01:42:49.810
hopefully someone will share it in the chat, okay?

1796
01:42:50.370 --> 01:42:51.670
So df equals,

1797
01:42:51.870 --> 01:42:53.230
pandas dot read, csv,

1798
01:42:53.490 --> 01:42:54.970
and then a URL.

1799
01:42:55.350 --> 01:42:56.130
What is this doing?

1800
01:42:56.550 --> 01:42:58.690
I've prepared a dataset at that URL,

1801
01:42:58.910 --> 01:42:59.770
which is a commas,

1802
01:42:59.830 --> 01:43:00.830
it's basically a spreadsheet.

1803
01:43:00.830 --> 01:43:02.570
It's commas separated values data.

1804
01:43:03.050 --> 01:43:05.890
So it's a spreadsheet that I uploaded to that URL,

1805
01:43:06.490 --> 01:43:08.930
and pandas very neatly reads it in

1806
01:43:08.930 --> 01:43:11.550
and imports it all into our DataFrame variable,

1807
01:43:11.710 --> 01:43:12.430
which is pretty cool.

1808
01:43:13.450 --> 01:43:15.510
So in that little line,

1809
01:43:15.650 --> 01:43:17.030
we created a new DataFrame,

1810
01:43:17.170 --> 01:43:18.770
and we're going to learn a little bit about it.

1811
01:43:18.870 --> 01:43:20.430
So let's run through really quick,

1812
01:43:20.450 --> 01:43:21.190
because we're just reviewing.

1813
01:43:21.370 --> 01:43:22.330
So I'm going to run through really quick

1814
01:43:22.330 --> 01:43:23.450
some of the stuff you would do

1815
01:43:23.450 --> 01:43:25.970
when you get your hands on a new DataFrame.

1816
01:43:26.770 --> 01:43:28.570
Hopefully you guys are being able

1817
01:43:28.570 --> 01:43:29.690
to import the DataFrame, okay?

1818
01:43:29.690 --> 01:43:34.930
Remember it's bit.ly forward slash NYCBNB, okay?

1819
01:43:35.430 --> 01:43:38.650
B as in Bravo, N as in November,

1820
01:43:39.210 --> 01:43:41.010
or B as in Bravo, okay?

1821
01:43:42.930 --> 01:43:44.570
Let's do df.

1822
01:43:45.130 --> 01:43:46.870
So I'm going to, now I'll do the representation,

1823
01:43:47.490 --> 01:43:48.850
but it's not going to be that helpful.

1824
01:43:48.970 --> 01:43:50.610
Remember our representation is kind of overwhelming.

1825
01:43:50.730 --> 01:43:51.810
So let's just do df.

1826
01:43:53.350 --> 01:43:56.890
df, "out left bracket 51, right bracket colon,

1827
01:43:59.510 --> 01:44:00.150
48,891."

1828
01:44:00.150 --> 01:44:00.830
Did you hear that?

1829
01:44:00.850 --> 01:44:02.630
48,891.

1830
01:44:02.730 --> 01:44:05.030
So that's, we're going to talk about this in a minute,

1831
01:44:05.110 --> 01:44:06.610
but we don't know what that is yet, actually,

1832
01:44:06.670 --> 01:44:07.950
but we're going to confirm in a minute.

1833
01:44:08.750 --> 01:44:09.090
Something's there.

1834
01:44:12.330 --> 01:44:19.310
"36485057, 36, 48,892, 36485431."

1835
01:44:19.490 --> 01:44:20.890
My question, you're probably like, what the hell?

1836
01:44:20.990 --> 01:44:22.730
It's just basically, it's just printing out random stuff.

1837
01:44:23.030 --> 01:44:25.210
That's because what we have now is a big DataFrame,

1838
01:44:25.210 --> 01:44:27.770
and it has, well, I'm going to tell you now how big it is.

1839
01:44:27.870 --> 01:44:30.610
So it's going to be, how do we tell how big it is?

1840
01:44:31.130 --> 01:44:32.670
We don't just look at the representation

1841
01:44:32.670 --> 01:44:33.950
because that's too much information.

1842
01:44:34.070 --> 01:44:34.510
It's not useful.

1843
01:44:34.650 --> 01:44:36.050
Let's do df.shape.

1844
01:44:38.070 --> 01:44:42.090
"df.shape, S-H-A-P-E," no parenthesis.

1845
01:44:42.210 --> 01:44:44.810
"Out left bracket 52, right bracket colon,

1846
01:44:45.330 --> 01:44:49.090
left paren, 48,895."

1847
01:44:49.710 --> 01:44:53.230
So this has 48,895 rows,

1848
01:44:53.710 --> 01:44:55.450
each representing an Airbnb listing,

1849
01:44:55.970 --> 01:44:59.490
and it has 16 columns, okay?

1850
01:44:59.570 --> 01:45:01.910
So this is a big, it's not big data

1851
01:45:02.510 --> 01:45:04.090
because it still runs in our computer or whatever,

1852
01:45:04.170 --> 01:45:06.750
but it's a much bigger data set than we've used so far.

1853
01:45:06.930 --> 01:45:08.310
And it's real data, okay?

1854
01:45:09.590 --> 01:45:14.350
This is all Airbnb data from New York City in 2019.

1855
01:45:14.950 --> 01:45:19.490
So pre-pandemic, pre-recent reform

1856
01:45:19.490 --> 01:45:20.890
of Airbnbs in New York City.

1857
01:45:21.970 --> 01:45:24.630
And so it represents actual data from that year

1858
01:45:25.990 --> 01:45:26.950
that we can look at.

1859
01:45:27.350 --> 01:45:28.910
What's the first thing we're going to want to do

1860
01:45:29.490 --> 01:45:30.930
after we find out the size of it?

1861
01:45:30.970 --> 01:45:31.850
And it is useful to know the size.

1862
01:45:31.890 --> 01:45:33.090
We have 16 columns to work with

1863
01:45:33.090 --> 01:45:35.370
and we have almost 50,000 rows, okay?

1864
01:45:35.450 --> 01:45:36.510
Let me just double check the time.

1865
01:45:38.030 --> 01:45:39.450
"2 colon 50 PM."

1866
01:45:39.830 --> 01:45:40.570
We're going to do some cool stuff.

1867
01:45:40.750 --> 01:45:43.770
Okay, so what we want to do

1868
01:45:43.770 --> 01:45:45.870
is we want to know what the columns are, okay?

1869
01:45:46.350 --> 01:45:48.730
Because then the columns will tell us

1870
01:45:48.730 --> 01:45:52.810
how much, what kind of data we have to work with, okay?

1871
01:45:52.830 --> 01:45:54.030
So we want the column names.

1872
01:45:54.490 --> 01:45:56.530
And pretty much if you're working with a new data set,

1873
01:45:56.610 --> 01:45:58.730
you're going to do this in more or less this order.

1874
01:45:58.810 --> 01:46:01.110
You're going to want to know how big is the data set

1875
01:46:01.670 --> 01:46:04.610
in terms of, you know, X and Y, rows and columns,

1876
01:46:05.370 --> 01:46:07.750
how many, and also the second thing you're going to want

1877
01:46:07.750 --> 01:46:10.350
to know is what is the data we have,

1878
01:46:10.730 --> 01:46:12.650
which the column names will tell you.

1879
01:46:12.710 --> 01:46:15.270
So let's do df.columns, okay?

1880
01:46:20.910 --> 01:46:22.350
df.columns.

1881
01:46:22.350 --> 01:46:22.970
df.columns.

1882
01:46:23.510 --> 01:46:24.290
And there are a lot of these,

1883
01:46:24.410 --> 01:46:25.510
so we'll listen to some of them.

1884
01:46:26.430 --> 01:46:28.090
"Neighborhood, latitude,

1885
01:46:29.510 --> 01:46:32.590
longitude, room line type, price,

1886
01:46:33.910 --> 01:46:36.890
minimum line nights, number line of line R,

1887
01:46:38.090 --> 01:46:40.170
reviews, last line review,

1888
01:46:41.390 --> 01:46:44.070
reviews line per line month, calculate,"

1889
01:46:44.070 --> 01:46:48.250
and of course the, it's New York City,

1890
01:46:48.450 --> 01:46:50.350
there has to be a car alarm going off outside,

1891
01:46:51.410 --> 01:46:53.270
but you're getting a little local flavor.

1892
01:46:53.950 --> 01:46:55.850
But okay, so we have,

1893
01:46:58.150 --> 01:47:01.010
in our, so now we have our,

1894
01:47:02.190 --> 01:47:03.190
that is very annoying.

1895
01:47:04.790 --> 01:47:07.850
Okay, so we pulled out our column names

1896
01:47:07.850 --> 01:47:10.570
and I would say there's a couple that stood out to me, okay?

1897
01:47:10.570 --> 01:47:12.170
That's df.

1898
01:47:15.370 --> 01:47:16.390
Oh my God.

1899
01:47:16.630 --> 01:47:20.830
df.theprice, that stood out to me

1900
01:47:20.830 --> 01:47:21.790
as being really interesting.

1901
01:47:21.930 --> 01:47:23.590
I'm always attracted to stuff like price, okay?

1902
01:47:23.710 --> 01:47:25.310
So that's some interesting numerical data.

1903
01:47:25.710 --> 01:47:28.010
We have df.neighborhood, that probably tells us

1904
01:47:28.010 --> 01:47:29.870
the different neighborhoods in New York City,

1905
01:47:29.970 --> 01:47:30.670
which is pretty cool.

1906
01:47:31.790 --> 01:47:33.290
And then there's a couple of other ones

1907
01:47:33.290 --> 01:47:34.850
that stood out, maybe minimum nights.

1908
01:47:35.890 --> 01:47:37.810
But the other one that I found really interesting

1909
01:47:37.810 --> 01:47:39.770
was df.name, okay?

1910
01:47:41.190 --> 01:47:44.230
And so each of these represents a different kind of data

1911
01:47:44.230 --> 01:47:48.990
and df.price is numeric data, it's an integer.

1912
01:47:49.750 --> 01:47:53.190
And then the df.name, we can check.

1913
01:47:53.330 --> 01:47:54.510
Let's check these really quick.

1914
01:47:54.790 --> 01:47:57.430
So df.price.

1915
01:47:59.890 --> 01:48:01.550
"48,890.70."

1916
01:48:02.870 --> 01:48:03.430
...

1917
01:48:03.650 --> 01:48:05.170
So I heard the word, I heard 70 there

1918
01:48:05.170 --> 01:48:07.790
and 48,890, that's the index.

1919
01:48:08.010 --> 01:48:09.390
And then 70 is the price.

1920
01:48:09.390 --> 01:48:11.450
So it's telling us integers,

1921
01:48:11.750 --> 01:48:14.170
so it's numeric data of some kind, okay?

1922
01:48:15.090 --> 01:48:16.790
And we could do that with name

1923
01:48:16.790 --> 01:48:19.510
and in the interest of time, I'll tell you,

1924
01:48:19.830 --> 01:48:21.990
name is the name of the listing as it appears in Airbnb,

1925
01:48:22.250 --> 01:48:23.970
which is really interesting, textual data.

1926
01:48:24.430 --> 01:48:27.570
And then the neighborhood, it's kind of like grouped data,

1927
01:48:27.630 --> 01:48:28.270
which we'll get into.

1928
01:48:28.370 --> 01:48:30.270
It's a special kind of data called categorical data

1929
01:48:30.270 --> 01:48:32.010
that we'll talk about next week, okay?

1930
01:48:32.270 --> 01:48:34.730
But for now, what I'd like to be interested in

1931
01:48:34.730 --> 01:48:37.150
is let's figure out a little bit about the price, okay?

1932
01:48:37.770 --> 01:48:39.710
So what, first of all, I'd like to know

1933
01:48:39.710 --> 01:48:43.490
what is the average price of an Airbnb in New York City?

1934
01:48:43.970 --> 01:48:45.030
So it would be df,

1935
01:48:45.930 --> 01:48:47.650
and we kind of did a little bit of this before,

1936
01:48:47.790 --> 01:48:49.670
df.price.mean.

1937
01:48:50.970 --> 01:48:54.670
...

1938
01:48:54.670 --> 01:48:55.690
Remember, this is a real data set

1939
01:48:55.690 --> 01:48:58.810
and we're running this over almost 50,000 rows.

1940
01:48:58.950 --> 01:49:00.910
We're getting the mean of almost 50,000 rows.

1941
01:49:01.150 --> 01:49:06.490
"Out left bracket 55, right bracket colon 152 points."

1942
01:49:06.490 --> 01:49:07.970
So, okay, 152.

1943
01:49:08.090 --> 01:49:11.470
So the average price of an Airbnb per night

1944
01:49:11.470 --> 01:49:15.170
in New York City in 2019 is a little over $150.

1945
01:49:15.810 --> 01:49:17.170
And that sounds really high.

1946
01:49:17.250 --> 01:49:18.450
So maybe you're like, oh, wow,

1947
01:49:18.590 --> 01:49:23.070
like New York is expensive as I have heard.

1948
01:49:23.750 --> 01:49:25.790
But before we make any judgments,

1949
01:49:25.910 --> 01:49:26.870
let's also try the median.

1950
01:49:27.090 --> 01:49:30.370
So let's do df.mean, df.price.mean.

1951
01:49:31.590 --> 01:49:32.550
"df,

1952
01:49:33.470 --> 01:49:36.610
dot price,

1953
01:49:37.610 --> 01:49:40.430
dot ... right paren.

1954
01:49:40.670 --> 01:49:42.430
So df.price.median.

1955
01:49:42.950 --> 01:49:48.350
Out left bracket 56, right bracket colon 106.0."

1956
01:49:48.450 --> 01:49:49.770
106.0.

1957
01:49:50.170 --> 01:49:54.290
So the average was almost a little over 150

1958
01:49:54.850 --> 01:49:57.690
and the median was only 106.

1959
01:49:58.190 --> 01:50:00.170
So this is interesting, right?

1960
01:50:00.270 --> 01:50:02.330
And maybe you're like, oh, that's interesting.

1961
01:50:02.330 --> 01:50:04.110
That sounds a little more reasonable.

1962
01:50:04.330 --> 01:50:05.690
I mean, maybe it still sounds expensive to you,

1963
01:50:05.770 --> 01:50:08.430
but you're like, oh, that's actually less

1964
01:50:08.430 --> 01:50:11.410
than I expected from the average.

1965
01:50:11.690 --> 01:50:13.570
So this actually does tell you something.

1966
01:50:13.990 --> 01:50:15.710
And this is the kind of thing you learn

1967
01:50:15.710 --> 01:50:17.370
as you do more with data science.

1968
01:50:18.190 --> 01:50:20.790
When you look at the mean and the median

1969
01:50:20.790 --> 01:50:25.050
and the median is significantly lower than the mean,

1970
01:50:25.390 --> 01:50:27.430
it tells you something about the shape of the data.

1971
01:50:27.810 --> 01:50:29.570
And they call this right skewed data.

1972
01:50:29.570 --> 01:50:32.090
This specific situation is called right skewed data.

1973
01:50:32.650 --> 01:50:35.610
And what that means is there's a couple of,

1974
01:50:35.790 --> 01:50:37.190
there's some items in the data set

1975
01:50:37.190 --> 01:50:38.410
that are bringing up the average.

1976
01:50:38.530 --> 01:50:40.430
So some, in this case, very expensive items.

1977
01:50:41.030 --> 01:50:42.530
And I'll draw you an analogy.

1978
01:50:42.830 --> 01:50:45.730
Like imagine all of us together,

1979
01:50:46.090 --> 01:50:48.430
we imagine each of our incomes, right?

1980
01:50:48.510 --> 01:50:51.150
So imagine, and we probably all have fairly normal incomes.

1981
01:50:51.410 --> 01:50:53.770
Maybe some of us are whatever, you know, I don't know.

1982
01:50:53.850 --> 01:50:54.790
Maybe there's some millionaires here.

1983
01:50:55.150 --> 01:50:56.890
We say we all have pretty normal incomes, right?

1984
01:50:56.950 --> 01:50:58.370
All of us who are in this workshop.

1985
01:50:58.830 --> 01:51:01.650
And we collect us all together in a data set.

1986
01:51:01.750 --> 01:51:05.350
So our data set is all of our, or let's say our wealth, okay?

1987
01:51:05.710 --> 01:51:09.630
Okay, so we have each of our individual net worth

1988
01:51:09.630 --> 01:51:10.010
or whatever.

1989
01:51:10.390 --> 01:51:12.550
And then we take someone like Jeff Bezos

1990
01:51:12.550 --> 01:51:13.430
or something like that.

1991
01:51:13.490 --> 01:51:16.330
Someone who has a gazillion, trillion, billion dollars, okay?

1992
01:51:16.710 --> 01:51:18.490
And we add Jeff to the data set,

1993
01:51:18.550 --> 01:51:19.910
Jeff Bezos, Mr. Bezos.

1994
01:51:21.170 --> 01:51:23.570
Suddenly the average in that data set

1995
01:51:23.570 --> 01:51:26.510
is gonna shoot up by like probably more than a billion.

1996
01:51:26.510 --> 01:51:29.090
I think there's something like 50 people in this room.

1997
01:51:29.570 --> 01:51:31.890
Jeff Bezos is definitely worth more than $50 billion.

1998
01:51:32.410 --> 01:51:34.270
So the average is gonna go up by more,

1999
01:51:34.530 --> 01:51:36.050
at least a billion dollars.

2000
01:51:36.470 --> 01:51:40.830
However, the median will only go up very slightly.

2001
01:51:41.630 --> 01:51:42.930
And that, why is that?

2002
01:51:43.290 --> 01:51:46.630
That is because the mean,

2003
01:51:46.770 --> 01:51:48.710
the average is very sensitive to high numbers

2004
01:51:48.710 --> 01:51:50.570
that kind of like outliers that throw it off.

2005
01:51:50.630 --> 01:51:52.370
Whereas the median is the middle most number.

2006
01:51:52.830 --> 01:51:55.030
So the middle most number in the Jeff Bezos example

2007
01:51:55.030 --> 01:51:55.930
didn't change too much.

2008
01:51:55.930 --> 01:51:57.810
So the median often tells you more

2009
01:51:57.810 --> 01:52:01.110
about the most representative data in certain data sets.

2010
01:52:01.490 --> 01:52:04.410
Whereas the average is kind of like tells you

2011
01:52:04.410 --> 01:52:07.010
it's a little more thrown off by big numbers

2012
01:52:07.010 --> 01:52:08.950
that are included or big outliers, okay?

2013
01:52:10.110 --> 01:52:11.870
In cooperation with each other,

2014
01:52:11.870 --> 01:52:13.230
when we run on both of them,

2015
01:52:13.710 --> 01:52:16.230
we kind of configure and some people,

2016
01:52:16.450 --> 01:52:18.890
a sighted person might try to learn this kind of information

2017
01:52:18.890 --> 01:52:20.110
by creating a bar graph.

2018
01:52:20.190 --> 01:52:22.910
And then the sighted person would see visually

2019
01:52:23.370 --> 01:52:25.450
that there's a whole bunch of big values

2020
01:52:25.450 --> 01:52:28.610
at the end of the data sets.

2021
01:52:29.070 --> 01:52:31.490
But we can also make that intuition

2022
01:52:32.150 --> 01:52:33.830
based on the mean and the median,

2023
01:52:34.010 --> 01:52:36.710
which is these kind of statistical numbers that we can use.

2024
01:52:37.230 --> 01:52:38.590
And now let's kind of,

2025
01:52:38.830 --> 01:52:40.610
this will be kind of the last thing we do in the workshop.

2026
01:52:40.750 --> 01:52:42.570
I kind of want to tell you what we're doing next time.

2027
01:52:42.610 --> 01:52:45.350
And I'll give you a little kind of philosophy

2028
01:52:45.350 --> 01:52:47.190
of the non-visual stuff before we go.

2029
01:52:47.650 --> 01:52:49.630
But this is the last Python we'll do.

2030
01:52:49.970 --> 01:52:51.690
Let's confirm our hypothesis.

2031
01:52:51.850 --> 01:52:54.950
So our hypothesis is that there's a few very large values

2032
01:52:54.950 --> 01:53:00.410
in this data set that are throwing off our analysis,

2033
01:53:01.990 --> 01:53:05.250
but that are not kind of skewing the data

2034
01:53:05.250 --> 01:53:06.570
over toward the expensive side.

2035
01:53:07.450 --> 01:53:20.190
So let's do df.price.sort underscore values.

2036
01:53:23.010 --> 01:53:25.670
So that sorts the price from least to greatest.

2037
01:53:26.290 --> 01:53:27.750
Now I'm going to run this,

2038
01:53:28.170 --> 01:53:29.450
and then I'm going to tell you

2039
01:53:29.450 --> 01:53:30.710
to add something to the end of it,

2040
01:53:30.750 --> 01:53:31.950
but I'm going to run it really quick.

2041
01:53:35.090 --> 01:53:37.370
"40,433, 9,999.

2042
01:53:41.470 --> 01:53:42.450
12,342, 9,999."

2043
01:53:42.450 --> 01:53:43.570
So that tells us right there.

2044
01:53:44.210 --> 01:53:46.390
So it's actually, it's telling us from highest to lowest.

2045
01:53:46.910 --> 01:53:52.070
So I heard there, oh, you know what it is?

2046
01:53:52.170 --> 01:53:55.810
What's confusing here is that what Pandas usually outputs

2047
01:53:55.810 --> 01:53:57.830
is it's from the least to the greatest,

2048
01:53:58.050 --> 01:54:00.190
and it prints out the first five of the least,

2049
01:54:00.650 --> 01:54:03.130
then it skips all the rest of the data,

2050
01:54:03.410 --> 01:54:04.910
then it prints the last five.

2051
01:54:05.010 --> 01:54:07.250
But because I made the text so big in this,

2052
01:54:07.330 --> 01:54:09.150
it's only printing out the last five,

2053
01:54:09.550 --> 01:54:11.410
even though it's supposed to print out all of it, okay?

2054
01:54:11.490 --> 01:54:13.190
So it's being a little deceptive here,

2055
01:54:13.190 --> 01:54:15.790
and it's only because of me magnifying

2056
01:54:17.030 --> 01:54:19.110
this command line environment so much, okay?

2057
01:54:19.130 --> 01:54:20.390
It's printing out the last five,

2058
01:54:20.710 --> 01:54:22.470
but really what it tries to do is print out

2059
01:54:22.470 --> 01:54:24.090
the first five and the last five.

2060
01:54:24.730 --> 01:54:26.110
So what I want you to do is,

2061
01:54:26.890 --> 01:54:28.150
so it'll work on your computer

2062
01:54:28.150 --> 01:54:29.990
because you may not have magnified to the same extent.

2063
01:54:30.150 --> 01:54:30.770
Press up.

2064
01:54:32.030 --> 01:54:34.650
"In left bracket 58, right bracket colon,

2065
01:54:35.390 --> 01:54:39.510
df.price.sortline values left paren, right paren."

2066
01:54:39.730 --> 01:54:40.690
Add to the end of that.

2067
01:54:40.770 --> 01:54:41.570
"In left bracket."

2068
01:54:41.570 --> 01:54:43.690
Add to the end of that dot,

2069
01:54:45.710 --> 01:54:50.390
dot tail, T-A-I-L, open parenthesis, close parenthesis.

2070
01:54:51.370 --> 01:54:53.770
"T-A-I-L, left right paren."

2071
01:54:53.770 --> 01:54:55.290
So now we're chaining three dots together.

2072
01:54:56.710 --> 01:54:59.430
"Out left bracket 58, right bracket colon,

2073
01:55:00.470 --> 01:55:03.490
colon, left paren, right paren.

2074
01:55:04.590 --> 01:55:07.270
Out left bracket 58, right bracket colon."

2075
01:55:07.290 --> 01:55:08.770
So this is just a bunch of preamble.

2076
01:55:08.910 --> 01:55:09.910
We haven't gotten to the data yet.

2077
01:55:12.810 --> 01:55:15.470
"40,433, 9999.

2078
01:55:17.610 --> 01:55:20.870
Name colon, price, type colon."

2079
01:55:21.170 --> 01:55:24.170
So it printed out the last five

2080
01:55:24.850 --> 01:55:30.190
and basically it says there are a bunch of them

2081
01:55:30.680 --> 01:55:31.850
with, we can review to see,

2082
01:55:31.930 --> 01:55:33.570
but there are a bunch that are 9,999

2083
01:55:34.060 --> 01:55:35.510
and a couple that are 10,000.

2084
01:55:35.730 --> 01:55:36.150
"Blank.

2085
01:55:37.910 --> 01:55:42.750
Name colon, 29,238, 10,000.

2086
01:55:46.150 --> 01:55:47.770
9,151, 10,000.

2087
01:55:50.770 --> 01:55:51.850
17,692, 10,000."

2088
01:55:51.850 --> 01:55:53.850
So there's three at least that are 10,000.

2089
01:55:54.010 --> 01:55:54.690
And then I know from experience.

2090
01:55:57.070 --> 01:55:59.270
12,342, 9,999.

2091
01:55:59.270 --> 01:56:01.090
Okay, so we have a whole bunch of really,

2092
01:56:01.250 --> 01:56:03.430
and probably there's some weird reason

2093
01:56:03.430 --> 01:56:04.110
those are in the dataset.

2094
01:56:04.270 --> 01:56:05.750
Probably people aren't really paying 10,000

2095
01:56:05.750 --> 01:56:06.350
for their rooms.

2096
01:56:06.470 --> 01:56:07.990
They're probably doing something

2097
01:56:07.990 --> 01:56:10.050
like jacking up the price temporarily

2098
01:56:10.050 --> 01:56:11.090
or something like that

2099
01:56:11.090 --> 01:56:12.710
so that people don't rent the room

2100
01:56:12.710 --> 01:56:13.990
in some day that they want,

2101
01:56:14.050 --> 01:56:14.830
or something like that.

2102
01:56:15.130 --> 01:56:16.310
Something weird is going on there.

2103
01:56:16.410 --> 01:56:18.070
And that's why I say the logic

2104
01:56:18.070 --> 01:56:20.510
and the context sensitiveness comes in

2105
01:56:20.510 --> 01:56:22.750
when you start looking at that real life data like this,

2106
01:56:22.870 --> 01:56:24.490
which we'll do more next time.

2107
01:56:25.450 --> 01:56:27.130
But now, and that last one's kind of cool.

2108
01:56:27.230 --> 01:56:30.330
So what we did was we did df or data frame.

2109
01:56:30.590 --> 01:56:33.310
We pulled out the column, df.price.

2110
01:56:33.850 --> 01:56:37.230
Then we sorted the values in the column.sortValues.

2111
01:56:37.690 --> 01:56:40.550
Then we pulled out the last five

2112
01:56:40.550 --> 01:56:42.290
so we could get an idea

2113
01:56:42.290 --> 01:56:44.770
of what the last five most expensive items are.

2114
01:56:45.790 --> 01:56:47.750
Okay, so, and this is kind of,

2115
01:56:47.830 --> 01:56:48.670
as we go in pandas,

2116
01:56:48.710 --> 01:56:49.830
you'll see we'll sort of chaining

2117
01:56:49.830 --> 01:56:50.610
and chaining and chaining

2118
01:56:50.610 --> 01:56:53.430
and combining together more and more items like this.

2119
01:56:53.930 --> 01:56:56.650
Okay, so I kind of just want to say

2120
01:56:59.950 --> 01:57:02.230
that just for the little bit

2121
01:57:02.230 --> 01:57:03.370
of the non-visual philosophy

2122
01:57:03.370 --> 01:57:06.870
before we get into the next workshop.

2123
01:57:07.010 --> 01:57:08.570
And we're basically done with the Python here.

2124
01:57:08.910 --> 01:57:12.970
So, but it's really important

2125
01:57:12.970 --> 01:57:14.030
when you're a screen reader user

2126
01:57:14.030 --> 01:57:17.590
to control how much information is coming to you

2127
01:57:17.590 --> 01:57:19.250
and exactly what information.

2128
01:57:19.650 --> 01:57:22.390
And luckily this environment that we're in

2129
01:57:22.390 --> 01:57:25.430
and pandas really does give you full control over that.

2130
01:57:25.610 --> 01:57:30.210
Okay, and in fact, I would say we as non-visual people,

2131
01:57:30.210 --> 01:57:32.330
we're not really at that as much of a disadvantage

2132
01:57:32.330 --> 01:57:35.390
as you would think in terms of doing things

2133
01:57:35.390 --> 01:57:36.430
totally non-visually.

2134
01:57:36.650 --> 01:57:38.070
And that is because, for example,

2135
01:57:38.250 --> 01:57:40.370
when a sighted person prints out that data frame,

2136
01:57:40.990 --> 01:57:43.230
the data is too big to look at visually anyway.

2137
01:57:43.310 --> 01:57:45.950
There's 16 rows, there's 50,000,

2138
01:57:46.570 --> 01:57:48.810
oh, sorry, 50,000 rows, there's 16 columns.

2139
01:57:48.990 --> 01:57:51.450
It's just too much to look at as a practical matter.

2140
01:57:51.730 --> 01:57:53.130
And in fact, pandas knows this.

2141
01:57:53.330 --> 01:57:56.510
And when a sighted person prints out a data frame

2142
01:57:56.510 --> 01:57:57.390
that's long like this,

2143
01:57:57.690 --> 01:57:59.390
it just shows the first five rows.

2144
01:57:59.390 --> 01:58:01.610
I dot, dot, dot, and the last five rows

2145
01:58:01.610 --> 01:58:03.670
because it knows it's not useful.

2146
01:58:03.830 --> 01:58:06.690
And my sighted students often ask me,

2147
01:58:07.170 --> 01:58:09.290
hey, how do I change it to see all the rows?

2148
01:58:09.350 --> 01:58:10.910
Because they just wanna go looking through the data.

2149
01:58:11.330 --> 01:58:14.510
And I say, it's actually, no, do not do that

2150
01:58:14.510 --> 01:58:17.410
because you too will become overwhelmed.

2151
01:58:17.650 --> 01:58:20.130
They need to learn the same thing that I'm showing you,

2152
01:58:20.510 --> 01:58:23.390
which is to pull out the most specific information

2153
01:58:23.390 --> 01:58:26.290
that they can and to be efficient that way.

2154
01:58:28.450 --> 01:58:33.250
I would also say that the other thing,

2155
01:58:33.330 --> 01:58:35.030
and we're gonna get more into this next time.

2156
01:58:35.430 --> 01:58:37.390
And we only kind of scratching the surface of it here

2157
01:58:37.390 --> 01:58:38.710
by learning some of the fundamentals,

2158
01:58:39.290 --> 01:58:41.910
but that what I'm gonna try to show you

2159
01:58:41.910 --> 01:58:45.070
is that there are ways of working with the data

2160
01:58:45.630 --> 01:58:47.710
that will give you the same information

2161
01:58:47.710 --> 01:58:50.670
or it's very similar information that a,

2162
01:58:50.790 --> 01:58:54.610
say a pie chart, bar chart, line chart would give you.

2163
01:58:54.610 --> 01:58:59.450
But instead of using a visual app, a visual approach,

2164
01:58:59.950 --> 01:59:03.970
we use, we try to explore the data

2165
01:59:03.970 --> 01:59:05.550
by having a conversation with the data,

2166
01:59:05.730 --> 01:59:08.330
by being like, oh, the median is this.

2167
01:59:08.470 --> 01:59:10.270
Well, that makes me curious about the mode.

2168
01:59:10.370 --> 01:59:12.390
What's the most common value in there?

2169
01:59:12.490 --> 01:59:15.210
And then you build up a mental model

2170
01:59:15.850 --> 01:59:18.370
of the dataset in your mind,

2171
01:59:19.750 --> 01:59:23.990
but without like that kind of visualization approach.

2172
01:59:25.170 --> 01:59:27.390
And it's very, it's honestly, it's very practical.

2173
01:59:27.690 --> 01:59:30.790
It really can build up a mental model of your data

2174
01:59:31.290 --> 01:59:32.970
through this conversational method.

2175
01:59:33.530 --> 01:59:35.450
I'm not gonna say it's gonna be exactly as good

2176
01:59:35.450 --> 01:59:37.370
all the time, but then we also have sonification,

2177
01:59:37.570 --> 01:59:39.370
which we'll do in the last two workshops.

2178
01:59:39.610 --> 01:59:42.710
So we can access some of that condensed information

2179
01:59:44.030 --> 01:59:45.770
that some people get in a chart.

2180
01:59:45.770 --> 01:59:48.530
Okay, so that's my pep talk for next time.

2181
01:59:48.590 --> 01:59:49.230
We're gonna learn some,

2182
01:59:49.390 --> 01:59:51.910
we're gonna lean into this conversational style

2183
01:59:51.910 --> 01:59:52.390
with the data.

2184
01:59:53.050 --> 01:59:55.610
We're gonna do this exploratory data analysis

2185
01:59:56.290 --> 01:59:58.090
to get a feel for this dataset

2186
01:59:58.090 --> 02:00:01.890
and to answer some actually quite specific questions.

2187
02:00:01.890 --> 02:00:03.890
Like for example, what's the neighborhood

2188
02:00:03.890 --> 02:00:08.370
with the most expensive apartments and so on, okay?

2189
02:00:09.690 --> 02:00:11.190
We're gonna all do that next time.

2190
02:00:11.190 --> 02:00:17.870
For people who are feeling adventurous this week,

2191
02:00:18.050 --> 02:00:21.270
between now and Tuesday, I have in the curriculum,

2192
02:00:21.890 --> 02:00:23.990
in addition, in the curriculum,

2193
02:00:24.210 --> 02:00:26.470
I have added a challenges section to the end.

2194
02:00:26.550 --> 02:00:28.090
So it has three little challenges.

2195
02:00:28.790 --> 02:00:32.450
They only use, or they can be completed

2196
02:00:33.070 --> 02:00:34.950
with items that we learned in this tutorial.

2197
02:00:35.070 --> 02:00:36.550
There may be easier ways to do it

2198
02:00:36.550 --> 02:00:38.310
to solve those challenges and pandas,

2199
02:00:38.310 --> 02:00:40.110
but you can definitely solve them

2200
02:00:40.110 --> 02:00:43.030
with the methods, attributes, techniques,

2201
02:00:43.170 --> 02:00:45.250
and everything we've learned in this tutorial, okay?

2202
02:00:45.310 --> 02:00:48.190
And they're like real questions about the data,

2203
02:00:48.590 --> 02:00:51.250
this dataset that you can try to figure out

2204
02:00:51.770 --> 02:00:54.510
if you want to challenge yourself between now and Tuesday.

2205
02:00:55.130 --> 02:00:57.030
Okay, and I'll also say maybe just cause you're not,

2206
02:00:57.390 --> 02:00:58.650
maybe it's not something you're used to,

2207
02:00:58.810 --> 02:01:01.050
the curriculum that's been created

2208
02:01:01.050 --> 02:01:02.310
for the first and second workshops,

2209
02:01:02.530 --> 02:01:04.890
they've really been designed for independent work.

2210
02:01:05.170 --> 02:01:06.550
So if you haven't looked at them,

2211
02:01:06.550 --> 02:01:07.950
they're very descriptive.

2212
02:01:08.250 --> 02:01:10.630
I'd say they actually have more information in them

2213
02:01:10.630 --> 02:01:13.090
than I can get across to you in the workshops.

2214
02:01:14.190 --> 02:01:17.510
And they're very talky, just like I'm talky,

2215
02:01:17.770 --> 02:01:18.590
and conversational.

2216
02:01:18.890 --> 02:01:22.210
So they're not just like a dump of the information

2217
02:01:22.210 --> 02:01:22.830
in this workshop.

2218
02:01:23.030 --> 02:01:24.450
They're actually like designed

2219
02:01:24.450 --> 02:01:26.190
so people can follow along independently

2220
02:01:26.190 --> 02:01:27.910
and without even looking at these workshops.

2221
02:01:28.070 --> 02:01:29.750
So if you haven't looked at those as a resource,

2222
02:01:30.050 --> 02:01:30.970
they're there for you.

2223
02:01:30.970 --> 02:01:33.290
If you're feeling a little overwhelmed, you wanna review.

2224
02:01:34.230 --> 02:01:36.610
And then finally, if you wanna kind of, you know,

2225
02:01:36.970 --> 02:01:37.870
drop off the meeting or whatever,

2226
02:01:37.930 --> 02:01:39.570
I'm just gonna talk about procedural stuff now.

2227
02:01:39.870 --> 02:01:44.130
On Thursday, we will be, have another office hours.

2228
02:01:44.250 --> 02:01:48.410
And every week after the Tuesday workshop,

2229
02:01:48.510 --> 02:01:49.670
we'll have a Thursday office hours.

2230
02:01:49.790 --> 02:01:51.530
It's at the same time during the day.

2231
02:01:51.850 --> 02:01:56.750
So it's 1 p.m. Eastern time, 6 p.m. Grand Meridian time,

2232
02:01:56.910 --> 02:01:57.910
or GMT, okay?

2233
02:01:58.590 --> 02:01:58.950
And,

2234
02:02:02.710 --> 02:02:03.690
and thank you.

2235
02:02:03.790 --> 02:02:05.050
I'll stop the recording there.

2236
02:02:05.450 --> 02:02:07.710
And I'm gonna stick around for questions, okay?

2237
02:02:09.390 --> 02:02:10.650
Actually, if people have questions

2238
02:02:10.650 --> 02:02:12.730
about the data science portion,

2239
02:02:12.870 --> 02:02:14.030
I'll leave the recording running

2240
02:02:14.030 --> 02:02:15.190
so people can benefit from that.

2241
02:02:16.150 --> 02:02:18.190
So thank you all and have a great day.

2242
02:02:22.190 --> 02:02:23.770
Okay, so helpers, were there questions

2243
02:02:23.770 --> 02:02:28.170
in the chat that came up that would be good to address?

2244
02:02:28.310 --> 02:02:29.790
Or does someone wanna get on the mic

2245
02:02:31.290 --> 02:02:32.090
and ask a question?

2246
02:02:36.720 --> 02:02:37.380
Let's see.

2247
02:02:38.040 --> 02:02:41.380
I think, I think just if anyone wants to hop on the mic.

2248
02:02:42.420 --> 02:02:43.980
Just to be clear, I wanted to make sure,

2249
02:02:44.120 --> 02:02:45.660
people have permission to leave now.

2250
02:02:45.920 --> 02:02:48.080
If you're worried about social permission to leave,

2251
02:02:48.440 --> 02:02:49.400
you have permission to leave now.

2252
02:02:49.520 --> 02:02:50.900
This is, this is, you know,

2253
02:02:51.200 --> 02:02:52.620
even more optional than the workshops.

2254
02:02:53.260 --> 02:02:54.240
Just wanna make sure that's clear.

2255
02:02:55.560 --> 02:02:57.300
Sorry, we have a question from Liam.

2256
02:02:57.640 --> 02:03:00.380
Can we go through saving this as a file like last time?

2257
02:03:00.480 --> 02:03:02.020
So I believe the iPython session.

2258
02:03:07.610 --> 02:03:09.090
There were my headphones fell out there

2259
02:03:09.090 --> 02:03:09.630
and I didn't hear you.

2260
02:03:09.630 --> 02:03:10.010
I didn't hear it.

2261
02:03:10.210 --> 02:03:10.990
So I wonder if you could.

2262
02:03:12.170 --> 02:03:13.050
Sorry about that.

2263
02:03:13.130 --> 02:03:13.610
We have a question from Liam now.

2264
02:03:13.610 --> 02:03:14.810
I'm waving my hands around.

2265
02:03:17.490 --> 02:03:18.570
Oh, can you still not?

2266
02:03:18.750 --> 02:03:19.530
Oh, are your headphones still not on?

2267
02:03:19.530 --> 02:03:20.330
I can hear you now.

2268
02:03:21.070 --> 02:03:21.630
Oh, okay.

2269
02:03:21.810 --> 02:03:22.630
Whoops, okay, whoops.

2270
02:03:22.950 --> 02:03:23.070
Okay.

2271
02:03:23.410 --> 02:03:26.150
Liam asks, can we go through saving this as a file

2272
02:03:26.150 --> 02:03:27.350
like last time?

2273
02:03:27.410 --> 02:03:29.390
So I believe saving the iPython session.

2274
02:03:29.770 --> 02:03:30.070
Yes, okay.

2275
02:03:30.210 --> 02:03:31.830
That's great to review and thank you, Liam.

2276
02:03:33.030 --> 02:03:33.410
Okay.

2277
02:03:33.770 --> 02:03:38.910
So to save, we use what's called a iPython magic command.

2278
02:03:38.910 --> 02:03:39.390
Okay.

2279
02:03:40.070 --> 02:03:43.050
Those all start with a percentage sign.

2280
02:03:43.430 --> 02:03:43.530
Okay.

2281
02:03:44.490 --> 02:03:46.470
So the first thing you have to do

2282
02:03:46.470 --> 02:03:48.890
is you have to know what the last line,

2283
02:03:49.070 --> 02:03:51.030
the number of the last line you input was,

2284
02:03:51.090 --> 02:03:52.510
because we'll need that for this command.

2285
02:03:52.950 --> 02:03:55.050
So I'm just going to press enter so I can hear my input.

2286
02:03:56.090 --> 02:03:58.170
"In left bracket 59, right bracket."

2287
02:03:58.350 --> 02:03:59.390
So I heard 59.

2288
02:04:00.030 --> 02:04:02.730
So that means we've entered 58 lines of code.

2289
02:04:02.850 --> 02:04:04.990
So we want to save from one to 58.

2290
02:04:05.570 --> 02:04:07.510
It's kind of annoying that it makes us put that in,

2291
02:04:08.030 --> 02:04:09.730
but it's just how it's designed.

2292
02:04:09.850 --> 02:04:11.950
I want to do a, maybe I'll do a pull request and be like,

2293
02:04:12.730 --> 02:04:15.570
it's supposed to actually save everything by default,

2294
02:04:15.670 --> 02:04:16.970
but there's a bug where it doesn't.

2295
02:04:17.670 --> 02:04:20.690
All right, so let's do %save.

2296
02:04:23.090 --> 02:04:23.530
"%save."

2297
02:04:24.550 --> 02:04:24.990
Space.

2298
02:04:25.670 --> 02:04:26.110
"Save."

2299
02:04:26.870 --> 02:04:27.390
And then.

2300
02:04:27.430 --> 02:04:27.850
Space.

2301
02:04:28.150 --> 02:04:30.190
And then now we want to put in a file name

2302
02:04:30.190 --> 02:04:34.010
and it will, if you don't put a .py at the end,

2303
02:04:34.310 --> 02:04:36.590
it will add the .py for you.

2304
02:04:36.590 --> 02:04:39.870
So what will be created is going to be a Python text file,

2305
02:04:40.270 --> 02:04:43.650
a .py file, which is a text file with Python code in it.

2306
02:04:43.810 --> 02:04:45.530
But I'm going to call this pandas.

2307
02:04:45.610 --> 02:04:48.550
"P-A-N-D-A-S."

2308
02:04:48.890 --> 02:04:49.410
Pandas.

2309
02:04:49.790 --> 02:04:53.590
"F-U-N-D-A-M-E-N-T-A-L-S."

2310
02:04:54.290 --> 02:04:56.150
I just called it pandas underscore fundamentals.

2311
02:04:57.370 --> 02:05:00.030
And I didn't put the .py because it will add that for us.

2312
02:05:00.770 --> 02:05:01.290
"Fundamentals."

2313
02:05:01.530 --> 02:05:03.170
So it's %save.

2314
02:05:03.170 --> 02:05:03.450
Sorry.

2315
02:05:03.910 --> 02:05:04.430
%save.

2316
02:05:04.870 --> 02:05:05.390
Space.

2317
02:05:05.390 --> 02:05:06.930
Pandas underscore fundamentals.

2318
02:05:07.630 --> 02:05:09.690
And then we have another space.

2319
02:05:09.950 --> 02:05:10.590
Then one.

2320
02:05:10.990 --> 02:05:11.750
Number one.

2321
02:05:11.810 --> 02:05:12.090
One.

2322
02:05:12.330 --> 02:05:12.890
Hyphen.

2323
02:05:13.470 --> 02:05:13.770
One.

2324
02:05:14.610 --> 02:05:15.170
Two.

2325
02:05:16.050 --> 02:05:16.750
58, I think was the number.

2326
02:05:16.990 --> 02:05:17.430
Five.

2327
02:05:17.590 --> 02:05:17.870
Eight.

2328
02:05:18.990 --> 02:05:21.630
Let me just, I think that hyphen.

2329
02:05:22.710 --> 02:05:24.970
"158 is neither a string nor a macro."

2330
02:05:25.110 --> 02:05:26.170
Yeah, I didn't.

2331
02:05:26.190 --> 02:05:26.610
"58.

2332
02:05:27.150 --> 02:05:27.610
Five."

2333
02:05:27.610 --> 02:05:28.770
I didn't properly put the hyphen in.

2334
02:05:29.090 --> 02:05:29.510
Dash.

2335
02:05:30.070 --> 02:05:30.470
"Five.

2336
02:05:30.630 --> 02:05:30.910
Eight.

2337
02:05:31.250 --> 02:05:31.750
D-F.

2338
02:05:32.670 --> 02:05:34.050
D-F dot shape."

2339
02:05:34.050 --> 02:05:36.030
And what gets printed out is all the,

2340
02:05:36.370 --> 02:05:38.910
so what gets printed out to the screen here,

2341
02:05:39.510 --> 02:05:40.710
and what we're hearing,

2342
02:05:40.850 --> 02:05:44.150
is all of the stuff that we have done in the workshop.

2343
02:05:45.510 --> 02:05:48.510
But it actually, it should have put it in the file, okay?

2344
02:05:48.790 --> 02:05:53.170
And we can actually check that using another magic command.

2345
02:05:53.230 --> 02:05:53.930
So I'll double check it.

2346
02:05:54.230 --> 02:05:54.550
"Percent.

2347
02:05:55.290 --> 02:05:55.410
...

2348
02:05:55.650 --> 02:05:56.550
L-S."

2349
02:05:58.070 --> 02:05:59.070
...

2350
02:05:59.310 --> 02:05:59.730
...

2351
02:06:00.070 --> 02:06:02.230
And I call that pandas underscore fundamentals.

2352
02:06:03.150 --> 02:06:04.950
...

2353
02:06:05.910 --> 02:06:06.430
...

2354
02:06:06.430 --> 02:06:06.810
...

2355
02:06:06.810 --> 02:06:06.850
...

2356
02:06:06.850 --> 02:06:06.870
...

2357
02:06:06.870 --> 02:06:08.630
"Volume in drive C has no label.

2358
02:06:09.850 --> 02:06:13.230
Volume serial number is 36F6-B."

2359
02:06:13.250 --> 02:06:13.370
Okay, printing out a lot of stuff from the review.

2360
02:06:13.670 --> 02:06:14.990
"Volume in, in left,

2361
02:06:15.190 --> 02:06:19.470
volume, blank, directory of C, blank, file not found."

2362
02:06:19.790 --> 02:06:21.490
Oh, cause it made it a dot P-Y file.

2363
02:06:21.590 --> 02:06:22.270
Well, whatever, don't worry.

2364
02:06:22.290 --> 02:06:23.250
It did save it anyway.

2365
02:06:23.350 --> 02:06:26.690
Let's just not get too deep into that.

2366
02:06:26.750 --> 02:06:28.750
But there's ways to check if the file is actually created.

2367
02:06:29.070 --> 02:06:30.510
But you can go, by default,

2368
02:06:30.510 --> 02:06:34.490
it will save it in your users folder and your name.

2369
02:06:34.810 --> 02:06:37.790
So if your name is Liam,

2370
02:06:38.350 --> 02:06:41.130
it would be users forward slash or backslash Liam.

2371
02:06:41.870 --> 02:06:45.630
Then you have to look in that folder in whatever the Windows Navigator,

2372
02:06:45.750 --> 02:06:48.230
whatever they call the program where you look at the files and folders,

2373
02:06:48.330 --> 02:06:49.910
and you should see a file in there,

2374
02:06:50.210 --> 02:06:52.050
whatever.py, whatever you gave it.

2375
02:06:52.590 --> 02:06:54.690
Sorry.  Thanks for asking that because it's useful to

2376
02:06:54.690 --> 02:06:56.370
review and people like to save their sessions.

2377
02:06:57.030 --> 02:06:59.790
Now, I can share this with people if they ask for it,

2378
02:06:59.830 --> 02:07:01.350
so that's also good. I might have forgotten.

2379
02:07:03.370 --> 02:07:04.390
Anyone else have a question?

2380
02:07:04.650 --> 02:07:05.070
Yeah. Hi.

2381
02:07:05.190 --> 02:07:06.830
I have two questions.  This is Juan.

2382
02:07:07.490 --> 02:07:07.850
Hi, Juan.

2383
02:07:07.890 --> 02:07:10.430
Question one is a silly question,

2384
02:07:10.570 --> 02:07:13.990
but I noticed when you're using your IPython,

2385
02:07:14.230 --> 02:07:17.190
when you start entering multi-line input,

2386
02:07:18.370 --> 02:07:19.530
you hear a colon,

2387
02:07:19.810 --> 02:07:23.130
but in mine, it uses a dot, dot, dot ellipses.

2388
02:07:23.130 --> 02:07:27.370
Is there a reason that mine is different than yours?

2389
02:07:28.150 --> 02:07:31.970
There's a good question. Let me just see what I get just to confirm.

2390
02:07:32.230 --> 02:07:33.350
So if I make a dictionary.

2391
02:07:34.730 --> 02:07:35.290
Left braids.

2392
02:07:35.290 --> 02:07:38.370
It's really odd. I think visually.

2393
02:07:38.370 --> 02:07:39.270
Because I like the colon.

2394
02:07:40.450 --> 02:07:41.330
It's less verbose.

2395
02:07:41.330 --> 02:07:43.150
You like the colon.  Well, the thing is,

2396
02:07:43.170 --> 02:07:47.390
yours is accurate and mine is inaccurate because it's mine.

2397
02:07:47.530 --> 02:07:50.890
That's what it's actually putting on the screen is an ellipsis.

2398
02:07:50.890 --> 02:07:52.470
I can see with my little vision here.

2399
02:07:53.490 --> 02:07:57.850
Oh, so it's maybe NVDA reading ellipses as a colon.

2400
02:07:59.070 --> 02:08:01.270
I don't know how NVDA would read it.

2401
02:08:01.430 --> 02:08:03.510
I mean, NVDA does mess up output,

2402
02:08:03.730 --> 02:08:07.950
but I don't see it doing a reading as a colon.

2403
02:08:08.410 --> 02:08:10.130
I would say the possibilities,

2404
02:08:10.250 --> 02:08:12.810
it's order of likelihood are one,

2405
02:08:13.290 --> 02:08:16.650
that I'm using an older version of IPython,

2406
02:08:16.790 --> 02:08:20.390
which I know I am because I was too lazy to reinstall it,

2407
02:08:20.390 --> 02:08:21.730
but there was really no reason to do it.

2408
02:08:22.230 --> 02:08:25.390
And they fixed this, but this was a bug and they fixed it.

2409
02:08:25.490 --> 02:08:27.670
So that's a fairly likely possibility.

2410
02:08:28.710 --> 02:08:31.870
Two, so if I installed a new, I updated my version here,

2411
02:08:32.150 --> 02:08:34.490
which honestly I've had on this for years,

2412
02:08:35.070 --> 02:08:36.770
so it's probably kind of out of date.

2413
02:08:37.830 --> 02:08:39.950
Can I get version information about that big version?

2414
02:08:41.570 --> 02:08:45.190
I notice you're running Python 3.8 and I'm running 3.12.

2415
02:08:45.350 --> 02:08:47.410
You're probably on 3.12.

2416
02:08:47.510 --> 02:08:48.930
Yeah, so that's a lot of versions out of date.

2417
02:08:49.650 --> 02:08:52.210
So, you know, so I would say it might've,

2418
02:08:52.350 --> 02:08:53.510
there might've, they might've fixed,

2419
02:08:53.770 --> 02:08:55.470
that might be a bug that they fixed.

2420
02:08:55.610 --> 02:08:57.710
That seems fairly likely given how out of date mine is.

2421
02:08:58.270 --> 02:09:02.030
I would also say another possibility is I have magnified

2422
02:09:02.030 --> 02:09:05.490
or like I've made the font like 70 something,

2423
02:09:05.990 --> 02:09:07.890
which is kind of all source of a lot of bugs

2424
02:09:07.890 --> 02:09:11.370
with NVDA right now because, you know,

2425
02:09:11.370 --> 02:09:13.750
it's cutting things off, it's doing weird things like that.

2426
02:09:13.790 --> 02:09:16.270
So it could be a source of something like that.

2427
02:09:17.090 --> 02:09:19.490
And yeah, I could have a different NVDA setting,

2428
02:09:19.590 --> 02:09:21.730
but I think that's almost a less likely possibility

2429
02:09:21.730 --> 02:09:23.090
because it's so weird.

2430
02:09:23.690 --> 02:09:25.610
Okay, it's probably because, yeah,

2431
02:09:25.650 --> 02:09:27.130
your version is way older than mine.

2432
02:09:27.690 --> 02:09:29.950
Okay, my second question is something you kind of

2433
02:09:29.950 --> 02:09:32.090
very touched very lightly on,

2434
02:09:32.150 --> 02:09:35.750
like a single sentence last time, but I was just curious.

2435
02:09:37.750 --> 02:09:43.490
So the magic command per edit, so it opens Notepad.

2436
02:09:43.490 --> 02:09:46.170
Is there, do you know how, do you know how to change that?

2437
02:09:47.210 --> 02:09:48.870
Because it's opening Notepad.

2438
02:09:48.990 --> 02:09:51.650
It's kind of a little more like an office hours thing

2439
02:09:51.650 --> 02:09:53.390
because it's a multi-step process.

2440
02:09:53.730 --> 02:09:59.850
Yeah, but basically what we're gonna do is change a setting.

2441
02:10:00.790 --> 02:10:02.510
There's a functionality here,

2442
02:10:02.630 --> 02:10:04.110
a magic command to change settings

2443
02:10:05.670 --> 02:10:08.670
and we will use it to change the setting,

2444
02:10:09.850 --> 02:10:15.350
which will be the command line command for the node.

2445
02:10:15.550 --> 02:10:16.910
Probably you want, do you want VS code?

2446
02:10:17.050 --> 02:10:18.090
You probably want VS code, right?

2447
02:10:18.190 --> 02:10:19.170
Yeah, well, it's okay.

2448
02:10:19.250 --> 02:10:20.130
I don't need it exactly.

2449
02:10:20.310 --> 02:10:21.830
I just want to know, I just want to make sure

2450
02:10:21.830 --> 02:10:23.330
it's not like something I change in Windows.

2451
02:10:23.430 --> 02:10:26.510
If it's something I change in IPython,

2452
02:10:26.630 --> 02:10:27.610
or is it something that changes?

2453
02:10:28.130 --> 02:10:31.890
Yeah, you can change it in, yeah, I don't think it,

2454
02:10:32.030 --> 02:10:33.710
it may open the default text editor

2455
02:10:33.710 --> 02:10:34.830
for your operating system.

2456
02:10:35.210 --> 02:10:36.950
So if there's a way to change it in Windows,

2457
02:10:36.950 --> 02:10:38.210
that's worth trying.

2458
02:10:38.730 --> 02:10:40.510
But I do think it does require,

2459
02:10:40.710 --> 02:10:43.910
I suspect it requires a change of setting in,

2460
02:10:44.810 --> 02:10:48.390
or in either the command line or IPython.

2461
02:10:50.050 --> 02:10:51.430
But I will-

2462
02:10:51.430 --> 02:10:53.110
I can Google that, I can Google that.

2463
02:10:53.170 --> 02:10:54.770
Yeah, yeah, exactly.

2464
02:10:55.090 --> 02:10:55.730
But you know what?

2465
02:10:56.690 --> 02:10:58.410
It's something that might be useful for people.

2466
02:10:58.690 --> 02:11:00.450
So I might look it up and include it

2467
02:11:00.450 --> 02:11:02.550
in the resource that I'm creating here.

2468
02:11:02.950 --> 02:11:04.730
So people know to change it.

2469
02:11:04.870 --> 02:11:06.630
And it's useful, like if VS code opens

2470
02:11:06.630 --> 02:11:07.710
and then you can edit stuff

2471
02:11:07.710 --> 02:11:09.830
and use your full screen reader and everything,

2472
02:11:10.050 --> 02:11:11.610
save it, and then it runs it in there.

2473
02:11:11.710 --> 02:11:13.470
That's a really, kind of a nice workflow.

2474
02:11:16.170 --> 02:11:16.430
Yeah.

2475
02:11:17.390 --> 02:11:20.010
I mean, it was okay to use Notepad, but-

2476
02:11:20.010 --> 02:11:22.190
And Notepad stinks, you know, it's like-

2477
02:11:22.250 --> 02:11:25.350
I mean, for simple, like setting up structures,

2478
02:11:25.670 --> 02:11:27.270
like simple dictionaries, isn't a big deal,

2479
02:11:27.350 --> 02:11:30.390
but the auto-completion in VS code is way better.

2480
02:11:30.610 --> 02:11:33.030
And so it just makes coding a lot easier.

2481
02:11:33.930 --> 02:11:35.570
Notepad++ is also pretty good.

2482
02:11:35.910 --> 02:11:36.970
It is accessible.

2483
02:11:37.610 --> 02:11:38.590
So, cool.

2484
02:11:38.970 --> 02:11:39.130
Awesome.

2485
02:11:41.030 --> 02:11:41.750
That's Juan, right?

2486
02:11:42.010 --> 02:11:42.410
Thank you, Juan.

2487
02:11:42.710 --> 02:11:42.970
Yes.

2488
02:11:44.130 --> 02:11:45.650
Anyone else have a question, want to get on the mic?

2489
02:12:00.480 --> 02:12:02.340
Well, if that's all the mic-friendly questions,

2490
02:12:02.560 --> 02:12:04.260
feel free to jump in before I end here.

2491
02:12:04.340 --> 02:12:05.400
I guess we'll end the recording

2492
02:12:05.400 --> 02:12:06.980
and then I'll stick around for a little bit

2493
02:12:06.980 --> 02:12:07.500
if people want.
