"start","end","text"
"0","4560"," So let's go ahead and get started. Welcome all. I'm really excited to have you here for the"
"4560","13020"," second workshop in our non-visual data science workshop series.I am Patrick Smyth, and I'll"
"13020","17740"," say a little about myself in a minute, but once we get some of the procedural stuff out of the way,"
"19120","25800"," this is the second workshop in the series. It is a workshop on an intro to data science"
"25800","29920"," fundamentals with pandas, and we'll talk about what pandas is. We'll even talk a little about"
"29920","33720"," what data science is, though that's a little bit of an unsatisfying answer sometimes. "
"35040","38660"," I'd also like to introduce our helpers who are going to be in the chat."
"39500","43860"," We have with us Sarah Kane. Maybe, Sarah, you could say hi. "
"45160","49520"," Hi, my name is Sarah. I'll be one of the helpers today. I'll be teaching some of the tutorials"
"49520","58200"," later on. Thank you, my co-leader. Elizabeth, do you want to introduce yourself?"
"61040","65880"," Yeah, hi everyone. My name is Elizabeth, and I am a postdoc at the Institute of Astronomy"
"66460","71560"," in Cambridge. Today, I will try to answer your questions in the chat as quick as I can."
"72360","78220"," Excellent. I don't know if Alex is here yet. I am here."
"78820","83220"," Excellent. Let me give you permission.You want to go ahead and introduce yourself?"
"84100","89160"," Hi, I'm Alex. I'm a PhD student at the Institute of Astronomy with Sarah and Elizabeth."
"90820","94540"," I'm a Python man. I will help you with all Python things in the chat."
"95660","102460"," Thank you, Alex. We may also have joining us Stephen Zweibel, who is a"
"104300","109020"," Digital Scholarship Librarian at the Graduate Center, City University of New York here in New"
"109020","114700"," York. Hello. Steve, you're online. Yes, I'm here. Sorry. It's a snow day here."
"116680","120980"," Yeah, your children are home, so I understand how this is, but thank you. "
"122980","129400"," It's also possible we may have Paul Alexander Bloom and Monika Thieu, who are two psychologists"
"129400","134780"," and also teachers of R and Python joining us. You may see them in the chat as well."
"136080","141900"," Basically, the way the chat will work is if you have a question, place it in the chat. If you want"
"141900","147520"," to ask your question privately, you can use the private chat interface on Zoom to reach out to"
"147520","153620"," one of the helpers specifically. We also, I believe, are having our helpers. Their names"
"153620","160620"," should have helper in them. If that is the case, that will help you out if you want to send a"
"160620","165320"," private message. Just feel free to put most of your questions in the chat publicly, and a helper"
"165320","169880"," will either answer you either privately or publicly. They'll answer publicly if they think"
"169880","175540"," that the answer will help other people who are following along. I'd like to now really quickly"
"175540","188240"," share a link to the curriculum for this workshop. It is on a website called GitHub."
"189840","196640"," My recommendation is if you're using NVDA, GitHub tends to add a bunch of buttons and other"
"196640","203660"," information before you actually get to the curriculum part. I would navigate by heading"
"203660","210040"," to the heading one on the page. It may not be the first heading one. Navigate by heading or H1"
"210040","217540"," to get to the beginning on each page of the actual curriculum. We have our helpers."
"218580","233360"," Let's go ahead and do a little introduction to the topic here. I'll just say who I am. I'm"
"233360","243960"," background a little bit after the last one. I have retinitis pigmentosa, so it's a progressive"
"243960","252220"," eye condition. Over the last 15, 20 years, I've lost vision progressively, started outside it,"
"252700","259420"," and now I have about 2% vision remaining. Some useful vision, I think, would be the word for"
"259420","264800"," that. I used to be very low vision, very focused on magnification, high contrast,"
"265040","269400"," and all of those assistive technologies. I still occasionally use those in some circumstances,"
"269400","276380"," but now I'm more of a daily screen reader user. I also use Linux day to day. Sometimes,"
"276480","279620"," if you see me flailing around a little bit on Windows, then that gives some explanation."
"281080","288620"," I come out of the digital humanities, which is a field in the humanities where we use computers"
"288620","292300"," to answer traditional humanities questions, so things like natural language processing,"
"292980","299000"," if you want to use a more programmer term, to analyze large data sets. I also build websites"
"299000","305520"," and do other fun things like that. I started learning Python about 10 years ago, maybe a"
"305520","314260"," little more now, which makes me feel like time is really flying. I really felt when I learned Python"
"314260","321780"," that it really changed my perspective on using computers and empowering me to do things that I"
"321780","327020"," couldn't do before. I really also found that I enjoyed teaching programming to other people"
"327020","331460"," because I like to share that feeling of empowerment, for lack of a better word,"
"331560","336660"," to give you new capabilities. I really enjoy that part of my job."
"339500","347620"," I also want to thank NumFocus and the Pandas project. We'll talk about Pandas in a minute,"
"347720","355060"," for funding these workshops. A special thanks to Patrick Hoffler, who is a Pandas core developer,"
"355900","363240"," who really stood up and allowed us to submit this grant. Thank you, Patrick. "
"363240","368140"," All right. Let's just say really quickly, and we'll move on from this very briefly,"
"368240","370780"," because I don't think this is a very... In a way, it's not that useful a question,"
"370960","375040"," but we're moving now into the data science part of this workshop series. The question is,"
"375400","382060"," what is data science? What are we doing when we do data science? What are we talking about when"
"382060","387900"," we talk about data science? Somewhere, a little hazy, but somewhere in the 2000s,"
"388720","395500"," all the statisticians started calling themselves data scientists, and actually got probably a big"
"395500","402560"," pay bump in the process. Basically, that comes around a time when specialized programming tools"
"402560","410200"," emerged for working with data. It could be large, could be small, but often large data,"
"410620","417320"," and applying statistical methods, programming, other analytical methods to data."
"418000","423400"," Data science hasn't really been around that long. You can say it's a discipline where people apply"
"423400","429540"," programming, statistics, math, and other techniques to gain insights from data, I guess,"
"429600","435640"," would be the fancier definition from it. I will add one thing to that, which is that I think that"
"435640","440200"," there's a really important part of data science that is sometimes overlooked, which is that"
"440960","446680"," of a data scientist, it really gets a lot out of the context and understanding where data comes from,"
"446680","456180"," what happened to it along the way, and also making connections between things you know about"
"456180","461740"," the world, things about history, about business, about how people interact, different kinds of"
"461740","470560"," domains, applying that to an understanding of data. I come from the humanities, so I do think"
"470560","474620"," that the data has a little bit of a humanistic element that sometimes we don't talk that much"
"474620","481460"," about, but it's actually one of the key elements of being a good data scientist is that qualitative"
"481460","485480"," element as well as a quantitative element. Data scientists do very different things on a daily"
"485480","489100"," basis. Some data scientists are more like engineers, and they create what are called"
"489100","498680"," data pipelines, but basically flows from some kind of business process or other process that"
"498680","508040"," generates data into a format form and an application where you can analyze it. That's"
"508040","514340"," one thing you could be doing. Some data scientists are really communicators, and others are very"
"514340","520059"," mathematical. You might just work with models, which is basically a fancy way of saying"
"523039","531760"," simplifications of the world that allow you to answer questions about data and transform data"
"531760","536840"," into a more simplified form. There's lots of different types of jobs you can have as a data"
"536840","542460"," scientist and a lot of different ways, things you can call yourself within data science as well. "
"543500","549580"," Now, what are we going to be doing today? Today, we're going to be continuing to use"
"549580","556680"," Python, which we were introduced to last week. We'll continue to learn IPython, which is a"
"557500","564160"," specific way of interacting with Python through the command line. It's a fancy Python interpreter,"
"564440","568740"," basically a program that allows you to have a conversation with Python. It's a fancy version"
"568740","576540"," of that. We're doing all of that in our Anaconda distribution. Anaconda is the way that IPython"
"576540","582740"," comes to us by installing this Anaconda distribution, which is Python with a bunch of extra"
"582740","587820"," stuff included. I know that's a lot of names that all have Python and stuff in them, but"
"588980","593060"," we're going to continue to use all that tools, but we're going to be adding something, and that is"
"593060","599900"," the Pandas library. We learned last week that a library is basically a big pile of code that you"
"599900","606940"," can pull into your code, and the Python-specific term, the technical term for a library is a"
"606940","614620"," module, and we will be using the Pandas library, Pandas module. People always ask what Pandas"
"614620","619260"," stands for. It's more of a historical name. It's a cool name. It's a cute name. We all like pandas."
"619300","628320"," We all like bears. Maybe some of us don't, but I do. But the name basically is short for panel"
"628320","640300"," data, or panel datas, I guess, and panel data is a type of data related to a series of data"
"640300","647020"," snapshots in time, so another kind of connected to something that we call time series data. For"
"647020","651660"," example, stock market data is often time series data, and that's what Pandas was originally"
"651660","660220"," designed for, was specifically for time series, so data that is mapped over time, but it's now"
"660220","664220"," used for a much wider variety of things, so that's why I say it's a bit of a historical name."
"664820","669420"," It doesn't mean quite as much, and we work with a lot of things that aren't panel data in Pandas. "
"670800","677900"," Cool. So, let's kind of just jump in, and the first thing we're going to do is, you know,"
"677900","683640"," the end of the last workshop, we learned about importing libraries. We imported the random"
"683640","688920"," library, and we got a little work done with the random library, which allowed us to, you can do"
"688920","697760"," things like generate random numbers, pull random items out of a list. However, we now are going to"
"697760","702060"," import a new library, which is our Pandas library, so I'm going to start with sharing my screen,"
"704240","710600"," and it occurs to me, Sarah, if you wanted to, you know, back us up by recording locally,"
"711160","714600"," you know, if you want to ask for permission for that, that would be fine, too. We should be"
"714600","719560"," recording. Oh, yeah, so I'm trying to record through QuickTime player, because I'm worried"
"719560","725260"," that, yeah, that two Zoom recordings are going to clash with each other in the middle,"
"725760","728580"," so hopefully... No, no, it's not. If you're doing it one way, don't do it another way,"
"728780","732740"," then thank you. Yeah, yeah, yeah, so we'll hope for the best. Yeah, yeah, I think we're going to"
"732740","740640"," be good. All right, so let's go ahead and share that screen. I'm going to make sure I"
"742600","755330"," share the sound, which is the most important thing. Share sound and share. "
"756730","758070"," Screen. ""You have started screen share."""
"758130","761850"," Okay, that's my notes, and we are going to start by opening..."
"761850","763650"," ""Start window.Participants can now""..."
"767130","773330"," The... We're going to start by opening the Anaconda prompt, so that is the command line"
"773330","777070"," application that comes with Anaconda, and it has a few little extra things added to it,"
"777110","782350"," such as IPython, so let's start typing ""Anaconda. Anaconda prompt left""..."
"783590","787890"," It came up right away for me, but you may need to type a little more, so you want to type Anaconda"
"787890","795950"," space P, and then hit enter when that pops up. Remember, you don't want Anaconda Navigator. "
"796270","799810"," Okay, you want Anaconda prompt. All right. Now, once you're in the Anaconda prompt,"
"799910","806330"," and I will expand it, and I will also get rid of... I think I found a way to get rid of that"
"806330","815870"," little thing, so you can just have the whole screen be our command line environment, and also,"
"815870","823450"," you can hear in the background, I already have NVDA running with a little bit of a nicer voice,"
"823530","828990"," just like I switched to last week, okay? So, let's do... Start by... We're typing IPython. "
"829130","832330"," It's all lowercase to get into our IPython environment, just like we did last week."
"836030","844070"," IPython, I, and then the Python, like the large snake. ""Python 3.8.8 left..."""
"844550","850690"," Talking, but we hear the version is the first thing that we get when we start running this"
"850690","855550"," IPython process, and I am also... This is too much for me, so I'm going to first start by"
"855550","863630"," clearing the screen, which is to hold down the control and press L. Oh, and someone was asking"
"863630","868570"," that they don't hear anything when the screen clears, but I guess now that I'm thinking about"
"868570","875510"," it, I don't hear anything either. What I do hear is the prompt. So, that is the in, and then a"
"875510","880150"," number. So, we talked about that last week, but basically, that tells you, hey, we're ready to"
"880150","885210"," type. So, I probably won't do so much reviewing of that kind of work, but remember that the first"
"885210","891870"," workshop has a lot of detail on reviewing... We're typing stuff in, reviewing output,"
"892590","899270"," and parsing the data by listening. So, when we get output, then we want to make sure that we're"
"899270","904190"," listening for the right things. So, let's first start by importing Pandas. "
"905190","912830"," ""I-M-P-O-R-T, space. P-A-N-D-A-S, space."" And I don't seem to have word review on,"
"912890","915770"," so I'm going to try to turn that on. Speak typed words on. There we go."
"916370","926430"," ""I-M-P-O-R-T, import.""P-A-N-D-A-S, Pandas."" Okay, import Pandas. I did the space, just hear it."
"927850","931550"," Import Pandas. So, now we have Pandas imported. If you type Pandas by itself,"
"931730","938070"," you will get back, it'll just say this is a module, a module object.""P-A-N-D-A-S,"
"938250","942230"," out left bracket to right bracket, colon, less module Pandas from C colon backslash."""
"942230","947750"," Less module Pandas, that means the less than sign, and then it gives us some information on"
"947750","952190"," the object. So, when you get information on objects, they tend to be wrapped in a less"
"952190","956850"," than and a greater than sign. So, now we're going to be using this Pandas module pretty"
"956850","965270"," extensively today. So, let's get started by talking first about thinking about one-dimensional"
"965270","970650"," data and two-dimensional data, and then I'll show you how to create one and two-dimensional data"
"970650","978610"," in Pandas, okay? So, what is one-dimensional, what are dimensions in data? What is one-dimensional"
"978610","983670"," data, two-dimensional data, what other kinds of dimensional data, and then also zero-dimensional"
"983670","987650"," data, okay? It sounds fancy, but it's not really as complicated as it sounds. So,"
"988450","994710"," imagine you have a list, and I want to use as my example here something that is consistent. "
"996290","1005250"," So, let me make sure that the list is the same as it is in our code. So, I think ..."
"1005710","1011050"," Yeah, let's use 10, 5, and 8 since that's what we use in the code, okay? So,"
"1011130","1016370"," imagine you have a list that has three items, 10, the number 10, 5, the number 5, and 8,"
"1016430","1024450"," the number 8, okay? And you can sort of, in your mind, imagine this, okay? And I'm not going to"
"1024450","1029670"," use the word visualize here, right, because it's not visual, it's spatial. So, all the data stuff"
"1029670","1034410"," we're going to be doing today is not visual, except incidentally, because we're using this"
"1034410","1039190"," program that was designed by, you know, people who do things visually. It's spatial, okay? So,"
"1039290","1042530"," there's, you know, whether or not you're doing this visually, you have left, right, up, down,"
"1042630","1049050"," forward, and back, okay? Different dimensions, okay? So, in your mind, I'd like you to imagine"
"1049590","1055210"," that we have a line. So, we have a left item, a middle item, and a right item. And I don't know"
"1055210","1058610"," however it works in your mind. My mind works different from your mind, but imagine that,"
"1058670","1062430"," okay? You can use your hands or whatever if you want to. You've got your hand, your head,"
"1062470","1066870"," and your other hand. And imagine, now I've already forgotten the numbers, but they are"
"1067310","1073610"," 10, 5, and 8, okay? So, we have 10 on the left, 5 in the middle, and 8 on the right. "
"1074330","1080910"," Now, that basically is, you could draw a line, okay? And place each of those items on the line."
"1081890","1088330"," And that basically is one-dimensional data, okay? So, and the characteristic, the way you know it's"
"1088330","1094130"," one-dimensional data is that we can describe where something is in that line with a single number,"
"1094450","1098910"," okay? So, we could say, remember, we always start at counting and programming from zero."
"1099490","1105570"," Zero is the item on the left. One is the item in the middle, 10, 5, and 8. 10 is the item on"
"1105570","1109730"," the left. 5 is the item in the middle. 8 is the item on the right, okay? So, we think of that as"
"1109730","1112970"," like an address. We're going to use a fancier word in a minute, but you can think about,"
"1113210","1119770"," it's kind of the location or the address of the object, okay? And what we use in programming is,"
"1121170","1126070"," in this Panda specifically, we'll use this word index to describe the location of an object in"
"1126070","1133150"," a data set, okay? But in a one-dimensional data set, you can describe where something is just with"
"1133150","1137030"," one number, okay? It can be a big number, small number, whatever, but it's just one number,"
"1137490","1146310"," okay? So, let's create a, well, let's, I'll hold, I'll quickly just describe what two-dimensional"
"1146310","1151890"," data is. And then we'll, we're going to go back and work with one-dimensional data."
"1151890","1159350"," But two-dimensional data requires that you have two numbers describing where an item is in the"
"1159350","1166490"," data set. So, if we had a list, so, imagine we have two lists, and I won't do, I won't create"
"1166490","1169750"," this in Python because we're going to be working with this in a minute anyway. We'll talk about it"
"1169750","1176650"," again. But imagine in your mind now, you have a list, okay? Or a line like we did before. "
"1177230","1182870"," Now, imagine that instead of 10, 5, and 8, we now had each of those items be another list,"
"1182950","1188130"," each with three items, okay? So, we could, it doesn't matter what the items are, but imagine"
"1188130","1195690"," that it's three months. So, June, July, August is one of the items. Then we have numbers 10, 5,"
"1195730","1200550"," and 8. And then we have, say, another set of numbers, smaller numbers, 1, 2, and 1, okay?"
"1200930","1205530"," And we'll, we're going to create a data set like that in a minute. But we're, let's not talk about"
"1205530","1210030"," what those represent in a minute. We're, it's going to be a simple budget, basically. But now,"
"1210210","1215950"," we have data existing in two dimensions, okay? So, we have, you can imagine a line going from"
"1215950","1221710"," left to right. And now you can also imagine in that line, things are going up and down, okay?"
"1222050","1226030"," So, the first address tells you where it is in the left and the right. And that is, so,"
"1226130","1230670"," we could say zero, that's the first list. And then we give another number. We could say,"
"1230670","1236170"," then we have that first list is June, July, August. That zero item list is June, July,"
"1236230","1243610"," August. Then we could say one, that would be July, okay? So, we can now describe in this list of"
"1243610","1250810"," lists that we've created where, where items are. But now we need two numbers, okay? And that's what"
"1250810","1257650"," we call two-dimensional data. If you can describe where an item is in a data set with two numbers,"
"1257650","1261950"," it's two-dimensional data. And then there's also zeroth-dimensional data. It's not very"
"1261950","1268630"," useful to talk about. But any item that isn't a list or a sequence of items is one, is zero-dimensional"
"1268630","1277090"," data, okay? So, for example, if I create a string, like we did last week, quote, ""H-E-L-L-O,"""
"1277310","1286450"," hello. So, I created a string called hello, okay? Or with the text hello in it. And that"
"1286450","1290110"," is zero-dimensional data, because there's no dimensions to it. It's just a point in space,"
"1290170","1296070"," okay? It doesn't even mean anything to describe its location. Or you could pick an arbitrary"
"1296070","1300830"," number to describe its location, because it's not, it doesn't exist in space, okay? It doesn't"
"1300830","1306030"," have a spatial dimension, okay? And then the other, there's other kinds of dimensions that"
"1306030","1311590"," are a little more abstract. But basically, imagine, you know, we took our line and we"
"1311590","1318170"," added lists to it, right? Now, imagine if we took every item in those secondary lists,"
"1318330","1324210"," in the list of months and the two lists of numbers. So, imagine that we took those items,"
"1324210","1329110"," and then we replaced those with lists. And now we would have three-dimensional data, okay?"
"1329510","1337010"," And you could then, if you wanted to imagine it in your mind, you would maybe use forward"
"1337010","1340490"," and back. That's another dimension. Because in our physical world, we have three dimensions."
"1341370","1346130"," Then you could add more dimensions, because you could keep replacing items with lists. So,"
"1346190","1350370"," you can actually have an arbitrary number of dimensions, but after a point, it's not easy"
"1350370","1355250"," to map it onto our physical world. So, it becomes harder to imagine it in that three-dimensional"
"1355250","1361410"," space. But it is possible to have those, and they're actually very useful. And if you hear"
"1361410","1366850"," a lot about machine learning these days, and this is a gross oversimplification, but basically what"
"1366850","1371790"," all those models are, they're basically lists of lists of lists of lists. They're very complex."
"1371930","1378230"," If you look at a neural network, it's basically these complicated lists of lists of lists of"
"1378230","1382090"," lists, okay? That's a gross oversimplification, but it's functionally what they are, okay? So,"
"1382130","1386410"," they actually are very useful. We're not going to get into those n numbers. We're going to use"
"1386410","1390430"," one and two-dimensional data in this workshop series. So, let's get into it. I'm going to"
"1390430","1395010"," show you how to work first with one-dimensional data and then we'll move on to two-dimensional"
"1395010","1400410"," data where things get really fancy. But you'll notice we switch. We're not going to do"
"1400410","1405050"," one-dimensional data and move on. Once we learn about one-dimensional data, we're going to constantly"
"1405050","1410750"," be coming back to this information because we're constantly going to be taking our two-dimensional"
"1410750","1417270"," data and making it one-dimensional, okay? And pulling out a one-dimensional element from the"
"1417270","1423470"," two-dimensional data set, okay? So, that's how we work in PEMD. So, let's go ahead and create this"
"1424230","1427990"," list, which is going to be a budget list. And I want to use the same numbers. "
"1427990","1434410"," In left bracket, I search. Budget equals left bracket 10, 10, 5, 15, 15 right bracket."
"1435530","1440330"," Budget equals left bracket 10, 10, 5, 15, 15 right bracket. Okay. I just want to make"
"1440330","1447130"," sure things line up with the curriculum. Yeah. I just remember that last time you"
"1447130","1453270"," made it a friendlier voice and slowed it down. Oh, I thought this was the friendlier voice."
"1453470","1460350"," No, this is your normal voice.""NVDA menu, preferences, tool submenu,"
"1460450","1467010"," code factory submenu, help submenu H. Configuration profiles dialog. Programming. Recording. "
"1468170","1471590"," Nice line sounding left paren. Editing. Manual right paren."""
"1471670","1473970"," Let's try this and see if you hear a difference."
"1478770","1484970"," I think this is the nice voice. I think this is your normal one,"
"1485210","1488450"," or your preferred one. This is my preferred, so it's actually."
"1490910","1498330"," Okay. I'll slow it down for people. Yeah. That is slower than I do do it, but I guess I'm not."
"1498330","1513550"," Okay. I think it's audio, but I want to prefer a voice."
"1514930","1515430"," Yeah."
"1515590","1522750"," ""Audio output device, colon, combo box, Microsoft sound mapper, colab, audio ducking mode, colon,"
"1523170","1528130"," combo, volume of NVDA, volume of NVDA, okay, button, audio, audio, audio, audio,"
"1528310","1535050"," three of speech, two of 15, speech property page, change, voice, colon, combo, rate, colon,"
"1535430","1543150"," slider 60 alt plus 59, 54, 52, 50.""How's 50, do you think?"
"1544650","1546730"," Did I get to make it even slower? Let's do 48."
"1546730","1547270"," ""48."""
"1559970","1562330"," That sounds pretty slow to me. Is that good?"
"1564770","1569970"," Yeah. When you listen to robots all day, maybe your idea of what is a fast or slow voice gets"
"1569970","1574630"," a little scared. I do know people who listen faster than I do, but I wouldn't even say I'm"
"1574630","1581630"," that much of a speed demon. It is easier to follow along when the voice is a little slower,"
"1581710","1586530"," so thank you for that. Okay. So let's go ahead and create our budget. I think it was"
"1587210","1590410"," Emacs, budget equals left bracket 10, 10, 5, 15, 15 right bracket."
"1590450","1595650"," 10, 10, 5, 15, and 15. Sorry, that voice is going to be a little faster because that's"
"1595650","1600190"," a different program, and that's really just my own notes. So let's go ahead and create budget."
"1603230","1619270"," ""B-U-D-G-E-T, budget equals left bracket 10, 10, 5, 15, 15""."
"1619270","1626370"," I will review this. So it's going to be budget equals space open square bracket,"
"1627100","1639270"," and then write the numbers 10, 10, 5, 15, and 15. Okay. So budget equals"
"1640100","1647570"," in left bracket 5 right bracket. And you remember, you hear the in, and that basically means there's"
"1647570","1651250"," no output. It skipped the output. So when you assign a variable, you don't hear output. "
"1651250","1657630"," And we can get our budget back by typing budget by itself. That's a technique we use all the time."
"1657690","1666590"," ""out left bracket 5 right bracket colon left bracket 10, 10, 5, 15, 15."""
"1666810","1676170"," 10, 10, 5, 15, and 15. Okay. So that's our budget. Now, remember in regular Python,"
"1676170","1682330"," we can do things like use what's called slicing to pull out specific items. So basically,"
"1682470","1685290"," the syntax is this, and we're going to do similar things in this workshop."
"1686070","1694090"," Type the budget variable. ""B-U-D-G-E-T, budget."" And we can type open square bracket"
"1694090","1699210"," and then give it a number.""out left bracket 6 right bracket colon 10."""
"1699350","1704290"," 10. So 10 is our output. We asked for the first item. It was budget, open square bracket,"
"1704290","1709230"," 0, close square bracket. So Python gives some functionality with lists. "
"1709690","1713910"," And these are one-dimensional data types. Okay. Lists are one-dimensional data types. "
"1714430","1721870"," But what we're going to do is we're going to create a new data type, which is a it's going"
"1721870","1727970"," to be called a series. Okay. So the series is basically you can think of it as a really fancy"
"1727970","1734030"," list. Okay. That lets us do all sorts of things. So let's go ahead and load in our budget data"
"1734030","1741570"," type or our budget series. Okay. Now, I am going to use a very short variable name here,"
"1741950","1745050"," and I'll give an explanation. So far, I've tried to use very descriptive variable names. "
"1745290","1750830"," You don't see me doing X equals this, Y equals this, only very rarely. And I recommend keeping"
"1750830","1754030"," to that. But I'm going to use a short variable name here, and then I'm going to kind of tell"
"1754030","1762070"," you why I chose that. Okay. So I'm going to say S, like the letter S. S equals space."
"1762070","1770750"," And then we want to use pandas. Now, then do a dot."
"1775850","1782010"," Got a reaction there. And there's our dot. So now, so far, we have S space equals space"
"1782010","1789090"," pandas dot. And now, let's you type capital S series, and I'll explain that part too."
"1792190","1798230"," And you heard that little blink, you know, that little beep. That's how I have it set to get the"
"1798230","1802350"," capital letters. So when you hear that little beep, you're hearing capitals. Then open parenthesis,"
"1802990","1811050"," and then give our budget variable inside the parenthesis.So B, U, D. And I'm going to let"
"1813490","1816470"," IPython complete it for us by pressing tab. Remember, that's something we learned in the"
"1816470","1824310"," first one. So I type B, U, D. Yes. So it added B, U, D. It added G, E, T for me."
"1825350","1832450"," And then I'm closing the parenthesis. So what I have here is S space equals space pandas,"
"1832450","1844270"," the library, dot, capital S, series, S, E, R, I, E, S. Okay. Open parenthesis,"
"1844790","1853050"," and then our variable name, budget, close parenthesis. Okay. It takes a minute. "
"1853830","1863470"," Computers. Okay. So it assigned the variable, so we don't get any output. "
"1864470","1869830"," But we can get an idea of what the series representation is. Remember, the representation"
"1869830","1877030"," is a fancy word for what the output is like. Okay. We call that a representation."
"1877790","1882040"," So when we type a variable by itself, what we're getting back is the representation. So we're"
"1882040","1886160"," going to take a look at this representation of the series in a second. First, let me just explain"
"1886160","1892800"," a few little things. So why did we use a short variable name? This is another unsatisfying"
"1892800","1900600"," data science-y answer. There is a convention, an informal convention in data science and Python"
"1901200","1906620"," that there's certain variable names that are used by conventions. So if you only have one series,"
"1907180","1912860"," people often call it S. Okay. And there's another convention that's similar to that"
"1912860","1916480"," with data frames, which we'll talk about in a minute, but we will cross that bridge when we"
"1916480","1922380"," come to it. There's also a convention to shorten many of the library names. So often you'll see"
"1922380","1929960"," pandas called, if you follow a tutorial, you'll see pandas being called PD. Okay. So there's a"
"1929960","1933940"," way to shorten the library name, but I think it confuses the issue a little bit. So we're just"
"1933940","1938500"," going to use the full pandas name. But if you see PD in a tutorial, they're talking about pandas."
"1938760","1944320"," Okay. These are data science conventions. I didn't make them up. I would also say anytime"
"1944320","1948880"," you have more than one series, go ahead and use a descriptive name, because once you start doing"
"1948880","1955840"," S1, S2, S3, then you're going to kind of get yourself confused. Okay. So, but I want you to"
"1955840","1960540"," know about this convention, so I'm going to use it. All right. So the other thing I want to explain"
"1960540","1966020"," is why is the series in this line up here capitalized? And the short version of that is"
"1966720","1972980"," that it is an object that we're using in Python, and the technical word would be it's a class that"
"1972980","1977000"," we're importing. We're using the series class, which we're not going to get into. But basically"
"1977600","1982220"," it's not a function that we're importing there. It's another kind of object that we're"
"1982220","1988600"," importing from pandas library. You can basically just figure, hey, you know, it's pretty much the"
"1988600","1995560"," function for now. Later you might learn why the class is and what these kinds of objects and"
"1995560","2002140"," stuff are for now. Just think of it as a way to make a series object. It's almost like a little"
"2002140","2006340"," factory. That's the short way of thinking about a class. It's a prototype for making other objects"
"2006340","2013880"," with. Okay. So S equals pandas.series, and we give it our budget, pass the budget in, and now we"
"2013880","2020120"," have our series object. So let's type S by itself. Press enter. S in left bracket, eight right"
"2020120","2034720"," ""bracket, colon, S. Out left bracket, eight right bracket, colon.Zero ten. One ten. Two five.Three"
"2034720","2046380"," fifteen. Four fifteen. dtype colon.In left bracket, nine right bracket."" I kind of like that"
"2046380","2052179"," that was a bit slower, because it can be difficult to parse some of this output sometimes, and when"
"2052179","2056139"," you're hearing it for the first time, it's confusing. But what you heard was zero ten,"
"2056440","2062360"," then a pause for a new line, one ten, pause for a new line, two five, pause for a new line,"
"2063159","2068199"," three fifteen, pause for a new line, four fifteen, pause for a new line. And then the last line"
"2068199","2074280"," said D type. It said it some weird way. It was like D type or something. But it said D type for"
"2074280","2080300"," data type, and then it said int64. So that's telling us the data that we have in the series is"
"2080300","2084659"," basically it's saying it's integers. Okay. And this is the format of a series representation"
"2085219","2093400"," that you have two columns of numbers, one on the left spatially, one on the right spatially."
"2093659","2099720"," The left column, let's talk about the right column first. The right column are the values,"
"2099880","2105780"," and that's the technical term. They're the values that we had in the list. Okay. And value is a"
"2105780","2110940"," word for the actual data. Okay. So when you're distinguishing the actual data from something"
"2110940","2116980"," else, like, for example, a label you're putting on the data or a variable name or something like"
"2116980","2123040"," that, then we say value to mean the actual data. And in this case, the actual data is the stuff"
"2123040","2128760"," that we put in budget. Okay. So on the right column, so the second number in each line,"
"2128840","2136340"," when you're hearing it, you know, line by line, is the value. The left number is the index,"
"2136340","2143980"," and the index is basically it's a label for each row of the data. Okay. By default,"
"2144300","2151100"," the label or the index, label is not the technical term, but it's an accurate way of describing it."
"2151340","2158780"," The index on the left is a number that, an incrementing number from zero up to some other"
"2158780","2164000"," number. Okay. So it's basically just a, it's the same as slicing. When we extract something from"
"2164000","2168200"," the list, it starts at zero, goes to one, two, three, four, and so on until the end of the data set. "
"2168740","2174080"," Okay. That's the default index, but we're actually going to work with that in a minute."
"2176340","2183260"," Okay. Anything else to know about this representation? And, oh, the other thing I"
"2183260","2187960"," wanted to say is that what we call that in programming, when a number just increments"
"2187960","2192340"," like that, or we want to create something like that, we call that a range. Okay. So if I say,"
"2192340","2197180"," oh, it's a range, I just mean it's numbers going up. Okay. And there are fancier ranges where"
"2197180","2201520"," numbers go up by two or something like that, but mostly they go up by one. Okay. So, and we'll,"
"2201680","2208500"," we'll return to that later. Okay. So it's a range, the index is a range from zero to four,"
"2208580","2214400"," and the other, the right column is our actual values. Okay. So now we actually get into some"
"2214400","2219220"," pretty cool stuff here. This is actually pretty neat stuff. So I've kind of explained a lot of,"
"2219220","2226680"," you know, procedural stuff, but now let's do some cool stuff. So let's start by doing S,"
"2226800","2233020"," and we're going to use a method on the, this series object that we have. So S dot. "
"2234920","2243040"," It takes a while for it to say dot. S dot. And let's use the mean method, M-E-A-N."
"2244780","2247100"," ""M-E-A-N."" Open parenthesis, close parenthesis."
"2248880","2250640"," Mean. Right parenthesis."
"2250640","2255300"," Skip saying the left parenthesis there, but it's S dot mean, left parenthesis,"
"2255420","2261100"," right parenthesis. We're not putting anything in there. Usually when you don't pass anything"
"2261100","2265860"," into a method like that, it's going to operate on the, the object that the method is contained,"
"2266140","2273580"," contained inside. So if we say S dot mean and run that, then it's going to operate on S probably."
"2273580","2276720"," Not all of us, but mostly, but usually. Okay. So let's run that."
"2278180","2282420"," ""Out left bracket, nine right bracket, colon 11.0."""
"2283000","2286840"," So what was the mean? Maybe you remember from school, maybe you were mathematical,"
"2287080","2291540"," so this is obvious to you. The mean is the average. Okay. The average is you take all"
"2291540","2295200"," the numbers, the sum of all the numbers, you sum them all up, you add all the numbers together,"
"2295260","2300220"," and then you divide by the number of numbers or the, you know, so in this case,"
"2300740","2309760"," you add up, you know, 10, 10, that's 20, 25, 15 and 15 is 30.That's 55. And then we divide by"
"2309760","2313980"," five, we get 11. Okay. That's the average. And the average is a very useful number."
"2314160","2321160"," We'll be using this a lot. Why isn't it S dot average? Well, it's just, that's just a decision"
"2321160","2324960"," they made when they created this library. Okay. Remember all of this stuff is created by people. "
"2325240","2328500"," So they were made just different kinds of decisions. Sometimes they changed those"
"2328500","2334520"," decisions and then the language changed. So hopefully not too often, but so that's,"
"2334880","2342740"," so that is one method that we have inside our series object and it allows us to get the mean"
"2342740","2346500"," of all the items in there. And so let's do a couple of others that are along these same lines."
"2346620","2355200"," So let's do S dot median. ""S S M E D I A N"" dot median, open parenthesis, close parenthesis."
"2355680","2360920"," I'm going to type a little faster here. Just S dot median, open parenthesis, close parenthesis."
"2361220","2370920"," 10.0. Okay. So the median is the middlemost number. So if you sort all the items"
"2372280","2377040"," from least to greatest, and then you pick the middlest item, it would be 10. Okay. If there's"
"2377040","2381340"," an even number of items, then you'll get the average of the two middlemost items. Okay. So"
"2381340","2386700"," if we had six items, maybe we would have got the average of the two items in the middle. Okay. Now"
"2386700","2391500"," this is not that intuitive, right? Because our list is 10, 10, 5, 15, 15. You're like,"
"2391560","2398180"," oh, it's in the middle of number five. No, it sorts first. And in fact, there's also a very"
"2398180","2406040"," useful method to sort our values. So let's do S dot S S dot, it takes a while to do that,"
"2406040","2416340"," sort underscore values. And I'm going to try to fill it in with tab."
"2418840","2427280"," So it's S dot sort underscore values. Okay. And I do encourage you to use that tab."
"2427700","2431740"," And it does take a while for it to finish it, filling it in. But what it does, it gives you"
"2431740","2436300"," some peace of mind that you're not going to do a typo. You type a little in, and if it fills it in"
"2436300","2441160"," for you, then probably you're on the right track. Okay. So I do recommend using that tab a lot. So"
"2441160","2451150"," it's S dot sort underscore values, open parenthesis, closed parenthesis. And sometimes it gets"
"2451150","2472450"," that. I'm going to stop it and explain what we're hearing. So we're getting our series,"
"2472650","2479530"," but now the items have been sorted into a new order. And it kept the old index, which is the"
"2479530","2485410"," range from zero to four. And now, you know, the first item used to was the third item, it's two,"
"2486490","2491290"," is five. So five was the lowest, it gets moved to be to the beginning item. Okay. So the index"
"2491290","2495890"," tends to stay the same when we run things like this. Okay. So we kind of get the original position"
"2495890","2501070"," of these items rather than the new position. Okay. So the index doesn't automatically update."
"2501070","2508630"," That's actually usually good. And then now we have a series, it goes from five, 10, 10,"
"2509770","2513350"," 15, 15. Okay. So it's sorted from least to greatest. That's what it does by default,"
"2513470","2518990"," least to greatest. Now, if you kind of don't like how Pandas is printing so much out to us,"
"2519350","2524690"," we can also do S dot values and only get the values. We don't hear the index. Now,"
"2524750","2529030"," the index is often useful to hear, but sometimes it's not. So we can just do S dot values."
"2529030","2538690"," S dot values, no parentheses. ""Out left bracket, 12 right bracket, colon,"
"2539230","2547530"," array left, left bracket, 10, 10, 5, 15, 15.""So we just got the values from the original"
"2547530","2551890"," list, not the sorted. You'll notice that that didn't update our variable when we sorted the"
"2551890","2556050"," variable. We would have to overwrite the variable if we wanted to update the variable. Okay. That's"
"2556050","2556670"," It's usually good."
"2558610","2561750"," But so the values is pretty useful. "
"2561890","2563090"," And what did it return back to us?"
"2563130","2564350"," It said it returned an array."
"2565310","2567890"," Basically, a lot of pandas will return"
"2567890","2569830"," things that look like lists."
"2570250","2571730"," They look like lists. "
"2571870","2572970"," They quack like lists."
"2573090","2574090"," They walk like lists."
"2574990","2576690"," They smell like lists. "
"2577630","2578850"," They sound like lists."
"2578950","2580250"," But they are not lists, OK?"
"2580570","2582690"," And in fact, there's a word for that in Python."
"2582790","2585250"," It's called duck typing, because it quacks like a duck"
"2585250","2586030"," and walks like a duck. "
"2586130","2586730"," It is a duck."
"2588490","2591970"," So instead of saying list, I will say a list-like object."
"2592370","2595070"," And that means it's an object that basically,"
"2595230","2597270"," for all intents and purposes, lets you do the same things"
"2597270","2599030"," with it that you could do with a list, OK?"
"2599830","2601050"," In most cases, that's true. "
"2601090","2602730"," In some edge cases, it might not be true."
"2602850","2605050"," In most things, you'll be able to do with it, OK?"
"2605490","2606850"," So I'll say a list-like object."
"2607350","2609490"," And then there's a bunch of them that we'll work with. "
"2609530","2611890"," But basically, you can think of them for now as lists."
"2611950","2614050"," But remember, they're not technically lists."
"2614050","2616130"," I just don't want to tell you anything that's not true, OK?"
"2616530","2619430"," So in this case, it's an array, which is a list-like object. "
"2619950","2622450"," And it gives us our values that we have."
"2622490","2624030"," So it skips the index, OK?"
"2624050","2625750"," So that's pretty useful if we want to just know"
"2625750","2626490"," what the values are."
"2627010","2628970"," Let's run through a couple of extra cool ones. "
"2629170","2630310"," I'm not going to dwell on these."
"2631070","2631790"," s.min."
"2635450","2637990"," s.min, open parenthesis, close parenthesis."
"2638270","2641830"," ""Out left bracket, 13 right bracket, colon, 5."""
"2641890","2643210"," 5, that gave the minimum value. "
"2643210","2644610"," s.max."
"2645650","2649490"," ""Right, out left bracket, 14 right bracket, colon, 15."""
"2649530","2651450"," 15 gave the max value."
"2652190","2653170"," What else is useful?"
"2653470","2655470"," s.std."
"2655670","2656390"," Is that what you're thinking?"
"2656550","2662490"," ""Right, in left, out left bracket, 15 right bracket, colon, 4.1833."""
"2662610","2665050"," The standard deviation, that's std. "
"2665170","2667790"," s.std, open parenthesis, close parenthesis."
"2667930","2669590"," This is maybe one you haven't heard of."
"2669910","2670490"," Maybe you have. "
"2670970","2674610"," It's a measure of the variability of the data."
"2674950","2678270"," So it tells you basically how spread out or distributed the data is."
"2678350","2681910"," If the data is clustered around the mean,"
"2682550","2687010"," then it will have a low standard deviation. "
"2687430","2691470"," If there's a lot of outliers or a lot of the data"
"2691470","2695170"," is away from the mean, then you're going to get a high standard deviation."
"2695250","2697750"," It's actually a pretty useful number once you learn"
"2697750","2699830"," to interpret it a little bit."
"2700690","2702610"," And then there's others. "
"2702770","2703630"," There's s.count."
"2705630","2709490"," ""Out left bracket, 16 right bracket, colon, 5."""
"2709510","2709930"," 5."
"2710130","2714210"," But we might throw a few more at you over the course of this."
"2714850","2718570"," But basically, if there's anything you would kind of conventionally"
"2718570","2720810"," do with a list of numbers, you can sum things."
"2720910","2722810"," s.sum is provided to you. "
"2722850","2724650"," So there's a lot of methods here."
"2724790","2726670"," s.sum."
"2726670","2731450"," ""Right out left bracket, 17 right bracket, colon, 55."""
"2731610","2733610"," 55 is the sum of all the items in the list. "
"2733690","2734850"," So there's a lot here."
"2736150","2737430"," But we're going to move on."
"2737710","2741530"," But remember that there's just a lot provided to you as methods in here. "
"2742190","2744430"," And remember, we had s.count here."
"2744490","2745590"," But we can also use len."
"2745990","2748270"," Remember, we had len also works on our series. "
"2748530","2750290"," L-E-N, open parenthesis, close parenthesis."
"2750730","2754530"," Or sorry, L-E-N, open parenthesis, s, close parenthesis."
"2754530","2761250"," L-E-N, len, s, ""out left bracket, 18 right bracket, colon, 5."""
"2761290","2763870"," And that will also work on those list-like objects that"
"2763870","2766850"," might not necessarily have a count method inside them. "
"2767390","2768850"," Len will work on those as well."
"2768930","2771410"," So like our s.values, it will also work on those."
"2774130","2778850"," So what I want to do now is we're going to keep our budget variable around. "
"2779390","2782010"," And what we're going to do is we're going to think a little bit"
"2782010","2785990"," about two-dimensional objects."
"2786490","2788170"," Before we move on, I just want to double check"
"2788170","2790470"," that it's not anything I wanted to show you that we're moving on."
"2791830","2794370"," So let's go to other. "
"2795370","2797630"," ..."
"2797830","2799590"," ..."
"2799790","2800790"," ..."
"2800910","2801110"," We did that."
"2801210","2801730"," ..."
"2802530","2803590"," ..."
"2803910","2806050"," ..."
"2806390","2806990"," ..."
"2807210","2807570"," Describe. "
"2807750","2808230"," ..."
"2808650","2809250"," ..."
"2810190","2811390"," Describe is one I almost skipped."
"2811390","2812710"," Because I don't personally use it."
"2812750","2814130"," But I want to use it to illustrate a point. "
"2814790","2817010"," So let's learn one more, and then we'll move on."
"2817150","2830850"," So it's s.describe, ""d-e-s-c-r-i-b-e,"" open"
"2830850","2832190"," parenthesis, close parenthesis."
"2832410","2833930"," And now it's going to give us a lot of output. "
"2834090","2834990"," Let's listen to some of it."
"2834990","2863610"," ""count 5.0000 mean 11.0000 std 4.1833 min 5.0000 25% 10.0000 50% 10.0000 75% 15.0000"
"2865350","2867790"," max 15.0000"
"2869410","2876450"," type colon float 64 dtype float 64 in left bracket 20 right dtype cortana window"""
"2877770","2879450"," dtype float 64."
"2880270","2883610"," So that means these are floating point numbers in this. "
"2884350","2885450"," What is all this?"
"2885570","2888110"," Now I kind of let that all run."
"2888190","2891950"," So you'd hear all of it to kind of make a point, which is that."
"2891950","2898210"," So a lot of times the functions like this or methods rather like this that print out"
"2898210","2904430"," a whole lot of information are pretty widely used by sighted data scientists, especially"
"2904430","2907530"," when they're starting out, they're doing what's called exploratory data analysis. "
"2908010","2909870"," And you don't even know the questions that you're asking."
"2910330","2914030"," You might just say, hey, print out all the normal statistical things."
"2914610","2918490"," So describe prints out the standard deviation, the mean, the median, the count. "
"2919070","2922550"," And then it also the 25th and 75th percentiles."
"2923110","2929090"," That's kind of a it's basically it means if you divided it, the data set in half, the"
"2929090","2932350"," first half, the median of the first half would be the 25th percentile."
"2932670","2935410"," The median of the second half would be the 75th percentile. "
"2935510","2940450"," And another way of saying that is it would be the item closest to the quarter and the"
"2940450","2943010"," 75th percent mark in the data set."
"2943010","2951890"," OK, so these kinds of functions are commonly used by sighted data scientists, and we can"
"2951890","2955670"," use them to especially if we're preparing something for sighted people to use."
"2955990","2961890"," But in my experience, and I also my recommendation is that you learn the specific ones and you"
"2961890","2963330"," ask for more specific information. "
"2963830","2964350"," Why is that?"
"2964390","2971010"," Because the answer is, do you really want to wait for all of all of this stuff to print"
"2971010","2973710"," out when you just maybe want one or two of these things?"
"2973810","2978470"," It's actually faster for you to print out each one individually, probably, and to listen"
"2978470","2981210"," to that, because a bunch of these, you're almost certainly not going to want all of"
"2981210","2981710"," them every time."
"2983130","2986970"," When I teach sighted students, they ask me, why don't we always use describe?"
"2987450","2989010"," Because it prints out so much information."
"2989490","2991890"," And my answer is describe is not that useful. "
"2992070","2995730"," If you say we're going to do something with the mean, you want to do something with the"
"2995730","2998050"," median, which you often do want to do."
"2998410","3000310"," Also, it's just a lot of information, you know."
"3000310","3004450"," If you're preparing something for someone else, you may just want to be like, hey, what's"
"3004450","3004850"," the mean?"
"3004990","3006850"," And your intent is more obvious. "
"3007390","3008770"," That's what I say to my sighted students."
"3008950","3012450"," And for you guys, I say, you might say, well, why would we use describe?"
"3012810","3015750"," And my answer is, well, sometimes you're going to be working with sighted people, and"
"3015750","3019110"," sometimes you're going to be preparing something like an exploratory data analysis that you"
"3019110","3021190"," know other people are going to read, so you'd want to use it."
"3021250","3024930"," But I would say generally for your own use, we're not going to want to use stuff like"
"3024930","3025230"," this. "
"3025590","3029850"," And we're also not going, we'll talk more about this, but we're also not really going"
"3029850","3032190"," to use those big, long representations that much."
"3032370","3036010"," You need to know what they're like, but we're not going to use them as much."
"3036090","3038770"," Once you're a little more experienced, once I teach you a few more things, you're not"
"3038770","3040110"," going to use that long stuff as much. "
"3040190","3046190"," We're going to get small amounts of information back, very focused, which is good for screen"
"3046190","3048510"," reader users who don't want to hear so much stuff, okay?"
"3049730","3052030"," Okay, so that was the point I wanted to make with describe."
"3052710","3056310"," Okay, moving on now, we're going to work on making our two-dimensional data, okay?"
"3057750","3064850"," One thing we touched on here, and please, if there are questions that are coming up"
"3064850","3069570"," a lot in the chat, maybe one of the helpers could kind of get on and kind of filter it"
"3069570","3069910"," up to me."
"3070270","3072550"," Anything like that, this is probably a good point for that. "
"3074290","3078810"," I think it seems like people are following along pretty well, though again, a reminder"
"3078810","3082730"," to everyone that if you do have questions, don't hesitate to pop them in the chat."
"3082730","3089250"," One thing we did discuss briefly is that these, for instance, this s.sortValues won't"
"3089250","3093010"," actually change the order of your series."
"3093450","3096330"," So don't worry, you're not messing around with your series. "
"3096810","3100210"," You can save a new variable as s.sortValues."
"3100310","3105190"," So for instance, s.sorted equals s.sortValues, and that'll save it saved."
"3105510","3110590"," I think there's also a way to put in place equals true, and that will overwrite your"
"3110590","3112790"," original variable for the series."
"3113010","3118070"," But all that, that's a little bit of a tangent to say, not to worry, you're not changing"
"3118070","3120450"," anything here just by printing these things out. "
"3123530","3124170"," Thank you so much, Sarah."
"3125150","3129610"," Okay, and if people have other questions, drop them in the chat, and if people are having"
"3129610","3131210"," the same question, I can also answer."
"3131290","3137010"," Or if it's an involved answer, just let me know, helpers, and I'll explain on the mic. "
"3137790","3141170"," So let's talk about, let's work toward creating our two-dimensional dataset."
"3141170","3146510"," First, we're going to spend just a little time on this idea of labeling data."
"3146630","3149010"," That's not a technical term, it's just a descriptive term. "
"3149390","3152750"," Basically, giving names to things is a very common thing in programming, okay?"
"3153790","3156270"," And the index is one way we did that."
"3156670","3162530"," So now we're going to have to learn one other way to do that, and that is, it's what's"
"3162530","3163650"," called a key, okay?"
"3163730","3166050"," And a key is a way you can look up some data."
"3166850","3169910"," So since we're moving on to a new section, I'm going to clear the screen, Control-L. "
"3172050","3175670"," We already have 19 inputs, so that's pretty cool."
"3177070","3184310"," And then let's do, I'm going to explain a new datatype to you, but this datatype is"
"3184310","3186330"," kind of just a stepping stone, okay?"
"3187470","3190830"," And this datatype is called a dictionary, okay?"
"3192850","3198430"," And basically, I'm going to show you the dictionary, but for the interest of time, if"
"3198430","3203110"," you think you can go ahead and put it in, put it in, but we're going to do another one"
"3203110","3203690"," right after."
"3203810","3207870"," So you may just want to sit back and actively listen, and then you'll have the practice"
"3207870","3211430"," to make the dictionary in the next section, okay?"
"3211550","3212750"," Just for the interest of time. "
"3216450","3219510"," So what we're going to do is we're going to create a little phone book, okay?"
"3219610","3225630"," And if you remember, this makes me feel very old, but many, many years ago when I was a"
"3226030","3230850"," There was such a thing as a phone book, and it was a big, thick book that you could use"
"3230850","3235730"," to put down a whole lot of them to stand and reach a high shelf or something, which"
"3235730","3239070"," actually probably made it the most useful, but you could also use it to look up people's"
"3239070","3239550"," phone numbers."
"3240810","3246630"," And it would basically be their name, and then you would have, it would be their name"
"3246630","3250790"," on one column, and then on the other side, it would be their phone number, okay?"
"3250870","3254190"," And you could use their name to look up their phone number, because the names were all in"
"3254190","3255410"," alphabetical order, okay?"
"3255630","3259010"," So what we're going to do is we're going to create a phone book, because that's essentially"
"3259010","3261050"," what this thing I'm going to show you is, this dictionary."
"3261630","3269070"," It's a way to put, it's a way to contain data so it can be easily looked up, okay?"
"3269190","3275450"," So you have, and what it consists of is, it's basically like, imagine it's kind of like"
"3275450","3281670"," a list, so it's one-dimensional data, but each item has its own name, okay?"
"3281670","3287150"," And that name is called a key, and we can use the key to look up what the value, which"
"3287150","3287670"," is the data. "
"3287810","3293790"," So the key is the name, the value is the data, and we call those key-value pairs, okay?"
"3294070","3297430"," So we're going to, I'm going to create a phone book, and then I'm going to look something"
"3297430","3300570"," up in it, but you can decide if you want to follow along, go for it."
"3300630","3304850"," I'm going to do it kind of quickly to explain, and then we're actually going to create our"
"3304850","3308510"," own dictionary in the next section, and you'll need to create that dictionary, so up to you"
"3308510","3309770"," if you want to create the phone book, okay?"
"3310770","3312530"," I'm just pressing delete a bunch of times."
"3312710","3315570"," So I'm going to type phone underscore book. "
"3317290","3326410"," ""P-H-O-N-E,"" phone, that's our variable name, space, book, equals, space, equals, and now"
"3326410","3332670"," we're going to use a curly brace, which is a, if you're using, we're doing, using square"
"3332670","3333290"," brackets a lot."
"3333450","3338250"," If you hold, if on an English keyboard, if you hold down shift and you press the left"
"3338250","3345350"," square bracket, it'll create a curly brace, and it says left brace, so it's a new kind"
"3345350","3346870"," of syntactic structure, okay?"
"3347970","3354690"," Now, you can, once you start a brace, you're allowed to create your own new lines, okay?"
"3354830","3356650"," And sometimes that can help you keep track of things."
"3357250","3359990"," So I'm going to hit enter, but you don't have to do this. "
"3360230","3363330"," I'm going to hit enter, and then I'm going to add my first key-value pair."
"3365050","3367490"," Okay, I hit enter just for my own sanity."
"3367490","3377890"," And then I'm going to do quote, I'm going to say my name, Patrick, and this is going"
"3377890","3378970"," to be my phone number, okay?"
"3380910","3384730"," ""Quote,"" so that's quote, Patrick, quote, and then that's the key."
"3384890","3386670"," So that's what I'm going to use to look up this data."
"3387090","3393770"," Then I do a colon, and the colon is, it's kind of in the middle of the middle row on"
"3393770","3394150"," the keyboard."
"3394250","3398850"," If you go all the way to the right on the letters in the middle on the English keyboard,"
"3398850","3408090"," it's the first special character to the right of the middle row that has ASDF on it. "
"3408610","3410710"," And it's, you hold down shift to access it."
"3410810","3411370"," That's colon."
"3413050","3414990"," And then I'm going to do another double quote. "
"3415770","3416130"," Quote."
"3416590","3417770"," And then I'm, oh, actually, you know what?"
"3417770","3418530"," I'll make these integers."
"3418730","3421790"," So I'm just going to say my phone number, which is, of course, and you guys all know"
"3421790","3429190"," my phone number is 999-999-9999."
"3429650","3431490"," Now, you guys can call me anytime."
"3432250","3438270"," Patrick and my phone number is 999-999-9999."
"3438910","3439270"," Colon. "
"3439750","3442950"," And then I did a comma and I hit enter again."
"3443570","3448590"," So that, so the phone book is, it's phonebook equals Curly Brace."
"3448590","3450750"," And then I made a new line just for my own sanity. "
"3450850","3451730"," You don't have to do that."
"3452530","3456290"," Then I have a string, Patrick, colon, and then"
"3456290","3457730"," an integer, which is our value."
"3457930","3459630"," That's the actual data we're storing. "
"3461720","3463600"," 999-999-9999."
"3463880","3464980"," And then I do a comma."
"3465260","3466880"," And now we're doing another key value pair. "
"3467460","3469240"," So the pairs are separated by commas."
"3469320","3471320"," And within the pair, you have a colon"
"3471320","3472900"," to separate the key and the value."
"3474080","3478280"," Now we're going to do Sarah, my co-instructor. "
"3478280","3484680"," Quote, ""S-A-R-A-H,"" Sarah, colon, space."
"3484680","3487620"," So Sarah, as a string, quote, Sarah, quote, colon."
"3488080","3489780"," And of course, we all know Sarah's phone number,"
"3489860","3500460"," which is 111-111-1111"
"3500480","3503740"," Of course, you have to remember the plus 44 for the UK."
"3504420","3506560"," Yeah, otherwise you're not going to get through to her."
"3506560","3507180"," OK. "
"3508520","3510840"," Now, I'm not sure, Sarah, make sure you"
"3510840","3512300"," call in the right time frame."
"3512620","3514520"," So it's five hours forward there, too, as well."
"3515120","3516300"," So press Enter. "
"3517380","3519540"," And then go through the right brace."
"3520080","3522780"," Remember, the brace is above the square bracket."
"3522900","3526560"," You hold down Shift, right brace. "
"3526940","3529180"," And I know this is probably the most complicated thing we've"
"3529180","3529920"," put in so far."
"3530320","3531920"," So no shame if you get it wrong."
"3531960","3534260"," I get these wrong all the time, because I kind of"
"3534260","3534820"," start rushing. "
"3534820","3536520"," And I'll leave off a quote."
"3536740","3539340"," I'll leave off a colon."
"3539580","3541280"," It's very easy to mess these up. "
"3541600","3544660"," But I didn't do it correctly."
"3546560","3553300"," So phone book equals left brace, new line, the string Patrick,"
"3553620","3556080"," colon, the integer, not very long integer"
"3556080","3560140"," with a lot of nines, comma, the string Sarah, colon,"
"3560680","3562220"," very long integer with a lot of ones."
"3562980","3564120"," I put another comma there. "
"3564120","3566500"," It's not necessary to put a comma at the last item."
"3566800","3569480"," But I recommend it, because you'll not"
"3569480","3570440"," mess yourself up as much."
"3570940","3574720"," And then I did a right brace, OK?"
"3576080","3577040"," That's our dictionary. "
"3577340","3578860"," And now that we have the dictionary defined,"
"3578980","3580200"," we can type phone book."
"3582160","3582800"," Phone book."
"3584060","3585240"," I just said book. "
"3585340","3586900"," It's phone underscore book."
"3587620","3590600"," ""Out left bracket, 21 right bracket, colon,"
"3591200","3594260"," left brace, Patrick, colon, 9999999999."""
"3594260","3595760"," This is the representation of the object. "
"3596300","3600020"," Now, to pull out my phone number,"
"3600380","3602180"," now, there's only two numbers in here, right?"
"3602240","3604100"," But imagine there were thousands of numbers, OK?"
"3604100","3604860"," And this would be more useful."
"3605000","3606420"," But let's do phone underscore book."
"3608340","3610060"," And I'm not going to go slow. "
"3610160","3615180"," But phone underscore book, left square bracket, book."
"3615180","3618040"," And then I type in quotes Patrick, OK?"
"3618540","3625080"," So quote, ""quote, Patrick, quote, right bracket."""
"3625220","3626120"," And then I end with a bracket. "
"3626400","3628000"," So it's just like our slicing syntax."
"3628180","3630160"," But instead of giving a number, we"
"3630160","3633480"," give it a string that is our key, OK?"
"3633940","3635480"," And you can use other things for keys."
"3635560","3636660"," You can have keys that are integers. "
"3636840","3638000"," You can have keys that are actually"
"3638000","3639380"," more complicated things that I actually"
"3639380","3640560"," don't recommend choosing."
"3640560","3647280"," But the most common ones would be integers, floats, or strings,"
"3647600","3649960"," OK, to pick as keys, all right?"
"3650020","3652640"," So in this case, it's a string, which is Patrick."
"3653040","3660060"," ""Out left bracket, 22 right bracket, colon, 999, 999, 9999."""
"3660940","3662740"," OK, just in case you've forgotten my number,"
"3662960","3666120"," there it is, phone underscore book, open square bracket,"
"3666120","3673040"," quote, Patrick, my name, which is the key, close the quote,"
"3673520","3674540"," close the square bracket."
"3674820","3675420"," And I hit Enter."
"3675660","3677240"," And then it printed out the data,"
"3677500","3679740"," which is in that key value pair. "
"3679920","3681720"," So remember, the Patrick was kind"
"3681720","3684600"," of a label on the data, which is the phone number, OK?"
"3685020","3686000"," And this is very common."
"3686200","3687560"," A lot of things in programming are really"
"3687560","3690720"," just about giving things names, variables, indexes,"
"3690860","3693940"," and now key values, OK, key value pairs, all right?"
"3695200","3698540"," So now I've kind of shown you how to do that."
"3698780","3702520"," Now let's create together a new dictionary, OK?"
"3702600","3704640"," And this is going to be our two-dimensional data set,"
"3704720","3705000"," all right?"
"3705780","3707600"," I just want to do a time check. "
"3712170","3713690"," ""2 colon 6 PM."
"3713910","3714690"," 2 0 6, right?"
"3715230","3716970"," 2 colon 7 PM."""
"3717990","3721770"," 2 7 PM, that's, OK, it didn't say 0 7, but that's fine. "
"3722530","3724310"," I'm assuming it's 2 0 7."
"3724430","3725590"," I think we should be OK for time."
"3726290","3732990"," OK, so now let's create our dictionary"
"3732990","3735430"," that we're going to use for our two-dimensional data set, OK?"
"3736930","3742130"," Let's create three variables with each a list of five items."
"3742310","3743850"," And then we're going to use those"
"3743850","3745050"," to create the dictionary, because I"
"3745050","3749050"," think that's easier than creating it all in one go, OK?"
"3749430","3751150"," So we already have our budget. "
"3751530","3752910"," But if you haven't created the budget,"
"3752910","3759050"," it was budget equals square bracket 10 10 5 15 15, OK?"
"3759110","3759730"," That's our budget."
"3760110","3762130"," But if you already have the budget assigned,"
"3762270","3763190"," you don't have to do it again."
"3763750","3764990"," And now let's get our other two. "
"3765450","3767710"," And I want to do it the same with the tutorials."
"3767830","3769030"," I'm going to pull it out of my notes."
"3769490","3769790"," ..."
"3770970","3771550"," ..."
"3771750","3772550"," ..."
"3772610","3773630"," ..."
"3773750","3774810"," ..."
"3774870","3776230"," ""June, July, September, October."""
"3776430","3778550"," So we have June, July, September, October, November."
"3778830","3780530"," So it's going to be a list with five items. "
"3780530","3781650"," Each is a string."
"3782470","3785330"," June, July, September, October, November, OK?"
"3785970","3786970"," So let's create that one."
"3787390","3788710"," And we call that month, I think. "
"3788710","3789110"," Month equals left bracket."
"3789170","3791270"," June, July, September, October, November, right bracket."
"3791630","3792070"," IPython. "
"3792250","3794050"," So let's do month equals."
"3794790","3798610"," ""M-O-N-T-H month equals space."""
"3798810","3799670"," Open square bracket. "
"3800370","3801090"," Left bracket."
"3802630","3803070"," Quote."
"3803410","3806150"," And then I'm going to say, it started in June, right?"
"3807830","3808690"," Month equals left bracket. "
"3808690","3810890"," June, July, September, October, November, right bracket."
"3810970","3812030"," That's a lot of text."
"3812310","3819250"," ""June, comma, space,"" July, ""July."""
"3819510","3821370"," Remember, they have to be surrounded by quotes,"
"3821470","3822630"," and you separate them with commas."
"3824150","3825190"," Quote, space."
"3825850","3832850"," June, July, September, October, November. "
"3833830","3835750"," I'm not going to type all that in one character."
"3835750","3837290"," ""Quote, right bracket."""
"3838650","3843350"," But it's month equals, open square bracket, June, comma,"
"3843550","3847510"," July, comma, September, comma, October, comma, November,"
"3847890","3848070"," comma. "
"3848690","3849970"," Actually, don't put the comma at the end."
"3850230","3851450"," But you can if you want."
"3851470","3852110"," I won't mess it up. "
"3852710","3854190"," And then close the square bracket."
"3854290","3854890"," I press Enter."
"3855270","3856670"," ""In left bracket, 24."""
"3856690","3858050"," OK, now I'm safe in my month variable, OK?"
"3858170","3859270"," So now we should have a budget."
"3860570","3862570"," The budget should be five items long."
"3862670","3863810"," The month should be five items long. "
"3863810","3865690"," We need to create one more, OK?"
"3866370","3868750"," And it's going to be cookie budget, OK?"
"3869070","3871370"," Because I like cookies, OK?"
"3871730","3872930"," Maybe you like cookies too."
"3873130","3874150"," I don't know if you do."
"3874270","3875970"," But hopefully, you do. "
"3877830","3880150"," And our little data set here is going"
"3880150","3881730"," to represent the budget."
"3881970","3883850"," We have the total budget for each month"
"3883850","3886370"," and the budget we have for cookies each month."
"3886430","3887890"," And you can kind of imagine this as like,"
"3887950","3892090"," imagine you're like a child in like 1964, OK?"
"3892090","3895690"," And your budget is $7 a month or something like that, OK?"
"3896730","3898710"," Just we're keeping things really simple, OK?"
"3900010","3902710"," So our cookie budget is going to be,"
"3902770","3903970"," and I'm going to use the same value. "
"3904190","3906230"," ""Month equals left bracket, June, July, September, October."
"3906570","3907350"," Month equals left bracket."
"3907510","3908950"," Month equals cookie underscore budget equals left bracket,"
"3909010","3910830"," 3, 2, 0, 4, 5, right bracket."""
"3911230","3913650"," 3, 2, 0, 4, and 5."
"3913950","3916630"," So let's do cookie underscore budget."
"3917970","3925530"," C, budget, space, left bracket, space, space, 5."
"3925970","3927110"," I think it was 3, 2, 0, 4, 5."
"3927190","3928730"," I went down fast there because I knew"
"3928730","3930450"," I wasn't going to remember the numbers if I didn't."
"3930550","3932630"," But it's cookie underscore budget"
"3934470","3941230"," equals open square bracket, 3, 2, 0, 4, 5, OK?"
"3942050","3943350"," And if it's a little different for the curriculum,"
"3943470","3944150"," it's not the end of the book. "
"3944730","3946870"," And then we want to close the square bracket."
"3947510","3948030"," ""Right bracket."""
"3948110","3948530"," Should I close it?"
"3948550","3949810"," ""Right bracket."""
"3950010","3950650"," Yeah, do it."
"3951850","3952190"," 5."
"3953510","3956070"," OK, so now we should have three lists."
"3957190","3960150"," In left bracket, 25, right bracket, colon. "
"3961250","3963510"," OK, but no output because I saved a variable, OK?"
"3963630","3965310"," And now one thing I do want you to check,"
"3965790","3968870"," I know we're all frantically inputting lists right now"
"3968870","3970310"," and not really listening to me."
"3970370","3971870"," But what I'm going to do is I'm going"
"3971870","3973930"," to use my len function to check all three lists."
"3973930","3975830"," If any of them don't have five items,"
"3975930","3976970"," we're going to have a problem, OK?"
"3977370","3978310"," We're going to have a problem. "
"3978970","3980590"," So let's do len budget."
"3982210","3982710"," Len."
"3983830","3986990"," ""Out left bracket, 25, right bracket, colon."""
"3987250","3987590"," 5."
"3987650","3988070"," Len."
"3989090","3989810"," Cookie budget."
"3990990","3991910"," Underscore budget. "
"3992250","3992550"," ""Cookie."
"3993510","3994010"," Budget."
"3994570","3995070"," 37. "
"3995730","3996070"," In left."
"3996190","3996570"," Cookie."
"3996670","3996870"," Len."""
"3997170","3998250"," I got an error there, but I."
"3998370","3998610"," ""Cookie."
"4000490","4000810"," Right."
"4001030","4001850"," Name error. "
"4001950","4002590"," Trace back."""
"4002590","4003970"," Did I call it something else?"
"4006750","4007270"," ""In 37."
"4008090","4008430"," In left. "
"4009110","4010150"," Cookie slash."
"4011150","4014790"," In left bracket, 29, right bracket, colon."
"4015330","4016230"," Cookie slash. "
"4016930","4017270"," In left."
"4017450","4018930"," In left bracket, 29."""
"4019270","4020790"," Let's just see what I did wrong there. "
"4022610","4023130"," Yeah."
"4023290","4024090"," In left bracket."
"4024430","4026590"," In left bracket, colon. "
"4027150","4028190"," 5, right bracket."
"4029130","4029550"," Cookie."
"4029550","4032110"," In left bracket, 29, right bracket, colon. "
"4032670","4035470"," Cookie line budget equals left bracket, 3."
"4035950","4040980"," ""In left bracket, 37 dash."""
"4041000","4041960"," Am I doing caps or something?"
"4042200","4042820"," ""Name error."
"4042920","4043520"," Trace back. "
"4044880","4046260"," In caps lock on."
"4047000","4048140"," Caps lock off."
"4049060","4049940"," Cookie slash. "
"4053130","4053950"," T. 37."""
"4054390","4055430"," Yeah, I don't know what I did wrong there."
"4056170","4057230"," I'm going to save the cookie. "
"4057530","4059010"," Yeah, you tell me what I did wrong."
"4059010","4061750"," I was going to say that I don't see caps lock on, but yeah."
"4062350","4062970"," Yeah, odd, right?"
"4062970","4067010"," Yeah, the chat is saying you missed an O in cookie. "
"4068050","4068570"," ""Space."""
"4068990","4070330"," There's only one O in cookie?"
"4073750","4074830"," IE line budget."
"4075010","4077450"," Yeah, it was cookie with one O."
"4078810","4082450"," So this really is like a small child in 1964, OK?"
"4082830","4086090"," But let's do, you can imagine all the R's being backward"
"4086090","4087050"," and stuff like that. "
"4087430","4090210"," Let's do, I'll just do this."
"4090210","4095609"," I'm going to do cookie budget spelled correctly."
"4095990","4097229"," And there's something about programming"
"4097229","4100149"," that makes my spelling ability massively decrease. "
"4100210","4101790"," My already poor spelling ability just"
"4101790","4103930"," decreases precipitously when I'm doing programming."
"4104029","4105529"," It must be like a left brain, right brain thing."
"4106410","4107370"," ""Equals cookie."""
"4107850","4109069"," ..."
"4109450","4111130"," I just fixed it, basically."
"4111330","4114330"," If you got it right, I just overwrote the variable"
"4114330","4115450"," with a new variable, OK?"
"4115510","4117189"," Or I reassigned it. "
"4118010","4119050"," All right."
"4119050","4121910"," So len cookie budget."
"4122390","4123109"," ""Cookie line budget."
"4126779","4129899"," Out left bracket 33, right bracket colon."""
"4130640","4133020"," And then let's do len cookie budget."
"4133220","4136560"," And then we're going to do len month, OK?"
"4137020","4139899"," ""Out left bracket 34, right bracket colon."""
"4140399","4142160"," So now let's create our data frame."
"4142220","4143779"," And then I'm going to explain a few things about how"
"4143779","4146140"," we work with two dimensional data."
"4146460","4148560"," So it's a two step process. "
"4148560","4149660"," So we first create a dictionary."
"4150020","4152700"," And then we create the data frame from the dictionary, OK?"
"4153080","4154560"," So we have our three variables."
"4155560","4158520"," And now let's use them to create the dictionary. "
"4158779","4162939"," So we're going to call it monthly underscore budget."
"4164260","4169960"," ""M-O-N-T-H-L-Y. Monthly budget."""
"4172020","4172899"," Monthly budget."
"4173160","4174920"," Monthly underscore budget equals."
"4175359","4176899"," And then let's do an open brace. "
"4177979","4179960"," And I'm going to press Enter just for my sanity."
"4182100","4185000"," And then what we want to do is, in quotes,"
"4185140","4186180"," I'm going to put budget."
"4187700","4192200"," And these are the labels for what"
"4192200","4193560"," are going to be columns in a minute. "
"4193720","4195020"," But we'll talk about that in a minute."
"4195620","4197440"," But basically, remember, the key is the label."
"4198360","4198720"," Budget. "
"4198880","4199860"," And I did lowercase."
"4200080","4201820"," I keep everything lowercase, OK?"
"4201820","4202680"," Don't confuse yourself."
"4204180","4208340"," And then I did a colon and then the variable cookie budget. "
"4208700","4209880"," And then we'll go over this again."
"4212190","4213670"," ""Cookie line budget."
"4214650","4215190"," Cookie. "
"4217190","4218710"," Cookie line budget."""
"4218910","4219430"," I'm too lazy."
"4219490","4219850"," OK. "
"4221130","4223510"," And then let's do quote."
"4224570","4225230"," Oh, no."
"4225510","4226730"," That's completely incorrect. "
"4227290","4228130"," That should be budget."
"4229270","4232350"," ..."
"4232350","4236750"," Budget, in quotes, colon, budget, the variable, comma. "
"4237190","4239990"," And let's do, in quotes, cookie underscore budget."
"4240950","4241190"," ..."
"4242910","4243590"," Colon. "
"4244230","4246450"," And then let's use our cookie budget variable."
"4247890","4249370"," ..."
"4250610","4252790"," ..."
"4252790","4256310"," And then let's do month, in quotes."
"4256890","4257250"," ""Quote."""
"4257850","4259170"," I'll go over this again. "
"4259230","4259890"," I know this is confusing."
"4260490","4264130"," ""M-O-N-T-H, month, colon."""
"4264230","4264990"," And a new line. "
"4265150","4267870"," And now I'm going to do the right brace."
"4268170","4268990"," Right brace."
"4269090","4269930"," So what do we have here?"
"4269970","4272430"," We have monthly underscore budget. "
"4272550","4273630"," That's our variable name."
"4276290","4277970"," Equals left brace."
"4278650","4280750"," I did a new line, but you don't have to. "
"4282650","4286370"," Quote, budget, end quote, colon."
"4287190","4288450"," Then our budget variable."
"4288450","4290030"," Budget with no quote, OK?"
"4291510","4292050"," Comma. "
"4292650","4296890"," Next line is, quote, cookie underscore budget."
"4297010","4298890"," Quote, colon."
"4299470","4302450"," And then we have our cookie underscore budget variable. "
"4302910","4303490"," Comma."
"4303870","4304830"," Then we have a new line."
"4305070","4307330"," And then we have month, in quotes. "
"4307690","4309670"," So quote, month, quote, colon."
"4310250","4314790"," And then we have our month variable, M-O-N-T-H."
"4315810","4318390"," And then we, I did put a comma, but you"
"4318390","4319890"," don't need to, on the last one. "
"4320330","4323230"," And then you can do a right brace, OK?"
"4323830","4324550"," I'm going to hit Enter."
"4324690","4328310"," Hopefully it'll work for me."
"4329070","4333410"," Now, so what we have is a variable, monthly budget,"
"4333590","4336070"," with three key value pairs. "
"4336710","4340090"," And the key is each describing it."
"4340110","4342610"," But we basically just kept it the same as the variable names,"
"4342690","4342910"," OK?"
"4342990","4346730"," So it's budget, in quotes, budget, the variable,"
"4347290","4348830"," cookie underscore budget, in quotes,"
"4349010","4351250"," cookie underscore budget, the variable,"
"4351630","4355970"," and then monthly, or month, in quotes, month, the variable,"
"4356250","4356430"," OK?"
"4357690","4361530"," If people in the chat want to kind of paste this"
"4361530","4363290"," in so people can copy it in case they're"
"4363290","4367470"," having issues or something, then go ahead and paste it"
"4367470","4367990"," in for people."
"4368250","4370590"," So they have something to copy if they're having trouble. "
"4371570","4372750"," But it is good practice."
"4373350","4374310"," Yeah, put it in the chat."
"4374310","4381130"," And then it is good practice to type this all in and just"
"4381130","4381870"," take your time, OK?"
"4381870","4384270"," I know it can be very easy to get syntax errors in something"
"4384270","4384810"," like this. "
"4385270","4387630"," It's totally normal when you start learning programming"
"4388510","4390130"," to get constant syntax errors."
"4390270","4390890"," And you know what?"
"4391110","4392370"," You'll be missing a quote."
"4392490","4393170"," There won't be a colon. "
"4393350","4394530"," It'll be something annoying."
"4395390","4397690"," And the things to try are you can start again"
"4399650","4402130"," or go character by character, OK?"
"4402130","4404410"," And using the review, OK?"
"4404510","4406050"," And in fact, I think in some ways,"
"4406150","4409190"," I think it makes us more patient with stuff like that."
"4409290","4411270"," I feel like a lot of times I've noticed when I teach sighted"
"4411270","4417590"," people, it's like they're like, they don't really think. "
"4417750","4419090"," They're seeing it in their brain so much"
"4419090","4420510"," that they're not seeing what's on the screen."
"4420930","4423030"," So they'll kind of be like, oh, no,"
"4423110","4423970"," but I did everything right."
"4424330","4425450"," But it's really hard to miss. "
"4425590","4427170"," It's really easy to miss something visually."
"4428030","4430190"," I'm not saying it's not useful to see things visually too."
"4430190","4432230"," But it's really easy to miss something visually. "
"4432470","4434650"," But often, if you review character by character"
"4434650","4437970"," using NVDA, you're actually fairly liable to catch things"
"4437970","4439710"," because you're like, oh, wait, oh, whoa."
"4440210","4442150"," You're not going to have, there's not really"
"4442150","4443650"," as many mirages that can win."
"4444410","4445950"," OK, so we have our monthly budget. "
"4446090","4449190"," I was just letting, giving you some time to catch up there."
"4451350","4453190"," So we have our dictionary now."
"4453870","4456330"," And remember our type function, our old faithful type function?"
"4456350","4457050"," We haven't used it in a while. "
"4457070","4458450"," Let's just run it on monthly budget."
"4459570","4460050"," P."
"4461170","4464930"," So T-Y-P-E, open parenthesis, monthly."
"4465750","4470630"," ..."
"4472110","4476630"," ""Right paren, out left bracket 36, right bracket colon, dict."""
"4476850","4478810"," It pronounced it kind of funny, but dict."
"4479170","4480510"," It's short for dictionary. "
"4480790","4482290"," That's our data type that we're using here."
"4483130","4485150"," So remember, dictionary, it's really just labeled data."
"4485290","4487730"," And so what we did here was that we"
"4487730","4490250"," had our three lists, each with five items,"
"4490350","4492050"," saved as variables, and then we gave them"
"4492050","4494870"," names in the dictionary, keys, as keys. "
"4495650","4498010"," Now we're going to use this monthly budget."
"4498830","4501570"," We could pull out data from this, but we have no reason to."
"4501670","4504070"," So what we're going to do is create a data frame in Pandas. "
"4504430","4505650"," So we're going to do Pandas."
"4505990","4506870"," ""P-A."""
"4507050","4509550"," OK, so sorry, let's save it to a variable. "
"4509690","4511950"," So D-F, and I'll explain."
"4512030","4515810"," This is another conventional variable, short variable."
"4516070","4531050"," So it's D-F equals, and now do Pandas dot data frame. "
"4531810","4537690"," And it's capital D-A-T-A, capital F frame."
"4539670","4544010"," ""F-R-A-M-E,"" and we call that camel case or word case"
"4544010","4545150"," is what people call it sometimes."
"4546170","4548070"," The camel case is a little more evocative. "
"4548250","4549430"," Then open parenthesis."
"4550650","4551850"," ""Data frame."""
"4551970","4555910"," And then we're going to pass it our monthly budget variable. "
"4557490","4563010"," ..."
"4563390","4571430"," So it's D-F equals Pandas dot capital D data, capital F"
"4571430","4573350"," frame, open parenthesis."
"4574290","4576730"," And then we pass in our monthly underscore budget. "
"4576890","4578170"," Then we close the parenthesis."
"4578950","4582510"," And that should create a Pandas data frame from our dictionary"
"4582510","4585130"," and assign it to D-F, the variable D-F."
"4585230","4586090"," It's a very short variable. "
"4588080","4590300"," ""In left bracket, 38, right bracket."""
"4590300","4591920"," Because we assigned a variable, we don't get any output."
"4592900","4595780"," But now we have a data frame variable. "
"4596840","4602060"," And just like with S before, D-F is a conventional variable"
"4602060","4605600"," name for a data frame."
"4605860","4607640"," So S was a conventional name for series."
"4607800","4609120"," D-F is a conventional one for data frame. "
"4609260","4613000"," If you only have one data frame, then people"
"4613000","4615640"," will conventionally use the variable name"
"4615640","4617220"," D-F for the data frame."
"4617280","4618380"," If you have more than one data frame"
"4618380","4620480"," and you're doing other things like that,"
"4620760","4622300"," you should probably give them other names, more"
"4622300","4623480"," descriptive names."
"4626500","4629260"," I figure people are kind of taking a while to catch up. "
"4629540","4631740"," But I'm going to start explaining a little bit"
"4631740","4633060"," about the data frame here, OK?"
"4633280","4635260"," I'm going to just do a little time check, whatever you like."
"4635940","4640320"," 2, or ""2 colon 22 PM."""
"4640540","4641460"," 2.22, OK. "
"4641760","4644320"," So yeah, so now I'm going to show you a couple of the data"
"4644320","4647740"," frame fundamentals, OK?"
"4647760","4649420"," So the basic things you can do with the data frame."
"4651940","4654740"," So the first thing to know about a data frame"
"4654740","4657040"," is, well, we'll look at the representation in a minute."
"4657320","4660520"," But before we look at the representation, I want to,"
"4660980","4663880"," which is only marginally useful for screen reader users,"
"4664640","4666200"," I want to talk about the format. "
"4666660","4669080"," So the data frame, it's two-dimensional data, OK?"
"4669440","4671540"," So you can kind of think about it"
"4671540","4674620"," as if you imagine a line going from left to right"
"4675120","4676000"," in your mind."
"4676560","4679100"," And then for each item on that line,"
"4679200","4683000"," there's also another list going from top to bottom, OK?"
"4683560","4685840"," And if you've ever used Excel, it's"
"4685840","4686780"," the same as a spreadsheet."
"4686960","4689280"," So you have from left to right, you have columns. "
"4689780","4692000"," And from top to bottom, we have rows, OK?"
"4692000","4693640"," It's a table, OK?"
"4693840","4696160"," So we have an x-dimension and a y-dimension."
"4697600","4701780"," And so our x-dimension has columns,"
"4701840","4704460"," which are going to be things like our monthly budget,"
"4704720","4708800"," our cookie budget, our budget, and our month."
"4709280","4711000"," Those are the items from left to right. "
"4711040","4711480"," We have three."
"4712040","4715360"," And then from up to down, the rows"
"4715360","4717020"," are going to be our five items that"
"4717020","4718480"," are going to be data for each of those,"
"4718480","4722260"," and each month's different kinds of budget, OK?"
"4722940","4725000"," So let's try out a few different things, OK?"
"4725080","4727300"," I want to kind of get to some stuff at the end that's"
"4727300","4727720"," pretty cool."
"4728220","4732920"," So I'm going to try to pick up the pace like 20% here, OK?"
"4733320","4735020"," Let's still try to explain things fully. "
"4736420","4737760"," So let's do clear."
"4737880","4739000"," I'm going to clear things because we're"
"4739000","4740260"," going to experiment with our data frame now."
"4740320","4741080"," So Control-L. "
"4741960","4744280"," ""In left bracket, 38, right bracket, 12."""
"4744280","4746180"," We now have our data frame variable"
"4746180","4746920"," that we're going to work with."
"4747340","4751160"," So let's first do just listen a little"
"4751160","4753800"," to what the format of the data frame is, the representation. "
"4754700","4755160"," D-F."
"4755160","4759380"," ""D-F. Out left bracket, 38, right bracket, colon."
"4760640","4762520"," Budget cookie line, budget month."""
"4762620","4764100"," That was the column names, OK?"
"4764900","4767540"," Now let's hear the actual table stuff."
"4770190","4771290"," ""0, 10, June 3."""
"4771290","4772310"," 0, 10, June."
"4772530","4773390"," And then it said 3."
"4773510","4774290"," But it said June 3rd."
"4774310","4776230"," It's trying to predict things in a not useful way. "
"4776230","4780150"," So 0, 10, June 3rd, OK?"
"4780270","4782210"," So the first item is the index."
"4782570","4785290"," Remember, it's the range from 0 to 4."
"4786070","4788450"," So that first item is not going to really mean anything."
"4788550","4789650"," It just means it's the first item. "
"4789730","4790630"," That's what the 0 is."
"4791010","4793310"," Then 10 was our budget."
"4794990","4796370"," The month was June. "
"4796490","4797930"," And then the cookie budget was 3."
"4798310","4799170"," So let's hear another row."
"4801470","4802630"," ""1, 10, July 2."""
"4802690","4803430"," 1, 10, July 2nd. "
"4803710","4805970"," So 1 is the index."
"4806470","4807570"," 10 is the budget."
"4808010","4808970"," July is the month. "
"4809190","4810250"," And 2 is the cookie budget."
"4810350","4812590"," So we're going to be spending $2 that month on cookies."
"4813030","4813990"," We'll just do one more. "
"4816750","4818270"," ""2, 5, 0, September."""
"4818930","4820190"," And then so it's so on."
"4820230","4821470"," It'll do that for each line, OK?"
"4821490","4822630"," I won't review the whole thing. "
"4823250","4825810"," And at the end, there's no D type or anything like that."
"4825950","4828430"," That is because there's different data in each column."
"4828610","4830090"," So a D type doesn't mean anything. "
"4830190","4831510"," There's all sorts of D types in here."
"4831910","4832970"," We have integers."
"4833130","4834270"," And we also have strings, OK?"
"4836970","4840050"," So now, I will say what we're going to learn right now"
"4840050","4843550"," is how to learn a whole bunch of stuff about the data frame"
"4843550","4845370"," without using the string representation. "
"4847770","4850490"," And I'll talk more about why the string representation,"
"4850510","4852950"," why you're actually not missing out on that much by not"
"4853390","4854850"," reviewing the string representation."
"4856990","4859490"," It actually, you're not missing out on very much"
"4859490","4860370"," compared to a sighted person."
"4860410","4862330"," But I'll kind of return to that topic in a minute, OK?"
"4862350","4864250"," When we have a longer data set where it's more obvious. "
"4865390","4866110"," All right."
"4866310","4870570"," So let's do a couple of basic functions with the data frame."
"4871290","4873310"," The first one is, and this is what"
"4873310","4874830"," I always do within your data set,"
"4874930","4876890"," is how big is the data set?"
"4876990","4879070"," So let's do df.shape."
"4885750","4889910"," df.shape, S-H-A-P-E, no open and closed parentheses. "
"4890090","4891630"," So it's an attribute, not a method."
"4891810","4893270"," Some of these are attributes, not methods."
"4893270","4895350"," So they're kind of like little variables inside the data"
"4895350","4895570"," frame. "
"4895970","4897690"," They're not functions inside the data frame."
"4899010","4902770"," ""Out left bracket 39 right bracket colon left"
"4902770","4905650"," paren 5 3 right paren."""
"4906510","4912170"," So it said left paren 5 comma 3 right paren. "
"4912370","4914510"," So it gives us two numbers in parentheses."
"4915450","4916910"," And the first number is 5."
"4917690","4920170"," And you can maybe guess because you know how many,"
"4920230","4922250"," you know the dimension, you know what we put in."
"4922690","4924710"," So the first number is how many rows. "
"4925170","4928490"," And the second number is how many columns."
"4928830","4930670"," So it's 5 for the number of rows,"
"4931110","4932590"," 3 for the number of columns."
"4934210","4935630"," That's the shape of the data. "
"4936690","4937930"," And you can kind of think that makes sense."
"4938070","4940250"," You know, like if you imagine it like, oh,"
"4940310","4943010"," if we had a lot of columns and only a few rows,"
"4943110","4944390"," then the data is really long."
"4944470","4946910"," If we have a lot of rows and only a few columns,"
"4946950","4949870"," the data is long in a top to bottom dimension. "
"4949870","4952250"," So it does kind of change the shape."
"4952450","4954130"," Or the data could be perfectly square"
"4954130","4956090"," if we have five columns, five rows, et cetera, et cetera."
"4957810","4961190"," So that shape tells us we have five rows and three columns. "
"4961370","4964210"," Now you're like, well, Patrick, I already knew that"
"4964210","4965610"," because we created the data ourselves."
"4965930","4967890"," But don't worry, we're going to be in a minute"
"4968470","4973450"," using a real life data set that will pull in much faster"
"4973450","4975050"," than we even created this toy data."
"4976330","4977990"," And that'll be much more useful then. "
"4978610","4982190"," So df.shape, that tells us the number of rows and columns."
"4982770","4984310"," Let's now do this."
"4984450","4985130"," And this is honestly,"
"4985230","4988090"," it's the thing you will do the most often in Pandas. "
"4988470","4989930"," So pay attention to this."
"4990230","4992350"," The thing you will do the most often in Pandas"
"4992350","4996010"," is pull out a column from a data frame."
"4996190","4999310"," This is the most commonly performed operation in Pandas,"
"4999390","4999970"," in my opinion. "
"5000550","5004130"," So df. and then give any of the names."
"5004250","5007110"," Let's do our month, df.month."
"5007770","5014490"," ""D-F, dot M-O-N-T-H,"
"5015150","5019710"," out left bracket 40, right bracket colon, zero June,"
"5020990","5024150"," July 1st, September 2nd."""
"5024170","5025850"," Reading it in a weird way because it tries,"
"5026070","5027250"," you know how screen readers are."
"5027310","5028090"," They try to be smart,"
"5028210","5029330"," but sometimes they're not always smart."
"5029690","5031510"," So it's like September 2nd,"
"5031790","5035170"," because it's a two, then a big space, and then September. "
"5035170","5036830"," So it's like September 2nd,"
"5037310","5040210"," but it's kind of guessing wrong, but that's fine."
"5041770","5044810"," So we have other ways of doing things with this,"
"5045470","5050550"," but the, so basically what we did was we pulled out,"
"5050630","5051690"," we did df.month."
"5051970","5055150"," And what that gives us back is that column as a series."
"5055490","5056730"," And this is why I say,"
"5056810","5059330"," we're not gonna neglect our series stuff"
"5059330","5062050"," because now we can start combining things together. "
"5062430","5064150"," So what if we do df,"
"5064150","5066310"," what if we want to know the average cookie budget"
"5066310","5066950"," for each month?"
"5067250","5070390"," Okay, now we're gonna combine a couple of things together."
"5070590","5071770"," Okay, and this is called chaining."
"5072530","5073810"," So let's do df. "
"5076650","5078770"," ..."
"5079790","5080990"," Cookie underscore budget."
"5082590","5086930"," ""C-O-O-K-I-E, cookie, B-U-D-G-E-T."""
"5086950","5087590"," And another dot."
"5089890","5090970"," Budget, dot."
"5091030","5092330"," So it's df.cookiebudget,"
"5092450","5095870"," cookie underscore budget, dot mean for the average. "
"5096500","5100290"," M-E-A-N mean, right parenthesis."
"5100330","5102310"," Open the parenthesis and then we'll close the parenthesis."
"5102430","5103550"," Do we have a question or anything there?"
"5104530","5105570"," I heard someone on the mic. "
"5106110","5109050"," I think maybe someone accidentally unmuted themselves"
"5109050","5110730"," and we might've been hearing a screen reader."
"5111190","5113430"," So maybe proceed with caution."
"5115730","5119930"," Out left bracket 41, right bracket colon 2.8."
"5120290","5122470"," So what we did there, and now we're kind of getting,"
"5122630","5125010"," things are getting a little interesting here, right?"
"5125050","5126590"," So we're combining some stuff together. "
"5126590","5130750"," We're doing df.cookie underscore budget, dot mean."
"5130910","5133510"," So in one action, we pulled out the column"
"5133510","5137290"," and got the mean of the data in that column, okay?"
"5138050","5141850"," When you start combining the methods one into the other,"
"5142930","5145890"," we have a word for that and it's called chaining, okay?"
"5146010","5147270"," And Pandas has a lot of functionality"
"5147270","5149030"," that allows us to facilitate chaining."
"5149190","5151650"," That's a little bit more for intermediate users,"
"5151690","5152950"," but it's very cool stuff. "
"5153290","5154490"," And sometimes you'll just be like,"
"5154490","5157370"," df.this, dot this, dot this, dot this."
"5157390","5158810"," And you combine a whole bunch of things together"
"5158810","5160090"," and in one line,"
"5160210","5162690"," you get kind of almost like a whole little data analysis."
"5163050","5164790"," So, and we'll be getting by the end,"
"5164890","5166230"," maybe the last thing we do in this workshop"
"5166230","5168130"," will be kind of a little bit of a longer chain like that. "
"5168550","5169910"," So, okay."
"5170030","5172490"," So that pulls out the column."
"5172690","5173890"," Okay, so we've pulled out the column"
"5173890","5178090"," and then you can also in the same action, do things to it. "
"5178150","5179450"," So like use our methods, okay?"
"5179750","5183490"," So df.cookie budget, which is a series."
"5183490","5184810"," And then we can use a method"
"5184810","5186050"," that we normally use on a series,"
"5186710","5190290"," the mean method in the same action, okay?"
"5190350","5191230"," And then we get,"
"5191350","5193530"," it smoothly get the mean of that column,"
"5193630","5194770"," which is very nice, honestly."
"5194930","5197150"," Like, and how much typing around"
"5197150","5198710"," would that take you to do in Excel?"
"5199430","5201090"," You'd have to like set up a whole thing,"
"5201190","5202170"," you know, and type into it. "
"5202170","5203990"," It's just, you know, it's very quick."
"5204130","5205610"," When you start getting fast with this,"
"5205650","5208610"," you start getting data really fast"
"5208610","5209970"," and you're kind of at your fingertips, okay?"
"5210370","5214950"," So what else do I need to show you here for data frames?"
"5215550","5216870"," We pulled out the column."
"5218250","5222410"," I'm gonna show you really quick how to pull out a row, okay?"
"5223790","5230210"," And then we're going to kind of move on to the next thing. "
"5230310","5232010"," Okay, so let's do df."
"5233450","5237530"," There's two ways to pull out a row."
"5237670","5239490"," I think we're getting a little tight. "
"5239490","5240990"," So I'm gonna only show you one of them,"
"5241070","5242610"," but I'll kind of point to the other one, okay?"
"5243130","5244610"," Two colon 32 PM."
"5244750","5245290"," We're not doing too bad."
"5245490","5245890"," We're actually,"
"5249770","5252230"," so, okay, I'll show you the full version here. "
"5252250","5253350"," I'm sorry, I just want to make sure"
"5253350","5254130"," that we get to everything."
"5254390","5257070"," So what I want to show you is,"
"5258230","5259990"," right now we have it on this data frame,"
"5260050","5261830"," we have an index, but it's kind of useless."
"5261990","5264910"," It just counts zero, one, two, three, four, you know?"
"5265270","5267230"," So, and we can actually pull out the index"
"5267230","5269430"," and listen to what the index is by itself"
"5269430","5270830"," by doing df.index."
"5275010","5276370"," df.index,"
"5276370","5277190"," no parenthesis,"
"5277830","5280570"," ""out left bracket 42 right bracket colon,"
"5281150","5282550"," range index left paren,"
"5283190","5286250"," start equals zero, stop equals five,"
"5287510","5288770"," step equals one right."""
"5288770","5289790"," So basically this says,"
"5289990","5292390"," it's a way of representing counting up."
"5292530","5295110"," It says range index, start at zero,"
"5295110","5297870"," stop at four, count up by one."
"5298190","5301490"," Okay, it's a function that allows us to create,"
"5301630","5303150"," and we can actually run this function. "
"5303290","5305010"," It exists in pandas, range index,"
"5305530","5310010"," which allows us to create like an index,"
"5310070","5311090"," which counts up for us,"
"5311130","5311830"," which is actually pretty useful."
"5311910","5313830"," We're going to use this in one of Sarah's workshops"
"5315230","5318510"," to create some data that we'll then use for soundification."
"5319030","5320150"," But basically it means,"
"5320570","5323310"," okay, right now the index counts up from zero up to four. "
"5323450","5323610"," Okay?"
"5324390","5325690"," That's not that useful."
"5326670","5328810"," What you want with an index is something that is,"
"5329130","5331510"," it's ideally it's unique, okay?"
"5331810","5332530"," And descriptive."
"5333130","5334630"," And this is unique, you know,"
"5334690","5336290"," if each row has its own number,"
"5336610","5337590"," but it's not descriptive. "
"5338490","5340770"," And when you look for descriptiveness,"
"5340970","5341790"," what you want to think about,"
"5341850","5343410"," like what is this row?"
"5344350","5345510"," So remember columns,"
"5346370","5349730"," they represent attributes of our data."
"5349930","5351930"," So different facets of the data."
"5351930","5354750"," So for example, the month, the cookie budget, the budget,"
"5355050","5356470"," those are facets of the data. "
"5357010","5361510"," The rows, they represent the, an entity."
"5361850","5365490"," So a specific item or a thing or object"
"5365490","5367490"," or concept or something, okay?"
"5367790","5368410"," An entity."
"5369350","5371130"," And in our case, you know, each,"
"5371270","5372510"," so each the columns they're actually,"
"5372570","5375090"," they're facets and they're facets of a month. "
"5375570","5378710"," Each row represents a different month, okay?"
"5378730","5379730"," In our budget."
"5379730","5382450"," And a month of budget."
"5383170","5385530"," And so what would actually be most descriptive here"
"5385530","5386550"," would be the month. "
"5387030","5388630"," Because, you know, we'll always want to know,"
"5388750","5390490"," okay, well, yeah, that's June's cookie budget."
"5390590","5391730"," That's June's regular budget."
"5392350","5394230"," So let's do DF. "
"5395670","5398770"," Let's, what we want to do is overwrite the index"
"5400250","5405110"," with the, a more useful series, okay?"
"5405370","5408050"," And so we can actually do that by picking out a column"
"5408050","5409670"," and over, using it to overwrite it."
"5409770","5410610"," So this is pretty cool."
"5410790","5411910"," DF.index."
"5413510","5416310"," ""DF, dot,"
"5416350","5418670"," I-N-D-E-X. "
"5419090","5419570"," Index."
"5419750","5420070"," Space."
"5420290","5420850"," Equals. "
"5421090","5421610"," Equals."
"5421690","5422090"," Space."""
"5422250","5422750"," Space. "
"5423090","5425730"," And now let's do DF.month."
"5426210","5430150"," ""DF, M-O-N-T-H."""
"5430270","5432850"," So it's DF.index equals DF.month."
"5433130","5435650"," And what that does is it's just like variable assignment."
"5435650","5438010"," What you're doing is you're overwriting the index"
"5439010","5440810"," with another column, okay?"
"5442530","5444350"," And that column that has more descriptive data. "
"5444390","5446610"," It will actually keep the month column."
"5446710","5448050"," There's no reason to get rid of the month column."
"5448350","5449150"," But from now on,"
"5449190","5450870"," the index will be replaced with the month. "
"5451570","5453810"," If your dataset had like, you know,"
"5454450","5456270"," if your dataset was longer than a year,"
"5456350","5458130"," you would need to have the year and the month"
"5458130","5459270"," to be the unique index."
"5459390","5460710"," But that would still be a great index."
"5460810","5462970"," The year and the month would be a very common index"
"5462970","5464970"," for like a dataset that involved time. "
"5465490","5468190"," ""In left bracket 44, right bracket colon."""
"5468310","5469550"," And remember, we're assigning something"
"5469550","5470710"," so we don't actually get any output."
"5470830","5471850"," Remember when we assign variables"
"5471850","5473770"," or we overwrite stuff within data,"
"5473910","5475190"," this is the first time we've done that. "
"5475250","5475930"," We don't get an output."
"5476430","5478710"," So let's do, now if we do DF.index,"
"5478890","5479830"," you should get the month."
"5480190","5484510"," ""D-F dot I-N-D-E-X."
"5484610","5487310"," Out left bracket 44, right bracket colon."
"5487910","5491790"," Index left paren, left bracket June, July, Sep."""
"5491990","5493770"," The month is overwrote it correctly. "
"5494420","5495010"," So, okay."
"5495110","5497810"," And now if we look at the data frame, DF,"
"5498370","5499250"," the representation."
"5499670","5502490"," ""Out left bracket 45, right bracket colon."
"5503750","5505210"," Budget, month."
"5506310","5507130"," Those are the columns."
"5507430","5510150"," Month, June 10th. "
"5510650","5513450"," June, July 10th."""
"5514290","5514750"," So, okay."
"5514810","5516190"," It's a little difficult to parse that,"
"5516250","5519170"," but what it's saying is that the column on the left,"
"5519530","5521850"," which is the index and the representation has changed. "
"5522010","5522230"," Okay."
"5523010","5524870"," Now this is actually even more clear."
"5525050","5526030"," So now if you want to,"
"5526110","5528590"," say we pulled out the cookie budget, DF.cookiebudget."
"5529050","5532750"," ..."
"5532890","5534210"," So DF.cookiebudget."
"5534470","5535870"," And this is where it'll strike you"
"5535870","5537350"," as a little more useful maybe."
"5537830","5540690"," ""Out left bracket 46, right bracket colon."
"5542950","5546450"," Month, June 3rd, July 2nd."""
"5546490","5548430"," So it's saying the June 3rd is pretty annoying."
"5548590","5551150"," June 3, that's our cookie budget for June."
"5551150","5555890"," July 2nd too, that's our cookie budget for July. "
"5557570","5558810"," ""September zero."""
"5558930","5559910"," It said September zero."
"5562250","5565230"," ""October 4th, November 5th."""
"5565230","5565350"," Okay."
"5565890","5570190"," So it's, you know, September zero,"
"5570750","5574910"," October four and November five."
"5575130","5575470"," Okay. "
"5575830","5577390"," So now we have our data."
"5577510","5579590"," When we pull out a column, it continues to be labeled,"
"5579590","5581250"," which is actually really useful"
"5581250","5583470"," if you're like reading this data or something like that."
"5583550","5585190"," You want it to continue to be labeled. "
"5585690","5587810"," So having a useful index like that is very good."
"5588030","5588050"," Okay."
"5589850","5594090"," Now, the last thing I'd like to do here is pull out the,"
"5595670","5597530"," well, one more thing I want to show you,"
"5597590","5599710"," and then we're going to pull out a row very quickly"
"5599710","5600610"," using this index. "
"5600890","5603390"," And then I do want to move on to our big data set"
"5603390","5604090"," because that's cool stuff."
"5604150","5604870"," But we're going to be working"
"5604870","5606170"," with our big data set next week too."
"5606870","5607630"," All right. "
"5607630","5609950"," So what if we want to calculate,"
"5611990","5616210"," or we want to get an idea of how much we're going to spend"
"5616210","5617910"," on cookies each month."
"5618270","5618350"," Okay."
"5618990","5620210"," And this is very cool. "
"5620330","5622350"," Pandas makes this very straightforward"
"5622350","5623590"," and in a very cool way."
"5626830","5629150"," So we have two columns."
"5629230","5630550"," We have our budget column"
"5630550","5632070"," and we have our cookie budget column. "
"5632370","5634330"," And what we're going to do now is a small thing"
"5634330","5637390"," and it will tell us the percentage of each month"
"5637390","5641470"," that is taken up by cookies in that month."
"5641610","5641690"," Okay."
"5642150","5648130"," So we're going to do df.cookie underscore budget. "
"5652130","5656730"," So df.cookie underscore budget space divided by,"
"5658860","5662440"," so I'll use slash for divided by df.budget."
"5667430","5676170"," out left bracket 47 right bracket colon month, June 0.300."
"5676790","5679170"," 0.30."
"5679930","5681590"," So that's 30%."
"5681590","5681930"," Okay."
"5682050","5683550"," So it's a floating point number"
"5683550","5686690"," that tells us out of one,"
"5687330","5691130"," if it says 0.3, that means it's out of one. "
"5691270","5697010"," So 30% of our budget is taken up by cookies in June."
"5697010","5697570"," Let's try it."
"5697650","5698630"," Let's listen to July. "
"5700370","5708530"," July, 0.20"
"5709130","5711370"," So 0.2, remember that's the same."
"5711450","5712710"," If you convert that to a percentage,"
"5712930","5718790"," that's 20% of our budget is going to be taken up"
"5718790","5720070"," by cookies in July. "
"5720250","5721030"," Let's do September."
"5722430","5726990"," September, 0"
"5726990","5729090"," so we didn't spend any money on cookies in September."
"5729230","5730970"," That's zero spent that month on cookies. "
"5731170","5731230"," Okay."
"5731390","5732370"," So that's pretty cool."
"5733030","5734770"," And that, so, and it's becomes,"
"5734910","5737370"," it was made more useful by the fact that we labeled,"
"5737830","5740450"," you know, we changed the index to be the month. "
"5740530","5742430"," So now we can kind of keep track of the months"
"5742430","5743950"," even as we do these operations."
"5743990","5744390"," Okay."
"5744850","5746810"," And we've answered that question for ourselves. "
"5746910","5753290"," We were like, yes, what, what, you know, month is,"
"5754250","5757930"," like what month is a, you know, September?"
"5758190","5759350"," How much did we spend on cookies"
"5759350","5760490"," or what percentage of our budget"
"5760490","5761550"," did we spend on cookies in July?"
"5762010","5765570"," So we answered that question for ourselves by doing this."
"5765630","5766750"," And what we did was, you know,"
"5766790","5768550"," we divided one column by another."
"5768970","5770390"," And so what it does is it goes through"
"5770390","5774250"," and it goes row by row and it divides each by each. "
"5774330","5776610"," So it says cookie budget divided by budget,"
"5776790","5778090"," cookie budget divided by budget,"
"5778230","5779550"," cookie budget divided by budget."
"5779890","5781850"," And then it gives us a new series"
"5782210","5783950"," that is actually the,"
"5785310","5788010"," that is the division of the two columns."
"5788350","5788510"," Okay. "
"5788830","5790650"," And imagine that would also take a ton of work"
"5790650","5791530"," to do in Excel, right?"
"5791570","5792750"," I mean, if you were going to make a new column"
"5792750","5794070"," and also very error prone,"
"5794410","5795610"," I've never done something like that"
"5795610","5797850"," without creating a ton of errors and stuff like that."
"5798050","5801130"," So, and we're not going to do it in the interest of time,"
"5801150","5804350"," but you can, now I could take this series"
"5804350","5807810"," and add it back into our data frame as a new column,"
"5807890","5808970"," which would be like percentage,"
"5808970","5812030"," we could call it budget percentage on cookies or something."
"5812710","5814250"," And we can add it back in. "
"5814450","5817310"," I won't do it now in the interest of time."
"5818510","5818810"," Okay."
"5818970","5820970"," And one last thing I promised I'd show you is"
"5820970","5822970"," what if we want to plot only the data"
"5822970","5824110"," for September, for example. "
"5824850","5826810"," So we could do df."
"5828350","5828830"," ..."
"5829470","5829950"," Dot. "
"5830490","5830970"," ..."
"5831090","5832090"," L-O-C."
"5832230","5832470"," ""Dot."
"5832850","5834290"," L-O-C."
"5834550","5835490"," For location."
"5835490","5839310"," And then open square bracket. "
"5839570","5840330"," L-O-C."""
"5840670","5841550"," Quote September."
"5842130","5842470"," ""Quote."
"5842510","5845370"," ..."
"5845610","5845950"," Quote."
"5845990","5846470"," September. "
"5847570","5848210"," ""Quote."
"5848450","5848970"," Right bracket."""
"5849270","5849650"," Close square bracket. "
"5849790","5850710"," So it's df."
"5851090","5851830"," L-O-C."
"5852030","5852890"," Open square bracket. "
"5853110","5853310"," Quote."
"5853410","5853790"," September."
"5854030","5854270"," Quote. "
"5854410","5855010"," Close square bracket."
"5856490","5857790"," ""Out left bracket."
"5857930","5858410"," 48. "
"5858570","5859190"," Right bracket."
"5859330","5859610"," Colon."
"5860810","5861730"," Budget five. "
"5863010","5864410"," Cookie line budget zero."
"5865550","5866410"," Month September."""
"5866710","5867490"," So the month is September. "
"5867970","5870010"," Remember our cookie budget for September is zero."
"5870130","5871130"," It's a very sad month."
"5871990","5874230"," And then the budget is five. "
"5876190","5877470"," Very, pretty cool, right?"
"5878090","5881850"," So the, and that is another series."
"5882050","5884030"," And when you do, when you pull out a row,"
"5884090","5887590"," it gives you a series where the index is a,"
"5888730","5891490"," is the column name and the value"
"5891490","5893310"," is the actual value of that data."
"5893310","5893670"," Okay. "
"5893710","5896430"," So if you imagine in your mind,"
"5896470","5901330"," in your mind, just lifting out the row."
"5901750","5902070"," Okay."
"5902170","5903190"," We have our row. "
"5903450","5906670"," Imagine it kind of flying out of the data frame."
"5906870","5910010"," And then we only have that data now."
"5910150","5912850"," So it then takes it and it says, okay,"
"5912910","5913890"," what were the column names?"
"5913990","5916830"," It turns it around and says, what were the column names?"
"5917890","5918430"," Okay. "
"5918670","5920690"," And now the column names become the index."
"5921290","5921570"," Okay."
"5922430","5925890"," So, and so they tell you what that, you know,"
"5925930","5927550"," it gives you a nice little label for that"
"5927550","5928810"," particular item of data. "
"5929050","5930950"," So in this case, it was, our budget was $5."
"5931610","5933170"," We didn't have that much money in September."
"5933430","5935610"," So we weren't able to spend any money on cookies. "
"5935830","5935950"," Okay."
"5936870","5938290"," Now we really will move on."
"5938330","5942210"," There's also a df.iloc, which we won't try out,"
"5942310","5945230"," but that will tell you if you know the number of,"
"5946390","5950290"," you know, where in the data set it is,"
"5950290","5951750"," regardless of what the index is. "
"5952030","5954590"," So you can pull out the first item by doing df.iloc zero,"
"5954930","5956110"," and that would pull out the first item,"
"5956130","5957270"," no matter what the index is."
"5957750","5960330"," So that's df.iloc for index location."
"5961390","5962330"," That's what they named it. "
"5962450","5962510"," Okay."
"5962790","5964850"," So that's another useful one that we won't do."
"5964970","5966870"," Cause I do want to pull in this data set really quick. "
"5969780","5971200"," ..."
"5971320","5972260"," I think we're actually going to be good."
"5972780","5972940"," Okay. "
"5972980","5974780"," So now we're going to do another cool thing."
"5975360","5976420"," I hope that this,"
"5976640","5979140"," I feel like this little bit should be a little bit exciting"
"5979140","5979640"," for you guys."
"5979640","5982240"," So what we're going to do is,"
"5982500","5983120"," we're going to,"
"5983240","5984720"," we're done with this data frame,"
"5984820","5986640"," but we're going to produce a new data frame with,"
"5986860","5987900"," it's a real data set. "
"5988000","5990280"," So what's that we've done so far is toy data, right?"
"5990340","5991120"," It's data we made up."
"5991520","5993420"," Now we're going to work with data that actually reflects"
"5993420","5994360"," something in the real world."
"5994940","5998140"," So what I want you to do is type d,"
"5998300","5999100"," I'm going to clear the screen"
"5999100","6000000"," because we're starting something new,"
"6000600","6002440"," and we're going to overwrite our df variables. "
"6002560","6004260"," So you can kind of say goodbye to the df variable"
"6004260","6006100"," that we made that you worked so hard on."
"6006160","6007020"," So I'm sorry for that."
"6007020","6009180"," We'll do df equals,"
"6010580","6013580"," ""df equals space"""
"6013600","6014760"," equals space,"
"6014760","6015040"," pandas,"
"6016080","6018620"," ""p-a-n-d-a-s,"
"6019980","6020360"," pandas,"""
"6020600","6022700"," read underscore csv,"
"6024300","6025780"," ""r-e-a-d,"
"6026160","6026540"," read,"
"6027060","6028160"," c-s-v,"""
"6028160","6028880"," and then open,"
"6029300","6030620"," open parenthesis,"
"6031800","6032800"," ""csv,"""
"6033580","6034080"," okay,"
"6034280","6035140"," ""left paren"" quote,"
"6036100","6038840"," and then we do,"
"6039120","6040440"," I'm going to give you a URL. "
"6040880","6042480"," So it's going to be http,"
"6043560","6045580"," ..."
"6045680","6046000"," colon,"
"6047420","6048980"," ""h-t-t-p,"""
"6049860","6050760"," slash, slash,"
"6051880","6053720"," bit.ly,"
"6054220","6054700"," for a short,"
"6054780","6055380"," this is a short,"
"6055480","6056980"," a URL shortening service,"
"6058620","6059980"," ..."
"6060240","6060620"," ""bit,"
"6061460","6063100"," dot, l-y,"""
"6063240","6063700"," forward slash,"
"6063700","6065780"," ..."
"6065780","6068420"," n-y-c-b-n-b,"
"6068540","6069840"," for n-y-c-b-n-b,"
"6071300","6074020"," ""n-y-c-b-n-b,"""
"6074040","6074900"," and I'll go over this again,"
"6075620","6077220"," n-y-c-b-n-b,"
"6078260","6079380"," and then close the parenthesis,"
"6080340","6080860"," ""right paren,"""
"6081420","6082820"," I'm going to make sure it worked for me,"
"6082920","6084180"," and then I'm going to explain it again."
"6085000","6085660"," ..."
"6085760","6087600"," ..."
"6088180","6088660"," ..."
"6088720","6089080"," ..."
"6089200","6089800"," ..."
"6089900","6090300"," ..."
"6090680","6091060"," pandas,"
"6091380","6091960"," dot read,"
"6091960","6092060"," ..."
"6093020","6093560"," ..."
"6093980","6094160"," ..."
"6094320","6094840"," ..."
"6095500","6096040"," ..."
"6096340","6096800"," ..."
"6097420","6097760"," ..."
"6098360","6098900"," ..."
"6099280","6099760"," ..."
"6102280","6102820"," ..."
"6103040","6103360"," ..."
"6103460","6103840"," ..."
"6104300","6104400"," ..."
"6105040","6105440"," ..."
"6105620","6105820"," ..."
"6108550","6110090"," ..."
"6110230","6111650"," that was the longest three seconds of my life."
"6113010","6113790"," Okay, so,"
"6115310","6116570"," what did we do there?"
"6116750","6117390"," So we do,"
"6117670","6119150"," we typed df,"
"6119650","6121050"," for our new data frame variable,"
"6121250","6121850"," equals,"
"6122950","6123490"," pandas,"
"6124110","6125230"," dot read,"
"6125330","6125810"," underscore,"
"6126030","6126670"," csv,"
"6126730","6127730"," r-e-a-d,"
"6128050","6128470"," underscore,"
"6128750","6129490"," csv,"
"6130670","6131210"," open,"
"6131990","6132530"," parenthesis,"
"6133110","6133450"," quote,"
"6133690","6134850"," and then we have a URL. "
"6135330","6135910"," So it's going to be,"
"6136210","6137070"," h-t-t-p,"
"6137330","6137770"," colon,"
"6137970","6138210"," slash,"
"6138270","6138610"," slash,"
"6139830","6140130"," bit,"
"6140170","6141010"," dot l-y,"
"6141270","6142010"," b-i-t,"
"6142190","6143090"," dot l-y,"
"6143450","6144310"," forward slash,"
"6144730","6145530"," n-y-c,"
"6145690","6146230"," New York City,"
"6147090","6147750"," b-n-b."
"6148030","6150150"," So it's n-y-c-b-n-b,"
"6150490","6150770"," okay?"
"6151130","6151930"," And helpers can,"
"6151930","6154190"," one of the helpers copy the line"
"6154190","6156790"," and paste it into the chat,"
"6157130","6158550"," and no shame in copying this one,"
"6158590","6159630"," because it's the URL, okay?"
"6160050","6161650"," I tried to make it simple so people could type it"
"6161650","6162470"," if they didn't want to copy."
"6162570","6163790"," I know copying can sometimes be clunky,"
"6164530","6167190"," but we do have it right there in the,"
"6167930","6169810"," hopefully someone will share it in the chat, okay?"
"6170370","6171670"," So df equals,"
"6171870","6173230"," pandas dot read, csv,"
"6173490","6174970"," and then a URL. "
"6175350","6176130"," What is this doing?"
"6176550","6178690"," I've prepared a dataset at that URL,"
"6178910","6179770"," which is a commas,"
"6179830","6180830"," it's basically a spreadsheet."
"6180830","6182570"," It's commas separated values data."
"6183050","6185890"," So it's a spreadsheet that I uploaded to that URL,"
"6186490","6188930"," and pandas very neatly reads it in"
"6188930","6191550"," and imports it all into our DataFrame variable,"
"6191710","6192430"," which is pretty cool. "
"6193450","6195510"," So in that little line,"
"6195650","6197030"," we created a new DataFrame,"
"6197170","6198770"," and we're going to learn a little bit about it."
"6198870","6200430"," So let's run through really quick,"
"6200450","6201190"," because we're just reviewing."
"6201370","6202330"," So I'm going to run through really quick"
"6202330","6203450"," some of the stuff you would do"
"6203450","6205970"," when you get your hands on a new DataFrame. "
"6206770","6208570"," Hopefully you guys are being able"
"6208570","6209690"," to import the DataFrame, okay?"
"6209690","6214930"," Remember it's bit.ly forward slash NYCBNB, okay?"
"6215430","6218650"," B as in Bravo, N as in November,"
"6219210","6221010"," or B as in Bravo, okay?"
"6222930","6224570"," Let's do df."
"6225130","6226870"," So I'm going to, now I'll do the representation,"
"6227490","6228850"," but it's not going to be that helpful."
"6228970","6230610"," Remember our representation is kind of overwhelming. "
"6230730","6231810"," So let's just do df."
"6233350","6236890"," df, ""out left bracket 51, right bracket colon,"
"6239510","6240150"," 48,891."""
"6240150","6240830"," Did you hear that?"
"6240850","6242630"," 48,891. "
"6242730","6245030"," So that's, we're going to talk about this in a minute,"
"6245110","6246610"," but we don't know what that is yet, actually,"
"6246670","6247950"," but we're going to confirm in a minute."
"6248750","6249090"," Something's there."
"6252330","6259310"," ""36485057, 36, 48,892, 36485431."""
"6259490","6260890"," My question, you're probably like, what the hell?"
"6260990","6262730"," It's just basically, it's just printing out random stuff."
"6263030","6265210"," That's because what we have now is a big DataFrame,"
"6265210","6267770"," and it has, well, I'm going to tell you now how big it is."
"6267870","6270610"," So it's going to be, how do we tell how big it is?"
"6271130","6272670"," We don't just look at the representation"
"6272670","6273950"," because that's too much information. "
"6274070","6274510"," It's not useful."
"6274650","6276050"," Let's do df.shape."
"6278070","6282090"," ""df.shape, S-H-A-P-E,"" no parenthesis."
"6282210","6284810"," ""Out left bracket 52, right bracket colon,"
"6285330","6289090"," left paren, 48,895."""
"6289710","6293230"," So this has 48,895 rows,"
"6293710","6295450"," each representing an Airbnb listing,"
"6295970","6299490"," and it has 16 columns, okay?"
"6299570","6301910"," So this is a big, it's not big data"
"6302510","6304090"," because it still runs in our computer or whatever,"
"6304170","6306750"," but it's a much bigger data set than we've used so far."
"6306930","6308310"," And it's real data, okay?"
"6309590","6314350"," This is all Airbnb data from New York City in 2019."
"6314950","6319490"," So pre-pandemic, pre-recent reform"
"6319490","6320890"," of Airbnbs in New York City. "
"6321970","6324630"," And so it represents actual data from that year"
"6325990","6326950"," that we can look at."
"6327350","6328910"," What's the first thing we're going to want to do"
"6329490","6330930"," after we find out the size of it?"
"6330970","6331850"," And it is useful to know the size."
"6331890","6333090"," We have 16 columns to work with"
"6333090","6335370"," and we have almost 50,000 rows, okay?"
"6335450","6336510"," Let me just double check the time. "
"6338030","6339450"," ""2 colon 50 PM."""
"6339830","6340570"," We're going to do some cool stuff."
"6340750","6343770"," Okay, so what we want to do"
"6343770","6345870"," is we want to know what the columns are, okay?"
"6346350","6348730"," Because then the columns will tell us"
"6348730","6352810"," how much, what kind of data we have to work with, okay?"
"6352830","6354030"," So we want the column names. "
"6354490","6356530"," And pretty much if you're working with a new data set,"
"6356610","6358730"," you're going to do this in more or less this order."
"6358810","6361110"," You're going to want to know how big is the data set"
"6361670","6364610"," in terms of, you know, X and Y, rows and columns,"
"6365370","6367750"," how many, and also the second thing you're going to want"
"6367750","6370350"," to know is what is the data we have,"
"6370730","6372650"," which the column names will tell you."
"6372710","6375270"," So let's do df.columns, okay?"
"6380910","6382350"," df.columns."
"6382350","6382970"," df.columns."
"6383510","6384290"," And there are a lot of these,"
"6384410","6385510"," so we'll listen to some of them. "
"6386430","6388090"," ""Neighborhood, latitude,"
"6389510","6392590"," longitude, room line type, price,"
"6393910","6396890"," minimum line nights, number line of line R,"
"6398090","6400170"," reviews, last line review,"
"6401390","6404070"," reviews line per line month, calculate,"""
"6404070","6408250"," and of course the, it's New York City,"
"6408450","6410350"," there has to be a car alarm going off outside,"
"6411410","6413270"," but you're getting a little local flavor."
"6413950","6415850"," But okay, so we have,"
"6418150","6421010"," in our, so now we have our,"
"6422190","6423190"," that is very annoying."
"6424790","6427850"," Okay, so we pulled out our column names"
"6427850","6430570"," and I would say there's a couple that stood out to me, okay?"
"6430570","6432170"," That's df. "
"6435370","6436390"," Oh my God."
"6436630","6440830"," df.theprice, that stood out to me"
"6440830","6441790"," as being really interesting."
"6441930","6443590"," I'm always attracted to stuff like price, okay?"
"6443710","6445310"," So that's some interesting numerical data. "
"6445710","6448010"," We have df.neighborhood, that probably tells us"
"6448010","6449870"," the different neighborhoods in New York City,"
"6449970","6450670"," which is pretty cool."
"6451790","6453290"," And then there's a couple of other ones"
"6453290","6454850"," that stood out, maybe minimum nights."
"6455890","6457810"," But the other one that I found really interesting"
"6457810","6459770"," was df.name, okay?"
"6461190","6464230"," And so each of these represents a different kind of data"
"6464230","6468990"," and df.price is numeric data, it's an integer. "
"6469750","6473190"," And then the df.name, we can check."
"6473330","6474510"," Let's check these really quick."
"6474790","6477430"," So df.price."
"6479890","6481550"," ""48,890.70."""
"6482870","6483430"," ..."
"6483650","6485170"," So I heard the word, I heard 70 there"
"6485170","6487790"," and 48,890, that's the index."
"6488010","6489390"," And then 70 is the price."
"6489390","6491450"," So it's telling us integers,"
"6491750","6494170"," so it's numeric data of some kind, okay?"
"6495090","6496790"," And we could do that with name"
"6496790","6499510"," and in the interest of time, I'll tell you,"
"6499830","6501990"," name is the name of the listing as it appears in Airbnb,"
"6502250","6503970"," which is really interesting, textual data. "
"6504430","6507570"," And then the neighborhood, it's kind of like grouped data,"
"6507630","6508270"," which we'll get into."
"6508370","6510270"," It's a special kind of data called categorical data"
"6510270","6512010"," that we'll talk about next week, okay?"
"6512270","6514730"," But for now, what I'd like to be interested in"
"6514730","6517150"," is let's figure out a little bit about the price, okay?"
"6517770","6519710"," So what, first of all, I'd like to know"
"6519710","6523490"," what is the average price of an Airbnb in New York City?"
"6523970","6525030"," So it would be df,"
"6525930","6527650"," and we kind of did a little bit of this before,"
"6527790","6529670"," df.price.mean."
"6530970","6534670"," ..."
"6534670","6535690"," Remember, this is a real data set"
"6535690","6538810"," and we're running this over almost 50,000 rows. "
"6538950","6540910"," We're getting the mean of almost 50,000 rows."
"6541150","6546490"," ""Out left bracket 55, right bracket colon 152 points."""
"6546490","6547970"," So, okay, 152. "
"6548090","6551470"," So the average price of an Airbnb per night"
"6551470","6555170"," in New York City in 2019 is a little over $150."
"6555810","6557170"," And that sounds really high."
"6557250","6558450"," So maybe you're like, oh, wow,"
"6558590","6563070"," like New York is expensive as I have heard. "
"6563750","6565790"," But before we make any judgments,"
"6565910","6566870"," let's also try the median."
"6567090","6570370"," So let's do df.mean, df.price.mean."
"6571590","6572550"," ""df,"
"6573470","6576610"," dot price,"
"6577610","6580430"," dot ... right paren."
"6580670","6582430"," So df.price.median."
"6582950","6588350"," Out left bracket 56, right bracket colon 106.0."""
"6588450","6589770"," 106.0."
"6590170","6594290"," So the average was almost a little over 150"
"6594850","6597690"," and the median was only 106. "
"6598190","6600170"," So this is interesting, right?"
"6600270","6602330"," And maybe you're like, oh, that's interesting."
"6602330","6604110"," That sounds a little more reasonable."
"6604330","6605690"," I mean, maybe it still sounds expensive to you,"
"6605770","6608430"," but you're like, oh, that's actually less"
"6608430","6611410"," than I expected from the average. "
"6611690","6613570"," So this actually does tell you something."
"6613990","6615710"," And this is the kind of thing you learn"
"6615710","6617370"," as you do more with data science."
"6618190","6620790"," When you look at the mean and the median"
"6620790","6625050"," and the median is significantly lower than the mean,"
"6625390","6627430"," it tells you something about the shape of the data. "
"6627810","6629570"," And they call this right skewed data."
"6629570","6632090"," This specific situation is called right skewed data."
"6632650","6635610"," And what that means is there's a couple of,"
"6635790","6637190"," there's some items in the data set"
"6637190","6638410"," that are bringing up the average. "
"6638530","6640430"," So some, in this case, very expensive items."
"6641030","6642530"," And I'll draw you an analogy."
"6642830","6645730"," Like imagine all of us together,"
"6646090","6648430"," we imagine each of our incomes, right?"
"6648510","6651150"," So imagine, and we probably all have fairly normal incomes. "
"6651410","6653770"," Maybe some of us are whatever, you know, I don't know."
"6653850","6654790"," Maybe there's some millionaires here."
"6655150","6656890"," We say we all have pretty normal incomes, right?"
"6656950","6658370"," All of us who are in this workshop. "
"6658830","6661650"," And we collect us all together in a data set."
"6661750","6665350"," So our data set is all of our, or let's say our wealth, okay?"
"6665710","6669630"," Okay, so we have each of our individual net worth"
"6669630","6670010"," or whatever."
"6670390","6672550"," And then we take someone like Jeff Bezos"
"6672550","6673430"," or something like that. "
"6673490","6676330"," Someone who has a gazillion, trillion, billion dollars, okay?"
"6676710","6678490"," And we add Jeff to the data set,"
"6678550","6679910"," Jeff Bezos, Mr. Bezos."
"6681170","6683570"," Suddenly the average in that data set"
"6683570","6686510"," is gonna shoot up by like probably more than a billion."
"6686510","6689090"," I think there's something like 50 people in this room. "
"6689570","6691890"," Jeff Bezos is definitely worth more than $50 billion."
"6692410","6694270"," So the average is gonna go up by more,"
"6694530","6696050"," at least a billion dollars."
"6696470","6700830"," However, the median will only go up very slightly. "
"6701630","6702930"," And that, why is that?"
"6703290","6706630"," That is because the mean,"
"6706770","6708710"," the average is very sensitive to high numbers"
"6708710","6710570"," that kind of like outliers that throw it off."
"6710630","6712370"," Whereas the median is the middle most number."
"6712830","6715030"," So the middle most number in the Jeff Bezos example"
"6715030","6715930"," didn't change too much. "
"6715930","6717810"," So the median often tells you more"
"6717810","6721110"," about the most representative data in certain data sets."
"6721490","6724410"," Whereas the average is kind of like tells you"
"6724410","6727010"," it's a little more thrown off by big numbers"
"6727010","6728950"," that are included or big outliers, okay?"
"6730110","6731870"," In cooperation with each other,"
"6731870","6733230"," when we run on both of them,"
"6733710","6736230"," we kind of configure and some people,"
"6736450","6738890"," a sighted person might try to learn this kind of information"
"6738890","6740110"," by creating a bar graph."
"6740190","6742910"," And then the sighted person would see visually"
"6743370","6745450"," that there's a whole bunch of big values"
"6745450","6748610"," at the end of the data sets. "
"6749070","6751490"," But we can also make that intuition"
"6752150","6753830"," based on the mean and the median,"
"6754010","6756710"," which is these kind of statistical numbers that we can use."
"6757230","6758590"," And now let's kind of,"
"6758830","6760610"," this will be kind of the last thing we do in the workshop."
"6760750","6762570"," I kind of want to tell you what we're doing next time. "
"6762610","6765350"," And I'll give you a little kind of philosophy"
"6765350","6767190"," of the non-visual stuff before we go."
"6767650","6769630"," But this is the last Python we'll do."
"6769970","6771690"," Let's confirm our hypothesis. "
"6771850","6774950"," So our hypothesis is that there's a few very large values"
"6774950","6780410"," in this data set that are throwing off our analysis,"
"6781990","6785250"," but that are not kind of skewing the data"
"6785250","6786570"," over toward the expensive side."
"6787450","6800190"," So let's do df.price.sort underscore values."
"6803010","6805670"," So that sorts the price from least to greatest. "
"6806290","6807750"," Now I'm going to run this,"
"6808170","6809450"," and then I'm going to tell you"
"6809450","6810710"," to add something to the end of it,"
"6810750","6811950"," but I'm going to run it really quick."
"6815090","6817370"," ""40,433, 9,999."
"6821470","6822450"," 12,342, 9,999."""
"6822450","6823570"," So that tells us right there."
"6824210","6826390"," So it's actually, it's telling us from highest to lowest."
"6826910","6832070"," So I heard there, oh, you know what it is?"
"6832170","6835810"," What's confusing here is that what Pandas usually outputs"
"6835810","6837830"," is it's from the least to the greatest,"
"6838050","6840190"," and it prints out the first five of the least,"
"6840650","6843130"," then it skips all the rest of the data,"
"6843410","6844910"," then it prints the last five. "
"6845010","6847250"," But because I made the text so big in this,"
"6847330","6849150"," it's only printing out the last five,"
"6849550","6851410"," even though it's supposed to print out all of it, okay?"
"6851490","6853190"," So it's being a little deceptive here,"
"6853190","6855790"," and it's only because of me magnifying"
"6857030","6859110"," this command line environment so much, okay?"
"6859130","6860390"," It's printing out the last five,"
"6860710","6862470"," but really what it tries to do is print out"
"6862470","6864090"," the first five and the last five."
"6864730","6866110"," So what I want you to do is,"
"6866890","6868150"," so it'll work on your computer"
"6868150","6869990"," because you may not have magnified to the same extent."
"6870150","6870770"," Press up. "
"6872030","6874650"," ""In left bracket 58, right bracket colon,"
"6875390","6879510"," df.price.sortline values left paren, right paren."""
"6879730","6880690"," Add to the end of that."
"6880770","6881570"," ""In left bracket."""
"6881570","6883690"," Add to the end of that dot,"
"6885710","6890390"," dot tail, T-A-I-L, open parenthesis, close parenthesis."
"6891370","6893770"," ""T-A-I-L, left right paren."""
"6893770","6895290"," So now we're chaining three dots together. "
"6896710","6899430"," ""Out left bracket 58, right bracket colon,"
"6900470","6903490"," colon, left paren, right paren."
"6904590","6907270"," Out left bracket 58, right bracket colon."""
"6907290","6908770"," So this is just a bunch of preamble. "
"6908910","6909910"," We haven't gotten to the data yet."
"6912810","6915470"," ""40,433, 9999."
"6917610","6920870"," Name colon, price, type colon."""
"6921170","6924170"," So it printed out the last five"
"6924850","6930190"," and basically it says there are a bunch of them"
"6930680","6931850"," with, we can review to see,"
"6931930","6933570"," but there are a bunch that are 9,999"
"6934060","6935510"," and a couple that are 10,000."
"6935730","6936150"," ""Blank."
"6937910","6942750"," Name colon, 29,238, 10,000. "
"6946150","6947770"," 9,151, 10,000."
"6950770","6951850"," 17,692, 10,000."""
"6951850","6953850"," So there's three at least that are 10,000. "
"6954010","6954690"," And then I know from experience."
"6957070","6959270"," 12,342, 9,999."
"6959270","6961090"," Okay, so we have a whole bunch of really,"
"6961250","6963430"," and probably there's some weird reason"
"6963430","6964110"," those are in the dataset. "
"6964270","6965750"," Probably people aren't really paying 10,000"
"6965750","6966350"," for their rooms."
"6966470","6967990"," They're probably doing something"
"6967990","6970050"," like jacking up the price temporarily"
"6970050","6971090"," or something like that"
"6971090","6972710"," so that people don't rent the room"
"6972710","6973990"," in some day that they want,"
"6974050","6974830"," or something like that."
"6975130","6976310"," Something weird is going on there. "
"6976410","6978070"," And that's why I say the logic"
"6978070","6980510"," and the context sensitiveness comes in"
"6980510","6982750"," when you start looking at that real life data like this,"
"6982870","6984490"," which we'll do more next time."
"6985450","6987130"," But now, and that last one's kind of cool."
"6987230","6990330"," So what we did was we did df or data frame. "
"6990590","6993310"," We pulled out the column, df.price."
"6993850","6997230"," Then we sorted the values in the column.sortValues."
"6997690","7000550"," Then we pulled out the last five"
"7000550","7002290"," so we could get an idea"
"7002290","7004770"," of what the last five most expensive items are."
"7005790","7007750"," Okay, so, and this is kind of,"
"7007830","7008670"," as we go in pandas,"
"7008710","7009830"," you'll see we'll sort of chaining"
"7009830","7010610"," and chaining and chaining"
"7010610","7013430"," and combining together more and more items like this."
"7013930","7016650"," Okay, so I kind of just want to say"
"7019950","7022230"," that just for the little bit"
"7022230","7023370"," of the non-visual philosophy"
"7023370","7026870"," before we get into the next workshop. "
"7027010","7028570"," And we're basically done with the Python here."
"7028910","7032970"," So, but it's really important"
"7032970","7034030"," when you're a screen reader user"
"7034030","7037590"," to control how much information is coming to you"
"7037590","7039250"," and exactly what information."
"7039650","7042390"," And luckily this environment that we're in"
"7042390","7045430"," and pandas really does give you full control over that. "
"7045610","7050210"," Okay, and in fact, I would say we as non-visual people,"
"7050210","7052330"," we're not really at that as much of a disadvantage"
"7052330","7055390"," as you would think in terms of doing things"
"7055390","7056430"," totally non-visually."
"7056650","7058070"," And that is because, for example,"
"7058250","7060370"," when a sighted person prints out that data frame,"
"7060990","7063230"," the data is too big to look at visually anyway."
"7063310","7065950"," There's 16 rows, there's 50,000,"
"7066570","7068810"," oh, sorry, 50,000 rows, there's 16 columns. "
"7068990","7071450"," It's just too much to look at as a practical matter."
"7071730","7073130"," And in fact, pandas knows this."
"7073330","7076510"," And when a sighted person prints out a data frame"
"7076510","7077390"," that's long like this,"
"7077690","7079390"," it just shows the first five rows. "
"7079390","7081610"," I dot, dot, dot, and the last five rows"
"7081610","7083670"," because it knows it's not useful."
"7083830","7086690"," And my sighted students often ask me,"
"7087170","7089290"," hey, how do I change it to see all the rows?"
"7089350","7090910"," Because they just wanna go looking through the data."
"7091330","7094510"," And I say, it's actually, no, do not do that"
"7094510","7097410"," because you too will become overwhelmed. "
"7097650","7100130"," They need to learn the same thing that I'm showing you,"
"7100510","7103390"," which is to pull out the most specific information"
"7103390","7106290"," that they can and to be efficient that way."
"7108450","7113250"," I would also say that the other thing,"
"7113330","7115030"," and we're gonna get more into this next time."
"7115430","7117390"," And we only kind of scratching the surface of it here"
"7117390","7118710"," by learning some of the fundamentals,"
"7119290","7121910"," but that what I'm gonna try to show you"
"7121910","7125070"," is that there are ways of working with the data"
"7125630","7127710"," that will give you the same information"
"7127710","7130670"," or it's very similar information that a,"
"7130790","7134610"," say a pie chart, bar chart, line chart would give you. "
"7134610","7139450"," But instead of using a visual app, a visual approach,"
"7139950","7143970"," we use, we try to explore the data"
"7143970","7145550"," by having a conversation with the data,"
"7145730","7148330"," by being like, oh, the median is this."
"7148470","7150270"," Well, that makes me curious about the mode."
"7150370","7152390"," What's the most common value in there?"
"7152490","7155210"," And then you build up a mental model"
"7155850","7158370"," of the dataset in your mind,"
"7159750","7163990"," but without like that kind of visualization approach. "
"7165170","7167390"," And it's very, it's honestly, it's very practical."
"7167690","7170790"," It really can build up a mental model of your data"
"7171290","7172970"," through this conversational method."
"7173530","7175450"," I'm not gonna say it's gonna be exactly as good"
"7175450","7177370"," all the time, but then we also have sonification,"
"7177570","7179370"," which we'll do in the last two workshops. "
"7179610","7182710"," So we can access some of that condensed information"
"7184030","7185770"," that some people get in a chart."
"7185770","7188530"," Okay, so that's my pep talk for next time."
"7188590","7189230"," We're gonna learn some,"
"7189390","7191910"," we're gonna lean into this conversational style"
"7191910","7192390"," with the data. "
"7193050","7195610"," We're gonna do this exploratory data analysis"
"7196290","7198090"," to get a feel for this dataset"
"7198090","7201890"," and to answer some actually quite specific questions."
"7201890","7203890"," Like for example, what's the neighborhood"
"7203890","7208370"," with the most expensive apartments and so on, okay?"
"7209690","7211190"," We're gonna all do that next time."
"7211190","7217870"," For people who are feeling adventurous this week,"
"7218050","7221270"," between now and Tuesday, I have in the curriculum,"
"7221890","7223990"," in addition, in the curriculum,"
"7224210","7226470"," I have added a challenges section to the end. "
"7226550","7228090"," So it has three little challenges."
"7228790","7232450"," They only use, or they can be completed"
"7233070","7234950"," with items that we learned in this tutorial."
"7235070","7236550"," There may be easier ways to do it"
"7236550","7238310"," to solve those challenges and pandas,"
"7238310","7240110"," but you can definitely solve them"
"7240110","7243030"," with the methods, attributes, techniques,"
"7243170","7245250"," and everything we've learned in this tutorial, okay?"
"7245310","7248190"," And they're like real questions about the data,"
"7248590","7251250"," this dataset that you can try to figure out"
"7251770","7254510"," if you want to challenge yourself between now and Tuesday. "
"7255130","7257030"," Okay, and I'll also say maybe just cause you're not,"
"7257390","7258650"," maybe it's not something you're used to,"
"7258810","7261050"," the curriculum that's been created"
"7261050","7262310"," for the first and second workshops,"
"7262530","7264890"," they've really been designed for independent work."
"7265170","7266550"," So if you haven't looked at them,"
"7266550","7267950"," they're very descriptive."
"7268250","7270630"," I'd say they actually have more information in them"
"7270630","7273090"," than I can get across to you in the workshops. "
"7274190","7277510"," And they're very talky, just like I'm talky,"
"7277770","7278590"," and conversational."
"7278890","7282210"," So they're not just like a dump of the information"
"7282210","7282830"," in this workshop."
"7283030","7284450"," They're actually like designed"
"7284450","7286190"," so people can follow along independently"
"7286190","7287910"," and without even looking at these workshops. "
"7288070","7289750"," So if you haven't looked at those as a resource,"
"7290050","7290970"," they're there for you."
"7290970","7293290"," If you're feeling a little overwhelmed, you wanna review."
"7294230","7296610"," And then finally, if you wanna kind of, you know,"
"7296970","7297870"," drop off the meeting or whatever,"
"7297930","7299570"," I'm just gonna talk about procedural stuff now. "
"7299870","7304130"," On Thursday, we will be, have another office hours."
"7304250","7308410"," And every week after the Tuesday workshop,"
"7308510","7309670"," we'll have a Thursday office hours."
"7309790","7311530"," It's at the same time during the day. "
"7311850","7316750"," So it's 1 p.m. Eastern time, 6 p.m. Grand Meridian time,"
"7316910","7317910"," or GMT, okay?"
"7318590","7318950"," And,"
"7322710","7323690"," and thank you."
"7323790","7325050"," I'll stop the recording there."
"7325450","7327710"," And I'm gonna stick around for questions, okay?"
"7329390","7330650"," Actually, if people have questions"
"7330650","7332730"," about the data science portion,"
"7332870","7334030"," I'll leave the recording running"
"7334030","7335190"," so people can benefit from that. "
"7336150","7338190"," So thank you all and have a great day."
"7342190","7343770"," Okay, so helpers, were there questions"
"7343770","7348170"," in the chat that came up that would be good to address?"
"7348310","7349790"," Or does someone wanna get on the mic"
"7351290","7352090"," and ask a question?"
"7356720","7357380"," Let's see."
"7358040","7361380"," I think, I think just if anyone wants to hop on the mic. "
"7362420","7363980"," Just to be clear, I wanted to make sure,"
"7364120","7365660"," people have permission to leave now."
"7365920","7368080"," If you're worried about social permission to leave,"
"7368440","7369400"," you have permission to leave now."
"7369520","7370900"," This is, this is, you know,"
"7371200","7372620"," even more optional than the workshops. "
"7373260","7374240"," Just wanna make sure that's clear."
"7375560","7377300"," Sorry, we have a question from Liam."
"7377640","7380380"," Can we go through saving this as a file like last time?"
"7380480","7382020"," So I believe the iPython session. "
"7387610","7389090"," There were my headphones fell out there"
"7389090","7389630"," and I didn't hear you."
"7389630","7390010"," I didn't hear it."
"7390210","7390990"," So I wonder if you could. "
"7392170","7393050"," Sorry about that."
"7393130","7393610"," We have a question from Liam now."
"7393610","7394810"," I'm waving my hands around. "
"7397490","7398570"," Oh, can you still not?"
"7398750","7399530"," Oh, are your headphones still not on?"
"7399530","7400330"," I can hear you now."
"7401070","7401630"," Oh, okay."
"7401810","7402630"," Whoops, okay, whoops. "
"7402950","7403070"," Okay."
"7403410","7406150"," Liam asks, can we go through saving this as a file"
"7406150","7407350"," like last time?"
"7407410","7409390"," So I believe saving the iPython session."
"7409770","7410070"," Yes, okay. "
"7410210","7411830"," That's great to review and thank you, Liam."
"7413030","7413410"," Okay."
"7413770","7418910"," So to save, we use what's called a iPython magic command. "
"7418910","7419390"," Okay."
"7420070","7423050"," Those all start with a percentage sign."
"7423430","7423530"," Okay. "
"7424490","7426470"," So the first thing you have to do"
"7426470","7428890"," is you have to know what the last line,"
"7429070","7431030"," the number of the last line you input was,"
"7431090","7432510"," because we'll need that for this command."
"7432950","7435050"," So I'm just going to press enter so I can hear my input."
"7436090","7438170"," ""In left bracket 59, right bracket."""
"7438350","7439390"," So I heard 59."
"7440030","7442730"," So that means we've entered 58 lines of code."
"7442850","7444990"," So we want to save from one to 58. "
"7445570","7447510"," It's kind of annoying that it makes us put that in,"
"7448030","7449730"," but it's just how it's designed."
"7449850","7451950"," I want to do a, maybe I'll do a pull request and be like,"
"7452730","7455570"," it's supposed to actually save everything by default,"
"7455670","7456970"," but there's a bug where it doesn't."
"7457670","7460690"," All right, so let's do %save. "
"7463090","7463530"," ""%save."""
"7464550","7464990"," Space."
"7465670","7466110"," ""Save."""
"7466870","7467390"," And then."
"7467430","7467850"," Space."
"7468150","7470190"," And then now we want to put in a file name"
"7470190","7474010"," and it will, if you don't put a .py at the end,"
"7474310","7476590"," it will add the .py for you. "
"7476590","7479870"," So what will be created is going to be a Python text file,"
"7480270","7483650"," a .py file, which is a text file with Python code in it."
"7483810","7485530"," But I'm going to call this pandas."
"7485610","7488550"," ""P-A-N-D-A-S."""
"7488890","7489410"," Pandas."
"7489790","7493590"," ""F-U-N-D-A-M-E-N-T-A-L-S."""
"7494290","7496150"," I just called it pandas underscore fundamentals. "
"7497370","7500030"," And I didn't put the .py because it will add that for us."
"7500770","7501290"," ""Fundamentals."""
"7501530","7503170"," So it's %save. "
"7503170","7503450"," Sorry."
"7503910","7504430"," %save."
"7504870","7505390"," Space. "
"7505390","7506930"," Pandas underscore fundamentals."
"7507630","7509690"," And then we have another space."
"7509950","7510590"," Then one. "
"7510990","7511750"," Number one."
"7511810","7512090"," One."
"7512330","7512890"," Hyphen. "
"7513470","7513770"," One."
"7514610","7515170"," Two."
"7516050","7516750"," 58, I think was the number. "
"7516990","7517430"," Five."
"7517590","7517870"," Eight."
"7518990","7521630"," Let me just, I think that hyphen. "
"7522710","7524970"," ""158 is neither a string nor a macro."""
"7525110","7526170"," Yeah, I didn't."
"7526190","7526610"," ""58."
"7527150","7527610"," Five."""
"7527610","7528770"," I didn't properly put the hyphen in."
"7529090","7529510"," Dash. "
"7530070","7530470"," ""Five."
"7530630","7530910"," Eight."
"7531250","7531750"," D-F. "
"7532670","7534050"," D-F dot shape."""
"7534050","7536030"," And what gets printed out is all the,"
"7536370","7538910"," so what gets printed out to the screen here,"
"7539510","7540710"," and what we're hearing,"
"7540850","7544150"," is all of the stuff that we have done in the workshop."
"7545510","7548510"," But it actually, it should have put it in the file, okay?"
"7548790","7553170"," And we can actually check that using another magic command. "
"7553230","7553930"," So I'll double check it."
"7554230","7554550"," ""Percent."
"7555290","7555410"," ..."
"7555650","7556550"," L-S."""
"7558070","7559070"," ..."
"7559310","7559730"," ..."
"7560070","7562230"," And I call that pandas underscore fundamentals. "
"7563150","7564950"," ..."
"7565910","7566430"," ..."
"7566430","7566810"," ..."
"7566810","7566850"," ..."
"7566850","7566870"," ..."
"7566870","7568630"," ""Volume in drive C has no label."
"7569850","7573230"," Volume serial number is 36F6-B."""
"7573250","7573370"," Okay, printing out a lot of stuff from the review."
"7573670","7574990"," ""Volume in, in left,"
"7575190","7579470"," volume, blank, directory of C, blank, file not found."""
"7579790","7581490"," Oh, cause it made it a dot P-Y file."
"7581590","7582270"," Well, whatever, don't worry."
"7582290","7583250"," It did save it anyway. "
"7583350","7586690"," Let's just not get too deep into that."
"7586750","7588750"," But there's ways to check if the file is actually created."
"7589070","7590510"," But you can go, by default,"
"7590510","7594490"," it will save it in your users folder and your name. "
"7594810","7597790"," So if your name is Liam,"
"7598350","7601130"," it would be users forward slash or backslash Liam."
"7601870","7605630"," Then you have to look in that folder in whatever the Windows Navigator,"
"7605750","7608230"," whatever they call the program where you look at the files and folders,"
"7608330","7609910"," and you should see a file in there,"
"7610210","7612050"," whatever.py, whatever you gave it."
"7612590","7614690"," Sorry. Thanks for asking that because it's useful to"
"7614690","7616370"," review and people like to save their sessions."
"7617030","7619790"," Now, I can share this with people if they ask for it,"
"7619830","7621350"," so that's also good. I might have forgotten. "
"7623370","7624390"," Anyone else have a question?"
"7624650","7625070"," Yeah. Hi."
"7625190","7626830"," I have two questions. This is Juan."
"7627490","7627850"," Hi, Juan."
"7627890","7630430"," Question one is a silly question,"
"7630570","7633990"," but I noticed when you're using your IPython,"
"7634230","7637190"," when you start entering multi-line input,"
"7638370","7639530"," you hear a colon,"
"7639810","7643130"," but in mine, it uses a dot, dot, dot ellipses. "
"7643130","7647370"," Is there a reason that mine is different than yours?"
"7648150","7651970"," There's a good question. Let me just see what I get just to confirm."
"7652230","7653350"," So if I make a dictionary. "
"7654730","7655290"," Left braids."
"7655290","7658370"," It's really odd. I think visually. "
"7658370","7659270"," Because I like the colon."
"7660450","7661330"," It's less verbose."
"7661330","7663150"," You like the colon. Well, the thing is,"
"7663170","7667390"," yours is accurate and mine is inaccurate because it's mine."
"7667530","7670890"," That's what it's actually putting on the screen is an ellipsis."
"7670890","7672470"," I can see with my little vision here. "
"7673490","7677850"," Oh, so it's maybe NVDA reading ellipses as a colon."
"7679070","7681270"," I don't know how NVDA would read it."
"7681430","7683510"," I mean, NVDA does mess up output,"
"7683730","7687950"," but I don't see it doing a reading as a colon. "
"7688410","7690130"," I would say the possibilities,"
"7690250","7692810"," it's order of likelihood are one,"
"7693290","7696650"," that I'm using an older version of IPython,"
"7696790","7700390"," which I know I am because I was too lazy to reinstall it,"
"7700390","7701730"," but there was really no reason to do it."
"7702230","7705390"," And they fixed this, but this was a bug and they fixed it."
"7705490","7707670"," So that's a fairly likely possibility. "
"7708710","7711870"," Two, so if I installed a new, I updated my version here,"
"7712150","7714490"," which honestly I've had on this for years,"
"7715070","7716770"," so it's probably kind of out of date."
"7717830","7719950"," Can I get version information about that big version?"
"7721570","7725190"," I notice you're running Python 3.8 and I'm running 3.12."
"7725350","7727410"," You're probably on 3.12."
"7727510","7728930"," Yeah, so that's a lot of versions out of date."
"7729650","7732210"," So, you know, so I would say it might've,"
"7732350","7733510"," there might've, they might've fixed,"
"7733770","7735470"," that might be a bug that they fixed. "
"7735610","7737710"," That seems fairly likely given how out of date mine is."
"7738270","7742030"," I would also say another possibility is I have magnified"
"7742030","7745490"," or like I've made the font like 70 something,"
"7745990","7747890"," which is kind of all source of a lot of bugs"
"7747890","7751370"," with NVDA right now because, you know,"
"7751370","7753750"," it's cutting things off, it's doing weird things like that."
"7753790","7756270"," So it could be a source of something like that. "
"7757090","7759490"," And yeah, I could have a different NVDA setting,"
"7759590","7761730"," but I think that's almost a less likely possibility"
"7761730","7763090"," because it's so weird."
"7763690","7765610"," Okay, it's probably because, yeah,"
"7765650","7767130"," your version is way older than mine."
"7767690","7769950"," Okay, my second question is something you kind of"
"7769950","7772090"," very touched very lightly on,"
"7772150","7775750"," like a single sentence last time, but I was just curious. "
"7777750","7783490"," So the magic command per edit, so it opens Notepad."
"7783490","7786170"," Is there, do you know how, do you know how to change that?"
"7787210","7788870"," Because it's opening Notepad."
"7788990","7791650"," It's kind of a little more like an office hours thing"
"7791650","7793390"," because it's a multi-step process. "
"7793730","7799850"," Yeah, but basically what we're gonna do is change a setting."
"7800790","7802510"," There's a functionality here,"
"7802630","7804110"," a magic command to change settings"
"7805670","7808670"," and we will use it to change the setting,"
"7809850","7815350"," which will be the command line command for the node."
"7815550","7816910"," Probably you want, do you want VS code?"
"7817050","7818090"," You probably want VS code, right?"
"7818190","7819170"," Yeah, well, it's okay. "
"7819250","7820130"," I don't need it exactly."
"7820310","7821830"," I just want to know, I just want to make sure"
"7821830","7823330"," it's not like something I change in Windows."
"7823430","7826510"," If it's something I change in IPython,"
"7826630","7827610"," or is it something that changes?"
"7828130","7831890"," Yeah, you can change it in, yeah, I don't think it,"
"7832030","7833710"," it may open the default text editor"
"7833710","7834830"," for your operating system. "
"7835210","7836950"," So if there's a way to change it in Windows,"
"7836950","7838210"," that's worth trying."
"7838730","7840510"," But I do think it does require,"
"7840710","7843910"," I suspect it requires a change of setting in,"
"7844810","7848390"," or in either the command line or IPython."
"7850050","7851430"," But I will-"
"7851430","7853110"," I can Google that, I can Google that. "
"7853170","7854770"," Yeah, yeah, exactly."
"7855090","7855730"," But you know what?"
"7856690","7858410"," It's something that might be useful for people."
"7858690","7860450"," So I might look it up and include it"
"7860450","7862550"," in the resource that I'm creating here. "
"7862950","7864730"," So people know to change it."
"7864870","7866630"," And it's useful, like if VS code opens"
"7866630","7867710"," and then you can edit stuff"
"7867710","7869830"," and use your full screen reader and everything,"
"7870050","7871610"," save it, and then it runs it in there."
"7871710","7873470"," That's a really, kind of a nice workflow. "
"7876170","7876430"," Yeah."
"7877390","7880010"," I mean, it was okay to use Notepad, but-"
"7880010","7882190"," And Notepad stinks, you know, it's like-"
"7882250","7885350"," I mean, for simple, like setting up structures,"
"7885670","7887270"," like simple dictionaries, isn't a big deal,"
"7887350","7890390"," but the auto-completion in VS code is way better."
"7890610","7893030"," And so it just makes coding a lot easier. "
"7893930","7895570"," Notepad++ is also pretty good."
"7895910","7896970"," It is accessible."
"7897610","7898590"," So, cool. "
"7898970","7899130"," Awesome."
"7901030","7901750"," That's Juan, right?"
"7902010","7902410"," Thank you, Juan."
"7902710","7902970"," Yes. "
"7904130","7905650"," Anyone else have a question, want to get on the mic?"
"7920480","7922340"," Well, if that's all the mic-friendly questions,"
"7922560","7924260"," feel free to jump in before I end here."
"7924340","7925400"," I guess we'll end the recording"
"7925400","7926980"," and then I'll stick around for a little bit"
"7926980","7927500"," if people want. "
