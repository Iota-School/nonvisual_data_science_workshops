WEBVTT

1
00:00:00.330 --> 00:00:08.730
All right, well, welcome all to the last workshop in the non-visual data science workshop series.

2
00:00:13.690 --> 00:00:21.950
My name is Patrick Smyth. I am the chief learner at IOTA, and so this is the last workshop in our

3
00:00:21.950 --> 00:00:26.010
non-visual data science workshop series, so workshop number five.  It's our second workshop

4
00:00:26.010 --> 00:00:33.030
on sonification, and Sarah Kane is going to be, you know, leading us in a little further exploration

5
00:00:33.030 --> 00:00:41.270
of making data representations with sound rather than sight, and I just want to go through a few

6
00:00:41.270 --> 00:00:50.790
administrative items, and then we'll get started. So we will, I'm in the final stages here. I'm

7
00:00:50.790 --> 00:00:54.910
waiting just to hear about something about the server setup, but we're going to have a mailing

8
00:00:54.910 --> 00:01:02.930
list set up for people getting started with data science with a visual impairment,

9
00:01:03.690 --> 00:01:11.290
so I'm going to send out an email when that's all set up.  You'll see that in an email that will go

10
00:01:11.290 --> 00:01:17.170
out. Hopefully, I'll have it done by the recording email that will go out tomorrow, most likely,

11
00:01:17.830 --> 00:01:24.190
but if not, it'll be later in the week. It'll be its own separate email.  We also have a couple

12
00:01:24.190 --> 00:01:28.570
of events coming up that I'd like to kind of highlight to you, so I'd recommend keeping an

13
00:01:28.570 --> 00:01:36.110
eye on the email following this, but, you know, one, for example, is Tony Fast, who's been coming

14
00:01:36.110 --> 00:01:45.610
to these workshops and is doing an event with Space Telescope Science Institute related to,

15
00:01:46.190 --> 00:01:50.670
you know, basically the topics that we're doing here. He's developing a

16
00:01:52.910 --> 00:01:58.410
accessible version of Jupyter Notebooks and may be an interesting time to, you know,

17
00:01:58.450 --> 00:02:02.670
if you're interested in that, it sounds good. He may need some testers and so on in the coming

18
00:02:02.670 --> 00:02:12.190
weeks and months to try out his prototype, so, and, you know, the usual, I'd just like to thank

19
00:02:12.190 --> 00:02:20.310
a couple of people.  We will, our helpers are in the room, so we have Elizabeth and Alex in the

20
00:02:20.310 --> 00:02:26.950
room today. I will also be here helping out, so if you have any questions, just drop them in the

21
00:02:26.950 --> 00:02:35.030
chat and one of us will respond to you, and you can either message myself, Patrick Smith,

22
00:02:35.850 --> 00:02:43.810
Alex Ogden, or Elizabeth Sola privately if you prefer, or you can just ask your question

23
00:02:43.810 --> 00:02:50.710
publicly and we'll manage it that way. I'd also like to thank Pandas and NumFOCUS

24
00:02:51.200 --> 00:03:00.850
for hosting these workshops and, you know, and especially Patrick Hofler, who's a Pandas

25
00:03:00.850 --> 00:03:08.630
core developer, who sort of helped us put this series together.  And finally, there's one

26
00:03:08.630 --> 00:03:16.630
small sort of technical item that a couple of people have emailed me about one specific thing.

27
00:03:16.850 --> 00:03:22.670
So, in the second and third workshops, we learned how to, maybe even as far back as the first,

28
00:03:22.770 --> 00:03:31.290
we learned how to use the IPython magic command save, so %save and %load, and so people were

29
00:03:31.290 --> 00:03:34.870
not really having so much trouble with the save command, but then when they were loading

30
00:03:36.110 --> 00:03:44.010
their files, there was some difficulty with the behavior that is experienced when you load. So,

31
00:03:44.110 --> 00:03:47.370
the part that I think I didn't explain, and I'm going to update the tutorial,

32
00:03:47.970 --> 00:03:55.070
I have an issue open, so I will not forget that, but the extra step that we sort of left out is

33
00:03:55.070 --> 00:04:01.850
that when you do the %load and the file name to load in your code, then once that successfully

34
00:04:01.850 --> 00:04:07.510
executes, what it basically does is it kind of like almost like types in all the code,

35
00:04:07.790 --> 00:04:14.530
so it's in a giant block in IPython, and in order to run that giant block, so you may hear

36
00:04:15.050 --> 00:04:20.829
different things, you may hear the code that you imported, you may hear dot, dot, dot, that's what

37
00:04:20.829 --> 00:04:25.910
some people were hearing, but basically in order to sort of complete the loading process, you need

38
00:04:25.910 --> 00:04:33.110
to hit the enter button twice, okay, and once that happens, it basically is as if you typed in

39
00:04:33.110 --> 00:04:40.730
all of that code yourself, and it runs each line separately, and once that's done, if you want,

40
00:04:40.810 --> 00:04:47.130
you can clear the terminal with control L, and then you should have a nice clear session

41
00:04:48.930 --> 00:04:54.670
with all the variables and so on available to you that you had before, and there's also,

42
00:04:54.670 --> 00:04:59.230
some people were asking about how to store specific variables and so on for next time,

43
00:04:59.310 --> 00:05:02.870
so for example, if you want to store a data frame, and for that, I would take a look at

44
00:05:02.870 --> 00:05:09.250
the %store magic command, so essentially, you could do a %store and the name of a variable,

45
00:05:09.410 --> 00:05:18.130
and it will save it for you to load it in in a future session, and I think it's %storer-r

46
00:05:18.130 --> 00:05:22.230
or something like that will allow you to load variables, so that's something people seem to

47
00:05:22.230 --> 00:05:25.430
have a lot of interest in, and a few people were emailing about it, so I thought I'd cover it.

48
00:05:26.610 --> 00:05:34.390
All right, so I think that's everything administratively, and of course, you know,

49
00:05:35.330 --> 00:05:44.390
I guess I'll maybe spill a little bit now since, you know, I think people are most engaged right

50
00:05:44.390 --> 00:05:50.550
at the beginning, and so I'll just say, you know, I'll also say this at the end, but these workshops,

51
00:05:50.550 --> 00:05:56.390
you know, it's been a real privilege to put together these workshops. We will be creating a

52
00:05:56.390 --> 00:06:00.990
website specifically for the curriculum, so it won't always be on GitHub. Once it kind of stabilizes,

53
00:06:01.090 --> 00:06:05.810
once it's all finished, we'll move it to its own website, and I would ideally like to, you know,

54
00:06:05.830 --> 00:06:10.190
turn it into a larger resource with some of the suggestions and so on that have been provided,

55
00:06:10.330 --> 00:06:14.470
and of course, this is, you know, we have 10 hours with you.  We covered a certain amount of

56
00:06:14.470 --> 00:06:18.290
material, but obviously, there's a lot to data science. There's a lot more to possibly cover,

57
00:06:20.810 --> 00:06:26.450
and so, you know, I hope to do more with these materials, but there will be, at the very least,

58
00:06:26.530 --> 00:06:31.090
what we've done so far will be available in a sort of a website resource. When that is available,

59
00:06:31.250 --> 00:06:39.950
I will send out an email about that, and I mean, I would also say if you, you know,

60
00:06:40.910 --> 00:06:45.270
we're all part of the blindness community.  We're all part of the VI community. If you are,

61
00:06:45.730 --> 00:06:51.830
you know, in touch with specific blindness organizations, I mean, I'm in touch in

62
00:06:51.830 --> 00:06:58.570
conversation with some people as well, but if you think that, you know, you have contact with

63
00:06:58.570 --> 00:07:02.290
someone in an organization that you've enjoyed these sessions and that you would like to see

64
00:07:02.290 --> 00:07:07.010
more of this kind of work happen, either in terms of creating resources or in terms of, you know,

65
00:07:07.030 --> 00:07:12.890
teaching workshops and so on, then, you know, feel free to reach out to them and say, hey,

66
00:07:12.890 --> 00:07:18.770
this was really good. We would like to see more of it, and then, you know, and hopefully, I would

67
00:07:18.770 --> 00:07:25.390
love to see the major blindness organizations put some more resources specifically behind these kinds

68
00:07:25.390 --> 00:07:32.310
of more, you know, more modern skills that I think are important for the blindness community.

69
00:07:33.530 --> 00:07:38.110
Another, you know, and another thing that we are, I mean, some conversation with some

70
00:07:38.110 --> 00:07:45.610
organizations is, you know, maybe having, like, some small grants or small prizes for

71
00:07:46.370 --> 00:07:50.610
infrastructure development and so on, so that would, you know, I really think that some of

72
00:07:50.610 --> 00:07:54.930
the big organizations should get behind some of this work. If you have contacts in those,

73
00:07:55.070 --> 00:08:00.550
just reach out to me. Drop me a line or put a word in someone's ear, you know, and have them

74
00:08:00.550 --> 00:08:05.690
reach out to me, so I, you know, and I also just want to thank all of you participants.  I mean,

75
00:08:05.690 --> 00:08:11.470
you guys really come out in large numbers, you know, and there's a huge number of people who

76
00:08:11.470 --> 00:08:15.370
are following along asynchronously as well and reaching out by email every week and everything

77
00:08:15.370 --> 00:08:20.170
like that, so there's actually kind of a hidden group of blind folks who are really interested

78
00:08:20.170 --> 00:08:24.250
in learning data science that is even larger than we're seeing in these rooms, which is,

79
00:08:24.430 --> 00:08:30.070
and there are pretty big crowds in these rooms, too, so thank you. I just want to thank you all

80
00:08:30.070 --> 00:08:35.150
for coming out, for learning. I know it's challenging, but it's been great to connect

81
00:08:35.150 --> 00:08:40.070
and to see this, you know, hopefully it's a start of something cool, so all right, that's enough

82
00:08:40.070 --> 00:08:49.350
spieling.  Sarah, do you want to, I'll introduce Sarah Kane. She is a PhD student in astronomy

83
00:08:49.350 --> 00:08:55.790
and astrophysics at Cambridge and a Marshall fellow, and she's going to be leading our

84
00:08:55.790 --> 00:08:59.370
second workshop right now on sonification, so Sarah, it's enough talking from me.

85
00:09:00.950 --> 00:09:07.270
Thanks, Patrick.  All right. Hi, everyone. Excited to get started again.  I'll share my screen. I have

86
00:09:09.870 --> 00:09:16.970
share my screen. Hello.  All righty. Make sure share sound is on, and we are good to go.

87
00:09:17.790 --> 00:09:22.910
Before we begin, I just want to mention off my camera, because someone had the suggestion that

88
00:09:22.910 --> 00:09:26.530
that might help with some of the difficulties we had last week, so let's hope for the best.

89
00:09:28.130 --> 00:09:33.270
Apologies if anyone is low vision or sighted here. If you don't appreciate me being, you know,

90
00:09:33.350 --> 00:09:38.910
just a square, sorry, but we're going to give this a try. On the topic of audio difficulties, I know we

91
00:09:38.910 --> 00:09:43.990
had rather extensive audio difficulties last week.  I just want to mention that there is a nice fresh

92
00:09:43.990 --> 00:09:49.790
recording. I re-recorded the tutorial from last week, so if you found last week a little difficult

93
00:09:49.790 --> 00:09:54.550
to follow because of some of the audio difficulties, I highly recommend you go check out the new

94
00:09:54.550 --> 00:09:59.070
recording, especially right at the end when we listen to all of those sonified shapes that we

95
00:09:59.070 --> 00:10:04.830
made. I think that's the most informative part of the tutorial, so I highly recommend going to check

96
00:10:04.830 --> 00:10:12.290
that out if you are interested.  I'll also mention that we still seem to be having some audio

97
00:10:12.290 --> 00:10:17.770
difficulties where sounds from the terminal do not seem to like to play through Zoom that we can tell,

98
00:10:18.170 --> 00:10:22.550
so I'll just tell you in advance that all the sonifications for this week I have pre-prepared

99
00:10:22.550 --> 00:10:29.830
as audio files, so, you know, when I'll have you guys typing sonification.play or whatever we name

100
00:10:29.830 --> 00:10:35.690
it to get things going, I will click away to an audio file and play the sonification for you from

101
00:10:35.690 --> 00:10:41.230
there, and hopefully we will be on our merry way. All right, now I'm really done spieling.

102
00:10:42.490 --> 00:10:49.590
Let's see. I'm going to turn NVDA speech back on. "Speech mode B. Speech mode talk." And I just

103
00:10:49.590 --> 00:11:02.910
want to confirm, can you hear that okay? Yes, no? Yes.  Yes, we can. Thank you. All right.

104
00:11:03.350 --> 00:11:10.730
Oh, and I don't hear that active speaker alert, so maybe the video off is the answer.

105
00:11:11.530 --> 00:11:17.590
All righty. So, as we always do, I'm going to ask you to begin, please, by opening Anaconda Prompt.

106
00:11:17.650 --> 00:11:22.470
You can do that by hitting the Windows key and then typing Anaconda Prompt, and it should be

107
00:11:22.470 --> 00:11:27.690
the first result that comes up after that. And once you are in Anaconda Prompt, we will start

108
00:11:27.690 --> 00:11:34.110
IPython by typing, as we always have, IPython, all lowercase, all one word.

109
00:11:34.670 --> 00:11:46.530
"I-P-Y-T-H-O-N. Python 3.11.5 packaged by Anaconda Incorporated."

110
00:11:47.050 --> 00:11:50.850
All right. I think we've heard that a bunch of times.  I wanted, you know, us to hear the Python

111
00:11:50.850 --> 00:11:55.490
version one more time, but we probably don't need to listen to that whole thing. All right. So, now

112
00:11:55.490 --> 00:12:01.650
we are in our interactive IPython environment, and we are ready to get started.  The exciting news is,

113
00:12:01.690 --> 00:12:08.830
today, we are going to sonify some real data. What I have prepared for you is a CSV file of

114
00:12:08.830 --> 00:12:14.210
temperature data. This is real data, real temperatures from cities around the world,

115
00:12:14.330 --> 00:12:19.450
and also some rainfall data.  We'll look at that data in detail before we sonify it,

116
00:12:19.450 --> 00:12:25.110
but in order to actually import that data, we are going to need to import our favorite packages

117
00:12:25.110 --> 00:12:31.030
that we've used all along. We're going to import NumPy and import Pandas. Hopefully, this is a

118
00:12:31.030 --> 00:12:37.250
familiar procedure by now.  I'm going to start in that in one line by typing import NumPy.

119
00:12:37.250 --> 00:12:52.710
"I-M-P-O-R-T." So, that's import space NumPy. "N-U-M-P-Y." All right. And it's telling me I'm

120
00:12:52.710 --> 00:12:57.630
on the next line already.  We don't expect any output from importing something, and I'm going

121
00:12:57.630 --> 00:13:10.170
to type import Pandas like the bear. "I-M-P-O-R-T space P-A-N-D-A-S in three."

122
00:13:10.570 --> 00:13:15.790
All right. I've typed import Pandas. Hit enter. And this is the moment where I'm going to ask one

123
00:13:15.790 --> 00:13:22.410
of the helpers.  I think Alex or Elizabeth has it at the ready to copy and paste two lines of code in.

124
00:13:22.410 --> 00:13:30.510
This is going to be the URL that we're using, and then it's going to be df equals Pandas.readcsv,

125
00:13:30.990 --> 00:13:36.770
that URL, and the index column equals zero. Basically, this is saving us that step of

126
00:13:36.770 --> 00:13:42.230
typing out the URL.  So, I highly recommend you go and copy and paste that from the chat. It's

127
00:13:42.230 --> 00:13:50.150
rather a long URL link. And then it's just our very familiar Pandas.readcsv. I myself am going

128
00:13:50.150 --> 00:14:10.990
to copy and paste it in as well because it's a long URL.  All right. It just read the very last

129
00:14:10.990 --> 00:14:15.110
bit of what I just copy and pasted in. But the important thing is, again, to remember that we're

130
00:14:15.110 --> 00:14:22.850
this df equals Pandas.readcsv, that URL.  So, what we're doing is we're making, as we always do,

131
00:14:22.970 --> 00:14:29.750
a Pandas CSV from the data in that or not a Pandas CSV, a Pandas data frame from the data

132
00:14:29.750 --> 00:14:36.670
that's saved at that URL, and we're calling it df. And I'm just going to hit enter. It might

133
00:14:36.670 --> 00:14:43.290
take a second.  About a second exactly. You can hear it says in four. We're on to our next line.

134
00:14:43.970 --> 00:14:48.990
Now, the data is all already there. Unlike last week, we're not going to sort of craft

135
00:14:48.990 --> 00:14:55.830
any of it ourselves. But I am very strongly of the opinion that we should not be sonifying or

136
00:14:55.830 --> 00:15:01.870
visualizing, representing our data in any way until we actually take a look at that data.

137
00:15:02.230 --> 00:15:07.310
And all you really know about this data is that it's something to do with the weather. Like,

138
00:15:07.330 --> 00:15:11.590
I've mentioned something about temperature. You don't really know what's in here.  So,

139
00:15:11.590 --> 00:15:16.530
I don't know about you, but my very first question is, what is actually in this data?

140
00:15:16.690 --> 00:15:21.770
What are the columns? And so, you might recall from Patrick's lessons that we can check on

141
00:15:21.770 --> 00:15:26.490
the columns in the data frame by doing df. That's what we've named that data frame and

142
00:15:26.490 --> 00:15:37.150
those lines I had you copy and paste. So, we'll do df.  And then dot. Whoops. It wants to suggest

143
00:15:37.150 --> 00:15:42.470
something I've typed before.  I don't want to do that. I want to do df.columns.

144
00:15:42.890 --> 00:15:46.870
"C-O-L-U-M-N-S."

145
00:15:47.170 --> 00:15:51.630
That's df.columns and hit enter.  I'm going to tell you now that this is going to be a rather

146
00:15:51.630 --> 00:15:56.830
long output because there are 13 columns in this. So, we're going to listen to them all the way

147
00:15:56.830 --> 00:16:01.370
through because, again, we want to know all the columns in our data frame if we're using the thing.

148
00:16:01.370 --> 00:16:09.850
"Out four. Index. Year. Month. Day. New York City temp. Philadelphia temp. Pittsburgh temp.

149
00:16:10.370 --> 00:16:18.030
Orlando temp. Austin temp.  Seattle temp. Delhi temp. Delhi rain inches.  Delhi temp model one.

150
00:16:18.510 --> 00:16:22.250
Delhi temp model two. Dtype equals object. In five."

151
00:16:22.810 --> 00:16:28.690
All right. So, what columns do we have here? We have three columns that specify the date.

152
00:16:28.690 --> 00:16:35.490
That is the year, month, and day at which we have our data. Then we have a whole slew of columns

153
00:16:35.490 --> 00:16:40.910
with the temperature, presumably daily temperature, in a bunch of different cities. New York City,

154
00:16:41.230 --> 00:16:46.390
Philadelphia, Pittsburgh, Delhi, India, blah, blah, blah.  We're not going to use all of those

155
00:16:46.390 --> 00:16:52.130
columns. But I wanted to, A, give you a larger data frame to handle because this is often how

156
00:16:52.130 --> 00:16:58.010
data comes. And, B, because if you want to play around with more data, then it's available for

157
00:16:58.010 --> 00:17:02.790
you after this tutorial.  You already have something you can sort of test and mess around with. So,

158
00:17:03.250 --> 00:17:07.150
plenty of data available for you. If you're interested in where I got this data from,

159
00:17:07.250 --> 00:17:12.250
it's all linked on the curriculum online.  So, if you're curious, feel free to check it out.

160
00:17:12.530 --> 00:17:18.109
It is from two different sources that I curated and put together. There was a little bit of,

161
00:17:18.109 --> 00:17:23.170
like, processing that I did to sort of get it in a format that would be roughly convenient for

162
00:17:23.170 --> 00:17:30.170
us to use.  We have that Delhi rain inches column. That's the daily rain in Delhi, India,

163
00:17:30.530 --> 00:17:38.030
in inches, as the name says. And then those last two columns, the Delhi temp model one and temp

164
00:17:38.030 --> 00:17:43.590
model two, those are actually columns I created.  And we'll get into those a little bit later

165
00:17:44.230 --> 00:17:49.190
if we have the time. But essentially, they are predictions for the temperatures in Delhi, India.

166
00:17:49.810 --> 00:17:53.770
And one of them is intended to be a good prediction, and one of them is intentionally

167
00:17:53.770 --> 00:18:00.490
quite a bad prediction.  But we will get into that later. All right. So, now we know roughly what

168
00:18:00.490 --> 00:18:06.870
is in this data frame.  My next question is, like, how big is it? I've told you there are 13 columns,

169
00:18:07.110 --> 00:18:11.450
but I just want to print out the whole shape, you know? I mean, if I weren't here to tell you

170
00:18:11.450 --> 00:18:15.230
that I know there are 13 columns, I don't know about you, but I wouldn't want to sit and, like,

171
00:18:15.230 --> 00:18:20.450
count the columns. And I also want to know how many rows there are, how many days of data are

172
00:18:20.450 --> 00:18:31.990
there. So, I'm going to do, as Patrick taught us, df.shape. And I'll hit enter.

173
00:18:37.470 --> 00:18:45.030
All right. So, there are 9,265 rows of data. That is each of those I'll tell you is

174
00:18:45.030 --> 00:18:51.370
one day of data.  And 13 columns. I can tell you right now that because I've handled this data

175
00:18:51.370 --> 00:18:56.890
already, that's about 15 years' worth of weather data in this CSV. So, it's rather a lot.

176
00:18:57.570 --> 00:19:02.770
But my next question, after knowing, well, this is a rather large file, is, all right,

177
00:19:02.790 --> 00:19:10.730
but, like, what dates does it actually run from? And the way I can find out is by indexing the

178
00:19:10.730 --> 00:19:15.970
first and last columns. I'm going to assume this data runs in chronological order. First,

179
00:19:16.090 --> 00:19:22.950
because shuffling up the dates would be chaos.  And I have yet to see a data file that does that.

180
00:19:23.270 --> 00:19:27.690
But B, because I have already, you know, handled this data. So, I'll tell you it runs in

181
00:19:27.690 --> 00:19:34.810
chronological order.  So, if we check the first day or the first row of data, that should be

182
00:19:34.810 --> 00:19:40.930
the first day of data. So, we can get the first date. And if we check the last row of our data

183
00:19:40.930 --> 00:19:46.130
frame, that will be the last date of data.  So, we can know when our data starts and ends.

184
00:19:46.910 --> 00:19:54.590
And again, Patrick taught us how to get the how to index by row number. That's going to be DF.

185
00:19:54.590 --> 00:20:06.670
DF.IL.ILOC. So, ILOC, LOC for location, and I, index, because we're indexing by number.

186
00:20:07.410 --> 00:20:13.550
Then it's going to be open square bracket. Zero. Right bracket.

187
00:20:13.550 --> 00:20:19.470
Not parentheses, brackets. Why is it a zero? Well, Python likes to number starting from

188
00:20:19.470 --> 00:20:28.010
zero.  So, if we do DF.ILOC brackets one, we're actually going to get the second row. All right,

189
00:20:28.090 --> 00:20:43.890
let's hit enter. Out six.  Year 1995.000000. Month 1.000000. Day 1.000000. I'm reading all of the

190
00:20:43.890 --> 00:20:50.790
values in that row. I only care about the first three, the year, month, and day, because that's

191
00:20:50.790 --> 00:20:56.490
the date that I care about. Annoyingly, they're in decimal format, just because that's how this

192
00:20:56.490 --> 00:21:02.530
file is read in.  It's read in as floats, you'll recall, we call them. But I can tell that the

193
00:21:02.530 --> 00:21:09.990
year is 1999, the month is one, and the day is one. So, our data starts on January 1st, 1999.

194
00:21:09.990 --> 00:21:16.410
All right. When does our data end? So, what is the range of dates for our data? Well,

195
00:21:16.470 --> 00:21:25.430
then I'm going to do DF.ILOC. Open bracket. So, the same thing as the line before so far.

196
00:21:25.670 --> 00:21:32.990
Left bracket. Now, I could do what? What was the length of the data frame? 9265. I could type,

197
00:21:33.470 --> 00:21:38.290
because I know how many rows there are for the last one.  But that requires me remembering how

198
00:21:38.290 --> 00:21:44.030
many rows there are in our data frame. So, a nice little shortcut is that if you want to index the

199
00:21:44.030 --> 00:21:51.390
last row of the data frame, you can just type negative 1. Dash 1. Dash 1, negative 1. So,

200
00:21:51.470 --> 00:21:59.250
it's DF.ILOC, open bracket, negative 1, close bracket. Right bracket.  And the fun thing is,

201
00:21:59.330 --> 00:22:03.870
if you do, for instance, negative 2, that'll give you the second to last row, negative 3,

202
00:22:03.870 --> 00:22:09.270
third to last row, so on and so forth. This is another sort of Pythonic numbering thing.

203
00:22:09.630 --> 00:22:14.430
Maybe other programming languages do it as well.  I don't know. Don't quote me on that. I

204
00:22:15.070 --> 00:22:30.170
only know Python. "Out 7. Year 2020.000000. Month 5.000000. Day 13.000000." All right. And I'll

205
00:22:30.170 --> 00:22:36.230
stop it again after the day, because I'm not interested in hearing how hot it was in Austin,

206
00:22:36.410 --> 00:22:45.010
Texas, on, as we now know, May 13th, I believe it was, of 2020. So, we have just about 15 years

207
00:22:45.010 --> 00:22:54.270
of data in here.  So, that's great. Now we know how large our data frame is. We know the time range.

208
00:22:54.370 --> 00:22:59.230
We know roughly what sort of data is in it. Cool. We're getting a good picture of things in this

209
00:22:59.230 --> 00:23:04.210
data frame.  And then the last thing I'm going to want to do, before I sodify things, is actually

210
00:23:04.210 --> 00:23:08.510
take a look at one of the columns. I'm going to do Philadelphia, because that's where I went to

211
00:23:08.510 --> 00:23:12.630
undergrad, and I love Philadelphia, and I know roughly what the weather should be like in there,

212
00:23:13.090 --> 00:23:18.210
like in the city of Philadelphia. And I just want to check on the data in the Philadelphia column

213
00:23:18.210 --> 00:23:25.550
first, to make sure nothing seems funky.  Second, you know, I don't even know right now whether this

214
00:23:25.550 --> 00:23:31.510
is in degrees Celsius or degrees Fahrenheit, which is, you know, a little problematic because

215
00:23:31.510 --> 00:23:38.130
there are no labels here, like no units. But if I take a look at the data, I can probably guess

216
00:23:38.130 --> 00:23:43.390
based on the numbers we get out whether it's in degrees Celsius or Fahrenheit, and I would like

217
00:23:43.390 --> 00:23:51.570
to know that. All right.  So, the way I can do this is, if you recall from the list of column names,

218
00:23:51.570 --> 00:23:56.170
and no worries if you don't because I'll tell you. The temperature in Philadelphia, that column

219
00:23:56.170 --> 00:24:02.750
name is called Philadelphia underscore temp. And so following the syntax that Patrick taught us,

220
00:24:02.750 --> 00:24:11.910
if we want to say check the average temperature in Philadelphia, then I can do df dot Philadelphia

221
00:24:13.330 --> 00:24:25.790
That's going to be P-H-I-L-A-D-E-L-P-H-I-A.

222
00:24:26.710 --> 00:24:30.990
You know, before I did university in Philadelphia, I actually had a really hard time spelling that city.

223
00:24:31.790 --> 00:24:39.330
All right, so that's df.philadelphia underscore temp, T-E-M-P.

224
00:24:39.330 --> 00:24:44.290
So this is just calling the Philadelphia temp column from df.

225
00:24:44.450 --> 00:24:49.450
And then I just want the mean attribute, so dot mean, M-E-A-N.

226
00:24:49.670 --> 00:24:51.650
"Dot M-E-A-N."

227
00:24:51.910 --> 00:24:55.730
And then open parentheses, close parentheses, just like Patrick taught us.

228
00:24:55.850 --> 00:24:57.290
"Left paren, right paren."

229
00:24:58.070 --> 00:25:00.290
All right, and let's hit enter.

230
00:25:01.230 --> 00:25:07.950
Out 8, 56.41700485698867, in 9.

231
00:25:07.950 --> 00:25:14.750
All right, so the average temperature in that Philadelphia temperature column is about 56 degrees.

232
00:25:14.970 --> 00:25:16.610
That tells me for two things.

233
00:25:16.730 --> 00:25:20.850
First of all, having spent time in Philadelphia, sounds about right to me.

234
00:25:21.010 --> 00:25:27.770
It sounds about right if it's in degrees Fahrenheit, because if that's in degrees Celsius, Philadelphia is on fire.

235
00:25:28.190 --> 00:25:31.170
Which I certainly hope it isn't, because I would like to go back to visit.

236
00:25:31.170 --> 00:25:32.950
So I know two things.

237
00:25:33.110 --> 00:25:36.850
First of all, from a rough analysis, that average seems correct.

238
00:25:37.590 --> 00:25:41.750
And also, I now know our units are in degrees Fahrenheit.

239
00:25:42.230 --> 00:25:47.050
I can also, and for the sake of thoroughness, I could also check the max.

240
00:25:47.150 --> 00:25:52.210
That's going to be the same line we just typed, except instead of dot mean, it'll be dot max.

241
00:25:52.210 --> 00:26:14.950
So we can do df, dot Philadelphia, Philadelphia, underscore temp, dot max, "left paren, right paren, out 9, 92.9, in 10."

242
00:26:15.690 --> 00:26:21.050
All right, so the maximum temperature we have recorded for Philadelphia is 92.9 degrees Fahrenheit.

243
00:26:21.050 --> 00:26:25.530
I'll tell you for certain that it definitely gets hotter than that in Philadelphia.

244
00:26:25.870 --> 00:26:30.250
So I would be scratching my head a little bit about this and feeling some concern.

245
00:26:30.390 --> 00:26:35.510
Except for the fact that I believe that this is actually the average temperature over the whole day.

246
00:26:35.870 --> 00:26:44.330
So if you consider the fact that it's like cooler in the night, yeah, I can imagine that the hottest day in Philadelphia is on average 92.9 degrees.

247
00:26:44.810 --> 00:26:47.570
For the sake of completeness, let's look at the minimum.

248
00:26:47.570 --> 00:27:03.110
"df, dot P-H-I-L-A-D-E-L-P-H-I-A, line, T-E-M-P, dot M-I-N, left paren, right paren."

249
00:27:03.110 --> 00:27:11.150
So that is df, dot Philadelphia, underscore temp, dot min, open parenthesis, close parenthesis.

250
00:27:11.970 --> 00:27:17.030
That is the same line we have been typing except now instead of min or max, it is min.

251
00:27:17.410 --> 00:27:18.550
And let's just see what we get.

252
00:27:18.670 --> 00:27:21.450
"Out 10, 9.4, in 11."

253
00:27:21.870 --> 00:27:25.490
9.4 degrees Fahrenheit. Yeah, that sounds right to me.

254
00:27:25.850 --> 00:27:31.710
For you Europeans, that's going to be, I don't know, degrees Celsius.

255
00:27:31.710 --> 00:27:34.990
I'm going to bet on like negative 10 Celsius, something like that.

256
00:27:35.150 --> 00:27:37.010
Miserable. Miserable is the temperature.

257
00:27:37.670 --> 00:27:38.010
All right.

258
00:27:38.410 --> 00:27:40.110
We've explored our data frame.

259
00:27:40.390 --> 00:27:41.610
We know what's in it.

260
00:27:41.950 --> 00:27:43.150
We know like the columns.

261
00:27:43.390 --> 00:27:44.690
We know the date ranges.

262
00:27:44.950 --> 00:27:47.850
We know actually the type of data we have in here.

263
00:27:48.130 --> 00:27:55.010
We've checked the column we're going to sonify first, Philadelphia, and made sure that everything seems to be in order there.

264
00:27:55.450 --> 00:27:56.890
I think we're good to go.

265
00:27:57.430 --> 00:28:00.310
Let's get into actually sonifying.

266
00:28:00.310 --> 00:28:10.370
Now, inherently before we visualize something, or visualize or sonify, so before we represent data, there's always going to be some legwork we have to do.

267
00:28:10.870 --> 00:28:13.930
The legwork we're going to have to do here is two steps.

268
00:28:14.450 --> 00:28:22.030
First, what we're going to want to sonify is the Philadelphia temperature versus time or versus our date.

269
00:28:22.590 --> 00:28:28.130
However, right now our date is spread across three columns.

270
00:28:28.130 --> 00:28:30.870
It is year, month, day.

271
00:28:31.770 --> 00:28:33.370
That is going to be really difficult.

272
00:28:33.570 --> 00:28:36.670
Actually, that's going to be impossible for a sonify to parse.

273
00:28:36.830 --> 00:28:39.290
Like those three columns, that's not going to work.

274
00:28:39.410 --> 00:28:40.730
We don't want that.

275
00:28:41.490 --> 00:28:43.050
Why did I leave it this way?

276
00:28:43.190 --> 00:28:46.050
Well, first of all, this is a format you'll often see in data.

277
00:28:46.530 --> 00:28:50.710
It's the way the data originally came, so I want us to be able to work around it.

278
00:28:51.370 --> 00:28:55.810
What are we going to do is we're going to make a new column in our data frame.

279
00:28:55.810 --> 00:29:03.810
I'm going to call this time step, and this is going to basically be the number of days since our data began.

280
00:29:04.330 --> 00:29:09.930
So the first day, January 1st of 1995, will be zero.

281
00:29:10.770 --> 00:29:13.050
January 2nd will be one.

282
00:29:13.430 --> 00:29:16.450
January 3rd will be two, and so on and so forth.

283
00:29:16.770 --> 00:29:24.630
This will now act in our sonification as the time column because those nice just numbers will be easy for a sonify to parse.

284
00:29:24.630 --> 00:29:29.590
And in the sonification, a sonify doesn't really care about the value of the time.

285
00:29:29.730 --> 00:29:33.810
It cares about the distance between times, so what I'll call the time step.

286
00:29:34.290 --> 00:29:37.390
That's why I'm calling this column the time step column.

287
00:29:37.670 --> 00:29:45.470
It's because say we took, you know, the data every day, and then suddenly we took it, oh, a week later, so there's a larger gap.

288
00:29:45.610 --> 00:29:53.570
That could be a problem, but here the data is taken at really regular intervals, just once a day for about 15 years.

289
00:29:53.570 --> 00:30:00.990
So we can make sort of a fake time column, and a sonify will treat it just the same, and it will work out very well for us.

290
00:30:02.130 --> 00:30:10.010
So, Patrick already taught us how to make a column like this, and I will refresh your memory if you don't recall.

291
00:30:10.490 --> 00:30:13.950
First we're going to call the column, though we haven't made it yet.

292
00:30:14.190 --> 00:30:18.030
That's going to be df, open bracket.

293
00:30:20.330 --> 00:30:24.230
It's trying to complete things for me.

294
00:30:24.290 --> 00:30:25.450
I'm not there yet.

295
00:30:25.910 --> 00:30:26.370
Give me time.

296
00:30:26.930 --> 00:30:27.110
All right.

297
00:30:27.730 --> 00:30:32.390
Df, open bracket, quotation mark, or like little tick mark.

298
00:30:33.250 --> 00:30:43.810
Then it's time step, all one word, so time step, T-I-M-E-S-T-E-P.

299
00:30:43.810 --> 00:30:48.430
Time step, close quotation mark, close bracket.

300
00:30:49.470 --> 00:30:54.330
So this is a slightly different syntax from the one you were using with Patrick to call a column.

301
00:30:54.510 --> 00:31:00.350
Here we're using brackets and quotation marks instead of the dot format, which is, I think, maybe a little quicker to type.

302
00:31:00.710 --> 00:31:08.470
This format, in my experience, just works better for creating a new column, so we are making a new column of the data frame.

303
00:31:08.690 --> 00:31:11.250
There isn't already a column called time step.

304
00:31:11.310 --> 00:31:12.350
We're creating a new one.

305
00:31:12.350 --> 00:31:17.890
I found when you do df dot time step to make a new column, it throws an error.

306
00:31:18.170 --> 00:31:22.290
So this one time we'll use this different syntax here to call the column.

307
00:31:22.790 --> 00:31:34.490
So that's df, open square bracket, open quotation mark, time step, close quotation mark, close square bracket, space, equals, space.

308
00:31:34.490 --> 00:31:45.070
And then the function we're going to use here is the one that Patrick taught us, pandas dot range index, P-A-N-D-A-S dot.

309
00:31:45.390 --> 00:31:49.630
So that's pandas dot. The R in range is capital R.

310
00:31:49.870 --> 00:31:56.350
So that was a capital R, A-N-G-E, then index, capital I.

311
00:31:57.170 --> 00:32:02.530
So capital R in range, capital I in index, "N-D-E-X."

312
00:32:02.530 --> 00:32:08.710
And it's all one words, so pandas dot range index, open parenthesis.

313
00:32:09.230 --> 00:32:11.670
Then it's going to be start equals zero.

314
00:32:12.510 --> 00:32:17.010
"S-T-A-R-T equals zero."

315
00:32:17.010 --> 00:32:22.810
So we've opened quotation marks, not open quotation marks, open parenthesis, start equals zero.

316
00:32:22.990 --> 00:32:25.950
That means the start of our steps will be zero.

317
00:32:26.170 --> 00:32:34.470
So remember that's going to mean that January 1st of 1995 is time step zero, comma, then space.

318
00:32:35.230 --> 00:32:36.950
Then I'm going to do stop.

319
00:32:37.130 --> 00:32:39.950
"S-T-O-P equals."

320
00:32:40.270 --> 00:32:43.030
Stop equals, I'm going to type L-E-N.

321
00:32:43.150 --> 00:32:44.350
"L-E-N."

322
00:32:44.350 --> 00:32:46.410
Then I'm going to do open parenthesis.

323
00:32:47.110 --> 00:32:47.590
"Left paren."

324
00:32:48.130 --> 00:32:48.770
D-F.

325
00:32:48.890 --> 00:32:49.530
"D-F."

326
00:32:49.930 --> 00:32:50.950
Close parenthesis.

327
00:32:51.070 --> 00:32:51.530
"Right paren."

328
00:32:51.910 --> 00:32:55.770
That means stop at the length of our data frame.

329
00:32:55.990 --> 00:32:58.530
In this case, that'll be, I think, what was it?

330
00:33:00.630 --> 00:33:03.410
9,625, 9,265.

331
00:33:03.650 --> 00:33:08.410
Clearly, I can't remember off the top of my head exactly the number of rows in our data frame.

332
00:33:08.410 --> 00:33:19.110
So the L-E-N, open parenthesis, close parenthesis, with D-F in the middle, will just automatically give us the number of rows in data frame.

333
00:33:19.570 --> 00:33:23.070
And that's because I want that last date, which was what?

334
00:33:23.150 --> 00:33:25.650
May 13th of 2020.

335
00:33:26.190 --> 00:33:27.010
Ah, 2020.

336
00:33:27.630 --> 00:33:28.290
What a year.

337
00:33:29.250 --> 00:33:39.670
May 13th of 2020, I want that to be 9,265 or whatever the last row index is in our time step column.

338
00:33:40.150 --> 00:33:48.450
So that's going to be stop equals L-E-N, open parenthesis, D-F, close parenthesis, comma.

339
00:33:48.650 --> 00:33:49.190
Comma.

340
00:33:49.450 --> 00:33:50.990
And then I'm going to type space.

341
00:33:51.030 --> 00:33:51.550
"Space."

342
00:33:51.890 --> 00:33:53.110
Step equals one.

343
00:33:53.290 --> 00:33:57.050
"S-T-E-P equals one."

344
00:33:57.050 --> 00:33:58.490
Step equals one.

345
00:33:58.670 --> 00:34:00.090
So just increase in steps of one.

346
00:34:00.450 --> 00:34:04.910
So January 2nd should be day one, January 3rd, day two, so on and so forth.

347
00:34:04.990 --> 00:34:07.190
Again, counting from zero, as Python likes.

348
00:34:09.409 --> 00:34:11.210
All right, hit enter.

349
00:34:11.850 --> 00:34:12.590
All set.

350
00:34:13.010 --> 00:34:16.630
If we want, we can check on that new time step column.

351
00:34:16.850 --> 00:34:19.350
So maybe I'm going to do D-F dot time step.

352
00:34:22.889 --> 00:34:24.630
Again, it's trying to guess what I want.

353
00:34:24.730 --> 00:34:25.210
It's wrong.

354
00:34:25.210 --> 00:34:31.670
D-F dot time step, and I'm going back to this more familiar syntax of D-F dot to call the column.

355
00:34:31.949 --> 00:34:35.389
T-I-M-E-S-T-E-P.

356
00:34:36.030 --> 00:34:42.989
And then I'm going to do dot head, and that will return the first five rows of this time step column, just to check that everything seems okay.

357
00:34:43.230 --> 00:34:47.690
"Dot H-E-A-D, left paren, right paren."

358
00:34:47.989 --> 00:34:53.870
So that's D-F dot time step dot head, open parenthesis, close parenthesis, hit enter.

359
00:34:53.870 --> 00:35:05.010
"Out 12, 0 0, 1 1, 2 2, 3 3, 4 4, name, time step, type, in 64, in 13."

360
00:35:05.510 --> 00:35:15.250
All right, so you might have heard 0 0, 1 1, that's basically saying the 0th row is 0, the 1th, the 1st, sorry, long day.

361
00:35:15.510 --> 00:35:19.230
The 1st row is 1, the 2nd row is 2, etc., etc.

362
00:35:19.450 --> 00:35:20.690
That all sounds good.

363
00:35:20.850 --> 00:35:22.350
That's exactly what we wanted.

364
00:35:22.350 --> 00:35:27.210
All right, I said there was two steps we needed to get this sonification going.

365
00:35:27.750 --> 00:35:37.130
And the second one is you might remember that Astronify, the sonification package we use, wants its data in an AstroPy table.

366
00:35:37.550 --> 00:35:39.290
I'm not going to dig into that again.

367
00:35:39.610 --> 00:35:44.130
If you don't remember that, I recommend you go check the curriculum or the recording from last week.

368
00:35:44.150 --> 00:35:45.950
I explained about AstroPy tables.

369
00:35:45.950 --> 00:35:53.830
For now, we're just going to import table from AstroPy and then turn our data frame into a table.

370
00:35:54.250 --> 00:35:58.330
All right, so that's going to be to first import the necessary class.

371
00:35:58.330 --> 00:36:23.470
That's going to be from AstroPy.table, so that's from space, A-S-T-R-O-P-Y.table, dot T-A-B-L-E, space, import, space.

372
00:36:23.470 --> 00:36:27.570
And then this is going to be table again, but with a capital T.

373
00:36:27.790 --> 00:36:38.230
So that's capital T, table, "T-A-B-L-E," from AstroPy.table, import table, "in 14."

374
00:36:39.030 --> 00:36:41.010
All right, that went through no problem.

375
00:36:41.170 --> 00:36:42.610
Hopefully it did for you as well.

376
00:36:42.990 --> 00:36:46.070
And then this is the exact same thing we ran last week.

377
00:36:46.070 --> 00:36:51.890
I'm going to use the AstroPy table built-in function from underscore pandas.

378
00:36:52.250 --> 00:36:59.530
That will take a data frame, our data frame D-F, and return a table, which I'm going to call T-B-L.

379
00:37:00.030 --> 00:37:07.110
So that's going to be T-B-L, space equals, space.

380
00:37:07.110 --> 00:37:15.190
And again, these spaces just make it nicer if you're going to pass this iPython session on to someone sighted who's reading it.

381
00:37:15.950 --> 00:37:20.970
Or I'm low vision, so I'm reading this now, and I find it easier if things are separated.

382
00:37:21.190 --> 00:37:23.370
So I'm doing it for my own sake as well.

383
00:37:23.510 --> 00:37:26.490
But if you don't want to include the spaces, you don't have to.

384
00:37:27.510 --> 00:37:32.690
So that's T-B-L equals, space equals, space, capital T, table.

385
00:37:34.130 --> 00:37:44.210
Sorry, I accidentally typed in capital A. I don't want a capital A, just capital T.

386
00:37:44.490 --> 00:37:55.230
Capital T, table, dot from underscore pandas, "dot F-R-O-M, line P-A-N-D-A-S."

387
00:37:55.230 --> 00:37:56.890
Open parenthesis.

388
00:37:58.710 --> 00:37:59.910
Close parenthesis.

389
00:38:00.830 --> 00:38:09.130
So that's T-B-L equals capital T, table, dot from underscore pandas, open parenthesis, D-F, close parenthesis.

390
00:38:09.490 --> 00:38:14.390
Make an astropy table from the pandas data frame called D-F.

391
00:38:14.510 --> 00:38:16.730
That's our data frame, and call it T-B-L.

392
00:38:17.830 --> 00:38:18.630
Hit enter.

393
00:38:18.630 --> 00:38:25.630
And if we just want to double check on that table like we did last week, we can type T-B-L dot call names.

394
00:38:27.070 --> 00:38:31.070
That is C-O-L names, not call like a phone call.

395
00:38:31.230 --> 00:38:32.890
C-O-L like the beginning of columns.

396
00:38:33.270 --> 00:38:38.490
So there it goes, trying to again make it this time it's right.

397
00:38:39.090 --> 00:38:46.950
T-B-L dot C-O-L, N-A-M-E-S.

398
00:38:46.950 --> 00:38:53.330
C-O-L names, and you'll notice this is slightly different from how we get columns in pandas.

399
00:38:54.170 --> 00:38:57.090
Astropy tables are like similar, but not the same.

400
00:38:57.250 --> 00:39:04.430
Just different enough from pandas data frames to make you have to Google every time when you want to do something.

401
00:39:04.550 --> 00:39:12.010
But this will give us the columns in table T-B-L, just so we can check that they're the same as the ones in the pandas data frame.

402
00:39:12.010 --> 00:39:31.070
"Out 15, year, month, day, New York City temp, Philadelphia temp, Pittsburgh temp, Orlando temp, Austin temp, Seattle temp, Delhi temp, Delhi rain inches, Delhi temp model 1, Delhi temp model 2, time step in 16."

403
00:39:31.510 --> 00:39:32.990
All right, amazing.

404
00:39:33.190 --> 00:39:38.210
We have all the same columns, including that new time step column we made.

405
00:39:38.570 --> 00:39:39.370
Fancy, fancy.

406
00:39:39.370 --> 00:39:50.730
All right, I am about to sonify this, but before I do, if there are any persistent questions before we get sonifying, please do let me know.

407
00:39:51.550 --> 00:39:53.550
Now is a good time for that.

408
00:40:10.160 --> 00:40:16.880
I am hearing silence. I'm hoping that is because there are no questions and not because my audio has gone out.

409
00:40:18.220 --> 00:40:19.420
But I am monitoring.

410
00:40:19.420 --> 00:40:20.200
We can hear you.

411
00:40:20.740 --> 00:40:24.580
Ah, excellent.  All right, all right, that's the that's the better option.

412
00:40:25.780 --> 00:40:31.000
Sometimes I feel like I'm like, I'm sitting alone in a little room I feel like I'm speaking into the void, you know.

413
00:40:33.420 --> 00:40:34.380
All righty.

414
00:40:35.400 --> 00:40:44.420
If I don't hear any questions, I'm going to keep on moving on but feel free to ask questions in the chat, as always, we're going to get into the sonification.

415
00:40:44.420 --> 00:40:47.700
You might notice it took us quite a few minutes to get to this point.

416
00:40:47.880 --> 00:40:48.860
That is deliberate.

417
00:40:50.060 --> 00:40:54.480
Data representations are only useful if you know what's going on in your data.

418
00:40:55.080 --> 00:40:58.280
So it shouldn't be. I think I see people do this a lot.

419
00:40:58.880 --> 00:41:00.660
Heck, I'm in the habit of doing it, too.

420
00:41:00.960 --> 00:41:05.260
You just sort of throw either a visualization or a sonification at your data.

421
00:41:05.760 --> 00:41:07.000
And that can be useful.

422
00:41:07.160 --> 00:41:10.820
But, you know, I also think it's useful to have a sense of what's going on first.

423
00:41:10.820 --> 00:41:13.580
So now we know what's going on in this data.

424
00:41:13.680 --> 00:41:16.420
That'll make the sonification a lot more useful.

425
00:41:17.180 --> 00:41:19.340
All right, let's get into it.

426
00:41:19.500 --> 00:41:24.880
We're going to import Sona series from Astronify, just like we did last week.

427
00:41:24.880 --> 00:41:29.820
So that's going to be from Astronify.

428
00:41:29.900 --> 00:41:30.940
So from space.

429
00:41:31.620 --> 00:41:41.480
A-S-T-R-O-N-I-F-Y.

430
00:41:41.980 --> 00:41:44.560
Astronify.series.

431
00:41:44.560 --> 00:41:47.880
dot S-E-R-I-E-S.

432
00:41:48.540 --> 00:41:51.460
From Astronify.series, space.

433
00:41:52.160 --> 00:41:53.000
Import.

434
00:41:55.760 --> 00:41:56.480
Space.

435
00:41:57.380 --> 00:41:58.820
Sona series.

436
00:41:59.240 --> 00:42:02.820
That's capital S in SONI, capital S in series.

437
00:42:03.120 --> 00:42:06.160
So that's capital S-O-N-I.

438
00:42:06.160 --> 00:42:07.440
S-O-N-I.

439
00:42:08.080 --> 00:42:09.120
Capital S.

440
00:42:09.320 --> 00:42:09.600
...

441
00:42:09.800 --> 00:42:11.400
And then the rest of series.

442
00:42:11.580 --> 00:42:13.980
E-R-I-E-S.

443
00:42:14.480 --> 00:42:18.440
From Astronify.series, import Sona series.

444
00:42:20.000 --> 00:42:22.860
"WxPython is not found for the current Python version.

445
00:42:23.580 --> 00:42:26.580
Pyo will use a minimal GUI toolkit written with Teak."

446
00:42:27.240 --> 00:42:29.440
All right, I'm not going to play that the whole way through.

447
00:42:29.440 --> 00:42:36.020
I think basically everyone I've spoken to has gotten this sort of warning.

448
00:42:36.360 --> 00:42:39.460
I wanted to play a little bit of it again, just so you know not to worry.

449
00:42:39.800 --> 00:42:49.080
I think there's this like audio Python package called Pyo that Astronify is built on that is going through some changes.

450
00:42:50.300 --> 00:42:52.600
Oh no, don't be back.

451
00:42:53.840 --> 00:42:58.280
Oh my gosh, we had all this time of silence and then I get that speaker alert again.

452
00:42:58.280 --> 00:43:00.520
...

453
00:43:01.000 --> 00:43:05.600
All right, we're gonna hope that that doesn't come back for good.

454
00:43:05.920 --> 00:43:12.140
I enjoyed that not happening like it did last week so everyone please cross your fingers for me.

455
00:43:12.720 --> 00:43:14.220
Um, okie dokie.

456
00:43:15.100 --> 00:43:17.520
Okay, so don't worry about that.

457
00:43:17.640 --> 00:43:22.800
I will say also from, you know, some testing I've done from preparing for this tutorial.

458
00:43:23.700 --> 00:43:28.880
I don't necessarily know whether it's Astronify or Pyo, which Astronify is built on.

459
00:43:29.280 --> 00:43:31.360
It has some technical difficulties.

460
00:43:32.080 --> 00:43:34.100
So you might encounter those now.

461
00:43:34.180 --> 00:43:42.780
So one of the most common problems I've noticed is a persistent clicking noise during the sonifications when you play them from the terminal.

462
00:43:42.780 --> 00:43:50.680
I have saved the audio as a file which is how I'll play it for you because it's from the terminal doesn't seem to play very nicely over Zoom.

463
00:43:51.280 --> 00:43:53.340
That does not have that persistent clicking noise.

464
00:43:53.840 --> 00:43:55.800
I don't know why it's in the terminal.

465
00:43:56.460 --> 00:43:58.540
I assume it's some sort of bug.

466
00:43:59.280 --> 00:44:05.760
I'll also say that sometimes there will be a persistent clicking noise for a couple of seconds before the sonification actually begins.

467
00:44:05.760 --> 00:44:06.980
Don't panic.

468
00:44:07.780 --> 00:44:17.300
And then occasionally, especially if you didn't have headphones plugged into your computer when you started the terminal session and then you go and plug the headphones in.

469
00:44:17.860 --> 00:44:25.140
When you try to actually play a sonification, it'll throw a little bit of a fit because it can't find the right audio output anymore.

470
00:44:26.480 --> 00:44:28.860
None of these are insurmountable issues.

471
00:44:28.860 --> 00:44:34.540
Sometimes the worst case scenario for any of these bugs is clicking noise, which is a little bit of a nuisance.

472
00:44:34.840 --> 00:44:39.160
Or hopefully none of you have to do this because this would make it very difficult.

473
00:44:39.320 --> 00:44:40.000
You'd lose your place.

474
00:44:40.280 --> 00:44:42.640
But restarting the terminal session.

475
00:44:42.960 --> 00:44:49.580
I don't want you to have to do that right now, but if you encounter these bugs in your own time, don't panic.

476
00:44:50.000 --> 00:44:52.040
It's not an insurmountable problem.

477
00:44:52.620 --> 00:44:56.420
It's just a little bit of bugginess just because this is a little bit of a smaller package.

478
00:44:56.420 --> 00:44:58.980
So just want to give you a heads up.

479
00:44:59.620 --> 00:45:01.580
Hopefully the helpers can help you in the chat.

480
00:45:01.720 --> 00:45:05.100
If any of these problems come up, you might see them crop up in my own terminal.

481
00:45:05.500 --> 00:45:09.700
But as I said, we have the sonifications all already saved.

482
00:45:09.900 --> 00:45:12.180
So one way or another, you will hear them.

483
00:45:12.660 --> 00:45:14.640
On that note, let's get sonifying.

484
00:45:15.540 --> 00:45:19.920
So I'm going to make an instance of the sauna series class.

485
00:45:19.920 --> 00:45:22.320
That's going to be our sonification object.

486
00:45:22.320 --> 00:45:30.180
And because I am sonifying Philadelphia temperatures, I'm going to call this SONI underscore Philadelphia.

487
00:45:30.900 --> 00:45:33.500
"S-O-N-I line."

488
00:45:33.960 --> 00:45:34.700
Philadelphia.

489
00:45:34.960 --> 00:45:39.720
"P-H-I-L-A-D-E-L-P-H-I-A."

490
00:45:39.960 --> 00:45:42.820
SONI underscore Philadelphia equals.

491
00:45:42.920 --> 00:45:43.980
"Space equals."

492
00:45:43.980 --> 00:45:47.940
And then I'm going to do SONI series.

493
00:45:48.100 --> 00:45:52.780
Again, remembering that the S's in SONI and series are capitalized.

494
00:45:53.100 --> 00:45:57.120
"S-O-N-I-S-E-R-I-E-S."

495
00:45:57.360 --> 00:46:03.920
So that's SONI series, capital S-O-N-I, capital S-E-R-I-E-S.

496
00:46:04.380 --> 00:46:05.440
Open parenthesis.

497
00:46:06.020 --> 00:46:08.240
T-B-L.

498
00:46:08.240 --> 00:46:16.120
So make a SONI series object from the data in our table, T-B-L, comma.

499
00:46:18.100 --> 00:46:26.040
Remember again that we need to tell the SONI series class what our time and value columns are called.

500
00:46:26.400 --> 00:46:28.700
In our case, we've just made the time column.

501
00:46:28.840 --> 00:46:30.760
That's going to be our time step column.

502
00:46:30.760 --> 00:46:37.840
And then our value column, the thing that's going to change over time is going to be Philadelphia temp.

503
00:46:38.240 --> 00:46:40.480
So let's tell SONI series that now.

504
00:46:40.920 --> 00:46:44.160
So we're going to do time underscore C-O-L.

505
00:46:44.460 --> 00:46:47.900
"T-I-M-E, line C-O-L."

506
00:46:48.380 --> 00:46:51.760
T-I-M-E underscore C-O-L, time call equals.

507
00:46:52.540 --> 00:46:53.040
"Equals."

508
00:46:53.600 --> 00:46:54.940
Open quotation mark.

509
00:46:54.960 --> 00:46:55.240
"Tick."

510
00:46:55.840 --> 00:46:59.060
Time step, all one word, because that's what we called that column.

511
00:46:59.060 --> 00:47:02.160
"T-I-M-E-S-T-E-P."

512
00:47:02.940 --> 00:47:03.800
Close quotation marks.

513
00:47:04.580 --> 00:47:05.760
Then add a comma.

514
00:47:05.860 --> 00:47:06.280
Comma.

515
00:47:06.600 --> 00:47:07.100
Space.

516
00:47:07.280 --> 00:47:07.580
"Space."

517
00:47:08.000 --> 00:47:10.320
Val underscore call, V-A-L.

518
00:47:10.420 --> 00:47:13.600
"V-A-L, line C-O-L."

519
00:47:13.780 --> 00:47:15.300
That's for value column.

520
00:47:16.020 --> 00:47:16.900
Space equals.

521
00:47:17.200 --> 00:47:17.660
"Equals."

522
00:47:18.060 --> 00:47:19.720
Or I guess not space.

523
00:47:20.020 --> 00:47:21.540
We can do space here.

524
00:47:21.600 --> 00:47:23.440
"Space equals space."

525
00:47:23.580 --> 00:47:25.160
That's probably the proper form.

526
00:47:25.160 --> 00:47:28.500
And then that column is called Philadelphia.

527
00:47:28.740 --> 00:47:29.860
Don't forget your quotation marks.

528
00:47:30.060 --> 00:47:30.220
"Tick."

529
00:47:30.560 --> 00:47:31.220
Philadelphia.

530
00:47:31.400 --> 00:47:35.740
"P-H-I-L-A-D-E-L-P-H-I-A."

531
00:47:35.960 --> 00:47:36.960
Underscore temp.

532
00:47:37.060 --> 00:47:39.100
"Line T-E-M-P."

533
00:47:39.480 --> 00:47:41.600
For temperature, close your quotation marks.

534
00:47:41.780 --> 00:47:41.920
"Tick."

535
00:47:42.500 --> 00:47:43.900
Close your parenthesis.

536
00:47:43.960 --> 00:47:44.400
Right paren.

537
00:47:44.820 --> 00:47:45.900
And hit enter.

538
00:47:50.540 --> 00:47:53.780
My goodness, I'm getting a Zoom audio alert now?

539
00:47:54.620 --> 00:47:55.760
"Settings window.

540
00:47:57.320 --> 00:47:58.000
Security.

541
00:47:58.640 --> 00:48:00.120
Close closes the window.

542
00:48:00.920 --> 00:48:01.840
Desktop windows."

543
00:48:01.940 --> 00:48:03.920
Can you hear me?

544
00:48:05.480 --> 00:48:06.140
Yes, we can.

545
00:48:06.320 --> 00:48:06.680
Indeed.

546
00:48:07.160 --> 00:48:09.380
Oh, my goodness.

547
00:48:09.560 --> 00:48:09.780
Wow.

548
00:48:09.940 --> 00:48:12.520
We really can't win with the audio issues here.

549
00:48:12.680 --> 00:48:12.940
All right.

550
00:48:12.940 --> 00:48:14.260
We will plow forward.

551
00:48:14.440 --> 00:48:18.220
I got an audio alert saying that my audio device wasn't detected anymore.

552
00:48:18.680 --> 00:48:20.720
I didn't even try to play anything yet.

553
00:48:21.060 --> 00:48:21.600
All right.

554
00:48:21.640 --> 00:48:23.180
This is a rather long line of code.

555
00:48:23.280 --> 00:48:25.960
So maybe if one of the helpers wants to paste that into the chat.

556
00:48:25.960 --> 00:48:28.860
This is a good line of code to become familiar with, though,

557
00:48:28.940 --> 00:48:31.260
because we're going to use it over and over.

558
00:48:31.620 --> 00:48:34.440
Basically just changing the name of the sonification.

559
00:48:35.020 --> 00:48:37.320
So we won't sonify Philadelphia all the time.

560
00:48:37.660 --> 00:48:41.580
And then also changing the name of the value column from Philadelphia temp

561
00:48:41.580 --> 00:48:44.140
to some other column that we might be interested in.

562
00:48:44.800 --> 00:48:45.120
All right.

563
00:48:45.240 --> 00:48:47.740
Next I'm going to sonify this thing.

564
00:48:48.380 --> 00:48:55.420
S-O-N-I line P-H-I-L-A-D-E-L-P-H-I-A.

565
00:48:55.420 --> 00:48:59.840
So what I've done here is I've typed soni underscore Philadelphia again.

566
00:49:00.100 --> 00:49:04.720
That's S-O-N-I underscore Philadelphia to call that object again.

567
00:49:05.300 --> 00:49:06.340
Then I'm going to hit dot.

568
00:49:07.880 --> 00:49:09.600
It wants to do something else.

569
00:49:09.700 --> 00:49:10.640
I don't want it to do that.

570
00:49:11.460 --> 00:49:13.700
And I'm going to do dot sonify.

571
00:49:13.960 --> 00:49:17.780
That's S-O-N-I-F-Y.

572
00:49:19.320 --> 00:49:21.560
I'm going to do open parenthesis, close parenthesis.

573
00:49:23.120 --> 00:49:24.720
And then that's it.

574
00:49:24.720 --> 00:49:25.720
I'm going to hit enter.

575
00:49:25.980 --> 00:49:28.800
So it's S-O-N-I underscore Philadelphia dot sonify.

576
00:49:29.160 --> 00:49:38.580
So make the sonification out of the SONI Philadelphia SONI series instance.

577
00:49:38.800 --> 00:49:39.880
So make the sonification.

578
00:49:40.400 --> 00:49:42.080
This isn't going to play the sound quite yet.

579
00:49:43.300 --> 00:49:44.740
So just hit enter.

580
00:49:44.880 --> 00:49:47.200
It's now sort of done all of its pitch mapping.

581
00:49:47.440 --> 00:49:48.220
It's ready to go.

582
00:49:48.360 --> 00:49:50.980
It's found how it's going to represent the sounds.

583
00:49:51.480 --> 00:49:53.720
The last step is to play the thing.

584
00:49:53.720 --> 00:49:57.760
I am not even going to, well, I'll try once to play it from terminal.

585
00:49:59.220 --> 00:50:02.760
I don't have the highest hopes, but we'll cross our fingers.

586
00:50:02.920 --> 00:50:04.200
We have the audio file ready.

587
00:50:05.180 --> 00:50:08.320
And I want you to keep in mind from last week that, remember,

588
00:50:09.800 --> 00:50:14.300
Astronify maps pitch to the value such that, by default,

589
00:50:14.640 --> 00:50:17.360
higher values are mapped to higher pitches.

590
00:50:17.800 --> 00:50:22.160
So what you should hear here is higher temperatures represented as

591
00:50:22.160 --> 00:50:26.540
higher pitches and lower temperatures represented as lower pitches.

592
00:50:27.100 --> 00:50:28.620
I think the sonification is pretty fun.

593
00:50:29.220 --> 00:50:32.080
My office mates tell me that they think it sounds like wind,

594
00:50:32.260 --> 00:50:33.360
which is not a bad thing.

595
00:50:34.080 --> 00:50:36.080
And the way we are going to play the sonification,

596
00:50:36.280 --> 00:50:39.260
you might recall from last week, is SONI, S-O-N-I.

597
00:50:39.340 --> 00:50:40.600
S-O-N-I.

598
00:50:40.980 --> 00:50:42.300
Underscore Philadelphia.

599
00:50:42.540 --> 00:50:48.080
"Line P-H-I-L-A-D-E-L-P-H-I-A."

600
00:50:48.460 --> 00:50:49.160
Dot play.

601
00:50:52.400 --> 00:50:54.100
Open parenthesis, close parenthesis.

602
00:50:55.660 --> 00:50:58.260
SONI underscore Philadelphia dot play.

603
00:50:58.860 --> 00:51:02.880
If anyone wants to take bets over whether this is going to actually work on Zoom,

604
00:51:02.980 --> 00:51:03.680
please feel free.

605
00:51:03.780 --> 00:51:04.500
Now is your chance.

606
00:51:05.120 --> 00:51:07.000
Hopefully it will work on your computer.

607
00:51:07.220 --> 00:51:09.760
It works on my computer when I'm not on Zoom.

608
00:51:10.080 --> 00:51:15.560
There just seems to be an ongoing disagreement going between Zoom and whatever

609
00:51:15.560 --> 00:51:18.020
terminal audio situation is going here.

610
00:51:18.020 --> 00:51:20.100
So I don't have the highest hopes.

611
00:51:29.350 --> 00:51:29.870
Desktop.

612
00:51:31.570 --> 00:51:36.410
...

613
00:51:37.090 --> 00:51:38.430
"in 21."

614
00:51:39.010 --> 00:51:39.290
All right.

615
00:51:39.550 --> 00:51:40.770
I don't believe that that worked.

616
00:51:41.050 --> 00:51:42.310
Hopefully you can hear me again.

617
00:51:42.510 --> 00:51:42.830
It did.

618
00:51:43.470 --> 00:51:44.390
Oh, it did?

619
00:51:44.450 --> 00:51:44.850
It worked.

620
00:51:45.090 --> 00:51:46.790
It worked.

621
00:51:47.330 --> 00:51:49.870
Can you redo it without your screen reader on?

622
00:51:50.770 --> 00:51:51.290
Yeah.

623
00:51:51.430 --> 00:51:52.090
Oh, my goodness.

624
00:51:52.270 --> 00:51:54.590
I am absolutely astonished.

625
00:51:54.590 --> 00:51:54.850
All right.

626
00:51:54.890 --> 00:51:56.110
I'm going to turn off NVDA.

627
00:51:56.330 --> 00:52:00.170
I'm going to type that SONI Philadelphia again, dot play again.

628
00:52:00.890 --> 00:52:02.110
I stopped it early.

629
00:52:02.170 --> 00:52:03.230
So we didn't hear the whole thing.

630
00:52:03.590 --> 00:52:05.990
And we'll cross our fingers that it works a second time.

631
00:52:06.110 --> 00:52:06.310
Wow.

632
00:52:06.370 --> 00:52:07.550
I would have just lost that bet.

633
00:52:07.910 --> 00:52:08.730
"Speech mode off."

634
00:52:10.910 --> 00:52:12.670
Do you know about the up button?

635
00:52:16.160 --> 00:52:18.680
You mean to the up button?

636
00:52:19.480 --> 00:52:19.800
Yeah.

637
00:52:19.940 --> 00:52:22.640
You don't have to retype this stuff if you've already retyped,

638
00:52:22.720 --> 00:52:23.500
if you've already typed something.

639
00:52:23.740 --> 00:52:24.180
Yeah.

640
00:52:24.380 --> 00:52:24.800
Yeah.

641
00:52:24.800 --> 00:52:27.460
I could, but I want to, you know, I don't want to.

642
00:52:28.000 --> 00:52:28.240
Sorry.

643
00:52:28.640 --> 00:52:29.780
Sorry to interrupt you.

644
00:52:29.980 --> 00:52:30.120
Gotcha.

645
00:52:30.360 --> 00:52:30.540
Gotcha.

646
00:52:31.520 --> 00:52:31.860
But, yeah.

647
00:52:32.460 --> 00:52:32.940
Yeah.

648
00:52:33.300 --> 00:52:33.520
Okay.

649
00:52:33.920 --> 00:52:34.560
Here we go.

650
00:52:34.760 --> 00:52:36.420
Let's cross our fingers again.

651
00:54:15.800 --> 00:54:16.600
Okie dokie.

652
00:54:16.960 --> 00:54:18.740
I'm hoping that went through.

653
00:54:19.280 --> 00:54:21.900
And you might notice that's a rather long sonification.

654
00:54:22.220 --> 00:54:25.160
That's because we have a lot of data points there.

655
00:54:25.700 --> 00:54:27.380
So it takes a long time.

656
00:54:27.380 --> 00:54:28.480
Last week, actually,

657
00:54:28.600 --> 00:54:31.420
you might remember me changing the note spacing by doing,

658
00:54:31.440 --> 00:54:32.540
like, the dot note spacing.

659
00:54:32.900 --> 00:54:36.320
There I was slowing it down because we had relatively few data points.

660
00:54:36.420 --> 00:54:37.480
There we had, like, 100.

661
00:54:37.720 --> 00:54:39.840
Here we have over 9,000, I believe.

662
00:54:40.220 --> 00:54:42.020
We don't want to slow this down anymore.

663
00:54:42.200 --> 00:54:45.540
This is already, I think, over a minute of sonified data.

664
00:54:46.260 --> 00:54:47.980
So we definitely don't want to slow it down.

665
00:54:48.340 --> 00:54:51.260
You can play around with the note spacing and speed it up if you want.

666
00:54:51.540 --> 00:54:53.660
I didn't think it worked very well sped up.

667
00:54:54.020 --> 00:54:55.400
I think it was a little hard to interpret.

668
00:54:55.400 --> 00:54:59.160
But, you know, feel free to putter around with that if you would like.

669
00:55:00.540 --> 00:55:05.220
The default note spacing is, I think, .01 seconds between each note.

670
00:55:05.460 --> 00:55:08.880
So feel free to go wild and change that, just like we did last week,

671
00:55:08.880 --> 00:55:09.520
if you want to.

672
00:55:10.220 --> 00:55:12.220
There are a couple of things I want you to think about.

673
00:55:12.520 --> 00:55:18.400
First, notice how you could hear those up and down cycles of the temperature

674
00:55:18.400 --> 00:55:23.100
going up and down and up and down at sort of regular intervals.

675
00:55:23.100 --> 00:55:27.140
You are literally hearing the turn of the seasons.

676
00:55:27.400 --> 00:55:31.420
You're hearing years go by in the data as those moments of higher pitches

677
00:55:31.420 --> 00:55:35.040
are the miserably swampy Philadelphia summers,

678
00:55:35.420 --> 00:55:40.200
and the moments of lower pitches are the miserably cold Philadelphia winters.

679
00:55:40.800 --> 00:55:42.420
I do actually really love Philadelphia.

680
00:55:42.440 --> 00:55:43.180
Don't get me wrong.

681
00:55:44.040 --> 00:55:48.000
But so you're hearing the cycle of the seasons in the sonification.

682
00:55:48.000 --> 00:55:53.820
That is one of the fastest non-visual overviews of the data

683
00:55:53.820 --> 00:55:58.360
to get that sort of sense of the shape that we can do.

684
00:55:58.680 --> 00:55:59.240
Just think about it.

685
00:55:59.280 --> 00:56:03.140
If you didn't know Philadelphia was sort of a temperate place,

686
00:56:03.420 --> 00:56:06.380
saying you don't know whether it's the desert or Antarctica,

687
00:56:06.720 --> 00:56:08.940
where there's maybe not as much of a cycle of a season,

688
00:56:09.060 --> 00:56:11.920
all you have to do is play that, and you know immediately,

689
00:56:12.140 --> 00:56:14.220
ah, Philadelphia has seasons.

690
00:56:15.260 --> 00:56:17.440
Another thing that you might want to notice from the data,

691
00:56:17.580 --> 00:56:20.420
something that might be adding to sort of that wind-like effect

692
00:56:20.420 --> 00:56:23.820
that we have going there, it's a little what I'm going to call wobbly.

693
00:56:24.200 --> 00:56:28.840
It is not like a perfect wave-like pattern where it goes up and down

694
00:56:28.840 --> 00:56:34.980
and up and down perfectly like that sine wave that we made last tutorial.

695
00:56:35.420 --> 00:56:36.940
That's because this is real data,

696
00:56:37.320 --> 00:56:40.500
so you could get like an anomalously hot day in the winter

697
00:56:40.500 --> 00:56:42.400
and a nice cool day in the summer.

698
00:56:42.400 --> 00:56:45.940
At least you could dream of a nice cool day in the Philadelphia summer.

699
00:56:46.520 --> 00:56:48.820
So the data is not following a perfect trend,

700
00:56:48.820 --> 00:56:52.780
and I think that sort of contributes to, yeah, that spooky wind vibe.

701
00:56:53.780 --> 00:56:57.780
All right, so that's our first sonification of the day

702
00:56:57.780 --> 00:57:00.600
and your first sonification with real data.

703
00:57:01.760 --> 00:57:04.940
And also, I'm not going to play it again now because it's rather long,

704
00:57:04.980 --> 00:57:07.940
but I totally encourage you if you want to play it again later,

705
00:57:07.940 --> 00:57:12.440
you can listen, maybe see if you can count all 15 years of our data in there,

706
00:57:12.560 --> 00:57:13.460
things like that.

707
00:57:13.900 --> 00:57:17.900
But I think one of the best ways to learn more about this sonification

708
00:57:17.900 --> 00:57:21.820
is going to be to sonify something else and compare it.

709
00:57:22.160 --> 00:57:25.060
So let's dive right into our next sonification.

710
00:57:25.460 --> 00:57:29.480
We are going to sonify the daily temperature in Delhi, India.

711
00:57:30.000 --> 00:57:35.000
So let's make a new instance of the Soni Series class.

712
00:57:35.000 --> 00:57:39.500
Actually, before I break into that, I just want to see do I have any questions

713
00:57:39.500 --> 00:57:43.240
because we've finally burst into the sonification scene.

714
00:57:43.520 --> 00:57:45.840
So if there are questions, I'll address those now.

715
00:58:03.770 --> 00:58:07.210
When you just played that sound and it repeated,

716
00:58:08.690 --> 00:58:13.070
does it repeat indefinitely or do you have control over that?

717
00:58:14.410 --> 00:58:16.050
Yeah, that's an excellent question.

718
00:58:16.350 --> 00:58:18.050
So it sounded like it was repeating,

719
00:58:18.050 --> 00:58:21.650
but actually those were just multiple years of data we have.

720
00:58:21.770 --> 00:58:23.270
So it won't repeat indefinitely.

721
00:58:23.490 --> 00:58:26.370
It will repeat for those 15 years of data we have.

722
00:58:26.490 --> 00:58:28.690
So there were 15 cycles there.

723
00:58:29.130 --> 00:58:31.430
Now, I know this is rather a long sonification.

724
00:58:31.930 --> 00:58:35.630
So if I didn't want to listen to it until the end, which we did this time,

725
00:58:35.690 --> 00:58:37.090
we listened to it until it stopped.

726
00:58:37.190 --> 00:58:38.390
So that stopped on its own.

727
00:58:38.730 --> 00:58:39.850
That wasn't going to go on forever.

728
00:58:40.690 --> 00:58:42.490
If I want to stop it early,

729
00:58:42.490 --> 00:58:47.990
I can type soni underscore Philadelphia dot stop, open parenthesis,

730
00:58:48.190 --> 00:58:50.930
close parenthesis, and the same way we did dot play.

731
00:58:51.430 --> 00:58:53.910
So stop and play are sort of parallel to each other.

732
00:58:54.230 --> 00:58:55.170
I might do that later.

733
00:58:55.610 --> 00:58:58.510
I should probably even add that to the curriculum because I don't think I wrote

734
00:58:58.510 --> 00:58:59.090
it down there.

735
00:58:59.330 --> 00:59:01.530
But yes, it is not indefinite.

736
00:59:01.710 --> 00:59:05.770
It goes basically the time is determined by how many data points you have

737
00:59:05.770 --> 00:59:10.550
and then the duration of each note and then the spacing between each note.

738
00:59:10.550 --> 00:59:14.050
We're using the default duration and spacing.

739
00:59:14.310 --> 00:59:17.350
So of the notes that Astronify gives us.

740
00:59:17.510 --> 00:59:18.970
But again, you can play around with those.

741
00:59:19.130 --> 00:59:21.550
Those will affect how long the sonification is.

742
00:59:24.350 --> 00:59:27.550
So yes, this is a rather long one, but it's not indefinite.

743
00:59:43.110 --> 00:59:43.470
All right.

744
00:59:43.530 --> 00:59:44.630
I hear some silence.

745
00:59:44.790 --> 00:59:47.490
So I'm going to turn NVDA's speech back on.

746
00:59:47.750 --> 00:59:48.350
"Speech mode beeps.

747
00:59:48.590 --> 00:59:49.530
Speech mode talk."

748
00:59:49.930 --> 00:59:50.410
Excellent.

749
00:59:50.630 --> 00:59:51.970
We are back in business.

750
00:59:51.970 --> 00:59:56.280
And I'm going to make that sonification of the Delhi, India temperature.

751
00:59:56.970 --> 00:59:59.330
So I'm going to do Soni underscore Delhi.

752
00:59:59.850 --> 01:00:03.310
"S. S-O-N-I."

753
01:00:03.350 --> 01:00:07.130
And Delhi has, I guess I'm probably butchering the pronunciation,

754
01:00:07.470 --> 01:00:10.150
but it's like Delhi, so an H after the L.

755
01:00:10.270 --> 01:00:12.590
So Soni, S-O-N-I underscore.

756
01:00:12.970 --> 01:00:18.310
"Line D-E-L-H-O dot play."

757
01:00:19.090 --> 01:00:20.890
That O was a typo.

758
01:00:21.070 --> 01:00:25.530
So that's S-O-N-I underscore D-E-L-H-I.

759
01:00:26.410 --> 01:00:27.550
Space equals.

760
01:00:27.710 --> 01:00:28.710
"Space equals.

761
01:00:29.070 --> 01:00:29.430
Space."

762
01:00:29.610 --> 01:00:33.570
And we're going to make this, again, an instance of our Soni series class.

763
01:00:34.090 --> 01:00:36.870
So that's capital S-O-N-I.

764
01:00:37.130 --> 01:00:38.090
"O-N-I."

765
01:00:38.350 --> 01:00:39.030
Series.

766
01:00:39.470 --> 01:00:40.370
Capital S again.

767
01:00:40.690 --> 01:00:43.570
"S-E-R-I-E-S."

768
01:00:43.570 --> 01:00:48.710
So Soni underscore Delhi equals Soni series with capital S's.

769
01:00:49.050 --> 01:00:50.330
Open parenthesis.

770
01:00:51.290 --> 01:00:52.350
T-B-L.

771
01:00:52.650 --> 01:00:53.910
"T-B-L."

772
01:00:54.790 --> 01:00:55.550
Comma.

773
01:00:55.810 --> 01:00:56.170
"Comma."

774
01:00:56.450 --> 01:01:00.470
So again, make a Sona series object from the table T-B-L.

775
01:01:00.930 --> 01:01:01.290
Space.

776
01:01:01.490 --> 01:01:01.930
"Space."

777
01:01:02.470 --> 01:01:04.410
Time underscore call.

778
01:01:04.590 --> 01:01:06.710
So call C-O-L like column.

779
01:01:06.950 --> 01:01:08.550
"T-I-M-E."

780
01:01:08.810 --> 01:01:10.570
Underscore call like column.

781
01:01:10.830 --> 01:01:13.070
"Line C-O-L."

782
01:01:13.750 --> 01:01:19.370
So time underscore call equals time step in quotation marks just like last time.

783
01:01:19.490 --> 01:01:23.330
So our time column is again that column that we made that we called time step.

784
01:01:23.550 --> 01:01:28.530
"Equals T-I-M-E-S-T-E-P."

785
01:01:29.030 --> 01:01:29.990
Quotation mark.

786
01:01:30.070 --> 01:01:30.710
Tick.

787
01:01:30.790 --> 01:01:31.470
Or tick.

788
01:01:32.230 --> 01:01:32.870
Comma.

789
01:01:32.930 --> 01:01:33.370
"Comma."

790
01:01:33.670 --> 01:01:34.090
Space.

791
01:01:34.230 --> 01:01:34.590
"Space."

792
01:01:34.950 --> 01:01:37.050
Val call for the value column.

793
01:01:37.330 --> 01:01:37.950
V-A-L.

794
01:01:38.030 --> 01:01:39.030
"V-A-L."

795
01:01:39.410 --> 01:01:41.130
Underscore call C-O-L.

796
01:01:41.230 --> 01:01:42.970
"Line C-O-L."

797
01:01:42.970 --> 01:01:44.090
Equals.

798
01:01:44.110 --> 01:01:44.550
"Equals."

799
01:01:45.030 --> 01:01:46.370
Open quotation.

800
01:01:46.610 --> 01:01:46.890
"Tick."

801
01:01:47.130 --> 01:01:51.150
And then the Delhi temperature column is called Delhi underscore temp.

802
01:01:51.490 --> 01:01:53.810
"D-E-L-H-I."

803
01:01:53.950 --> 01:01:55.070
Underscore temp.

804
01:01:55.270 --> 01:01:57.530
"Line T-E-M-P."

805
01:01:57.830 --> 01:01:59.690
And then close your quotation marks.

806
01:02:00.310 --> 01:02:01.570
Close your parenthesis.

807
01:02:01.830 --> 01:02:02.070
"Right paren."

808
01:02:02.070 --> 01:02:05.130
So to summarize, that is SONI with an I.

809
01:02:05.250 --> 01:02:05.910
S-O-N-I.

810
01:02:06.130 --> 01:02:06.930
Underscore Delhi.

811
01:02:07.530 --> 01:02:08.150
Equals.

812
01:02:08.250 --> 01:02:10.750
SONI series with those capital S's.

813
01:02:11.090 --> 01:02:12.050
Open parenthesis.

814
01:02:12.290 --> 01:02:13.030
T-B-L.

815
01:02:13.690 --> 01:02:14.310
Comma.

816
01:02:14.330 --> 01:02:18.470
Time underscore C-O-L equals quotation marks time step.

817
01:02:18.710 --> 01:02:19.650
Close quotation marks.

818
01:02:20.130 --> 01:02:20.610
Comma.

819
01:02:20.770 --> 01:02:25.650
Val underscore call equals open quotation marks Delhi underscore temp.

820
01:02:25.890 --> 01:02:26.810
Close quotation marks.

821
01:02:26.970 --> 01:02:27.730
Close parenthesis.

822
01:02:28.250 --> 01:02:31.310
So make a SONI series a SONIFICATION object.

823
01:02:31.310 --> 01:02:32.570
Call it SONI Delhi.

824
01:02:32.990 --> 01:02:38.370
From the table T-B-L, call the time column time step.

825
01:02:38.530 --> 01:02:41.710
And the value column is the daily temperature in Delhi, India.

826
01:02:42.130 --> 01:02:42.530
Hit enter.

827
01:02:42.770 --> 01:02:43.430
"In 23."

828
01:02:43.990 --> 01:02:44.750
Good to go.

829
01:02:45.090 --> 01:02:47.490
And then these next two lines should hopefully be familiar.

830
01:02:47.730 --> 01:02:49.530
It's going to be SONI underscore Delhi.

831
01:02:49.990 --> 01:02:51.430
"S-O-N-I."

832
01:02:51.710 --> 01:02:52.710
Underscore Delhi.

833
01:02:52.870 --> 01:02:55.310
"Line D-E-L-H-I."

834
01:02:55.730 --> 01:02:56.330
Dot SONIFY.

835
01:02:57.090 --> 01:02:59.990
"Dot S-O-N-I-G-Y."

836
01:02:59.990 --> 01:03:01.450
Ooh, not G.

837
01:03:01.630 --> 01:03:03.330
Y-G-F-Y.

838
01:03:04.030 --> 01:03:06.430
SONIFY, not SONIGUY.

839
01:03:07.610 --> 01:03:08.410
That's not it.

840
01:03:08.530 --> 01:03:09.610
"Left right paren."

841
01:03:09.750 --> 01:03:11.670
And don't forget those parenthesis at the end.

842
01:03:11.790 --> 01:03:14.270
So again, this is just going to actually SONIFY our data.

843
01:03:14.550 --> 01:03:18.930
So map things to pitch, you know, map the values to the pitches the way we want.

844
01:03:19.710 --> 01:03:20.490
"In 24."

845
01:03:21.070 --> 01:03:24.310
And then SONI underscore Delhi dot play.

846
01:03:24.310 --> 01:03:25.810
"S-O-N-I.

847
01:03:26.610 --> 01:03:29.270
Line D-E-L-H-I.

848
01:03:29.970 --> 01:03:31.870
Dot P-L-A-Y."

849
01:03:32.210 --> 01:03:34.910
And again, don't forget those parenthesis, open and close.

850
01:03:35.010 --> 01:03:35.990
"Left right paren"

851
01:03:36.290 --> 01:03:40.350
Because this is, you know, a function we're calling, but we're not entering any parameters.

852
01:03:40.550 --> 01:03:42.450
So we just leave some empty parenthesis there.

853
01:03:43.030 --> 01:03:46.390
And we will again cross our fingers that this works.

854
01:03:46.630 --> 01:03:47.410
And we'll hit go.

855
01:03:47.490 --> 01:03:49.430
And again, this is going to be a rather long one.

856
01:03:50.470 --> 01:03:51.430
Pile warning.

857
01:03:52.250 --> 01:03:53.570
Speech mode off.

858
01:05:26.190 --> 01:05:27.270
All righty.

859
01:05:27.650 --> 01:05:28.570
Pretty cool, huh?

860
01:05:28.950 --> 01:05:32.590
So I noticed a couple of things about that Delhi temperature sonification.

861
01:05:33.150 --> 01:05:36.110
First, I noticed that there was, like, less noisiness.

862
01:05:36.490 --> 01:05:39.830
It seemed, what I mean by that, like there was less wavering.

863
01:05:39.890 --> 01:05:41.730
So it seemed more of a smooth trend.

864
01:05:42.130 --> 01:05:47.730
So maybe Delhi is less likely to have that random, like, hot winter day that Philadelphia could have.

865
01:05:47.730 --> 01:05:53.990
It also sounded to me like there is more variation between, you know, the hottest and coldest days.

866
01:05:54.390 --> 01:06:05.150
But one of the things I noticed is that, like, on average, the pitch, like the average pitch of that sonification was pretty similar to the average pitch of the Philadelphia sonification.

867
01:06:06.070 --> 01:06:14.030
And I don't, I've never been to India, but I kind of expected Delhi, India to be a lot hotter on average than Philadelphia.

868
01:06:14.030 --> 01:06:29.730
And thus I would expect, naively, the average pitch of our sonification, knowing that higher temperatures are represented by higher pitches, I would expect the pitch of our sonification to be higher on average.

869
01:06:30.030 --> 01:06:36.090
I'm going to check that because, you know, I don't know for certain whether maybe Delhi is actually really cold.

870
01:06:36.430 --> 01:06:39.070
So we've already done this for Philadelphia.

871
01:06:39.310 --> 01:06:42.890
And this is one of the reasons why I recommended you do this before you sonify something.

872
01:06:42.890 --> 01:06:47.330
Now I have to go back and check the average temperature in Delhi, India.

873
01:06:49.150 --> 01:06:52.250
And I'm going to check this using the data frame.

874
01:06:52.430 --> 01:06:59.810
So our data frame DF still exists in this IPython session, even though we've been using TBL, or tables, since.

875
01:07:00.250 --> 01:07:05.510
That fromPandas function, not going to destroy our nice data frame, fortunately.

876
01:07:05.510 --> 01:07:15.970
And as I mentioned before, the syntax, like the way we access AstroPy tables is like just different enough from Pandas data frames to be inconvenient.

877
01:07:16.690 --> 01:07:23.030
And frankly, unless you intend to be an astronomer, you don't need to learn how to deal with AstroPy tables.

878
01:07:23.490 --> 01:07:27.610
I think sometimes even astronomers don't know how to deal with AstroPy tables.

879
01:07:27.610 --> 01:07:34.310
So let's work. And the data in our data frame is the same as the one in our AstroPy table.

880
01:07:34.450 --> 01:07:36.170
So let's work with the data frame.

881
01:07:36.550 --> 01:07:42.550
So I want to test the average temperature in Delhi, India.

882
01:07:42.670 --> 01:07:43.730
So that's going to be DF.

883
01:07:44.990 --> 01:07:46.670
Oh, I got to turn my speech back on.

884
01:07:47.150 --> 01:07:48.830
"Speech mode beep. Speech mode talk."

885
01:07:49.030 --> 01:07:50.230
Got to remember to do that.

886
01:07:50.230 --> 01:07:51.450
Okay, so that's DF.

887
01:07:52.730 --> 01:07:54.190
Dot Delhi underscore temp.

888
01:07:54.350 --> 01:07:59.670
"Dot D-E-L-H-I line T-E-M-P."

889
01:08:00.270 --> 01:08:01.010
Dot.

890
01:08:01.210 --> 01:08:01.450
"Dot."

891
01:08:01.990 --> 01:08:03.130
Mean for average.

892
01:08:03.310 --> 01:08:07.030
"M-E-A-N left paren, right paren."

893
01:08:07.270 --> 01:08:12.230
That's DF dot Delhi underscore temp dot mean, open and close parenthesis.

894
01:08:13.110 --> 01:08:21.189
"Out 25, 76.96521316783594 in 26."

895
01:08:21.430 --> 01:08:40.609
All right, so that's like what almost 77 degrees Fahrenheit on average and I recall that the average temperature in Philadelphia was like 56 degrees Fahrenheit so this is about 20 degrees hotter on average in Philadelphia so it's sure like on average a lot hotter.

896
01:08:40.609 --> 01:08:52.930
Let's hear maybe like what the minimum temperature in that Delhi, India column temperature column is so that's going to be DF dot Delhi underscore temp dot mean, open and close parenthesis.

897
01:08:53.290 --> 01:08:55.370
"F-G." Whoops, that's not correct.

898
01:08:55.450 --> 01:09:01.689
"G-F-D-F" Dot Delhi underscore temp. "Dot D-E-L-H-I line."

899
01:09:02.390 --> 01:09:10.189
Okay, sorry, checking on the guide dog heard a suspicious noise didn't like it.

900
01:09:10.450 --> 01:09:11.990
"T-E-M-P."

901
01:09:12.430 --> 01:09:18.990
DF dot Delhi underscore temp dot min. Dot M-I-N. Open and close parenthesis.

902
01:09:18.990 --> 01:09:32.890
"Left parent right paren out 26 43.9 in 27. "All right, so the coldest temperature we have recorded for Delhi is 43.9 degrees Fahrenheit.

903
01:09:32.890 --> 01:09:52.510
And I think it was what like 12 ish for Philadelphia so it is never getting as cold in Delhi as it gets in.  Well, I mean, some days it'll, but like it never gets as cold as the coldest temperature in Philadelphia, and that is not immediately obvious from the sonification.

904
01:09:53.410 --> 01:10:01.550
What gives? Well, what is happening is we are creating individual soni series objects for each of our sonifications.

905
01:10:02.350 --> 01:10:12.550
And in order to make a sonification that sounds nice, Astronafy maps and scales.  Each of these sonifications individually. What do I mean by this?

906
01:10:12.550 --> 01:10:39.770
Well, they map the values of our temperatures to pitches independently of each other. So a note that we hear in the Delhi sonification is not even if it's the same like pitch, it's not representing the same temperature that we hear in the Philadelphia sonification, because the pitch mapping is different, because the scaling is different by default.

907
01:10:39.770 --> 01:10:47.810
So again, these are the default settings and they do this to make it sound nice. And in fact this is not a unique thing to Astronafy or sonifications.

908
01:10:48.630 --> 01:11:03.190
The most common Python visualization package matplotlib is going to automatically scale our visualization axes based on the data points you give it as well.  So this is not a sonification unique thing.

909
01:11:03.190 --> 01:11:07.170
But, because these are the default settings we do.

910
01:11:08.950 --> 01:11:10.690
Sorry, guide dog.

911
01:11:11.530 --> 01:11:12.150
Having a moment.

912
01:11:13.410 --> 01:11:26.970
Okay, because these are the default settings, we can fiddle around with them. And the one setting we're going to want to change the pitch mapping parameter will want to change in particular in Astronify is something that they call the zero point.

913
01:11:26.970 --> 01:11:41.070
Basically, they pick some central pitch of the data. By default, they will pick the median value of our data and map that to a central pitch of 440 hertz.

914
01:11:42.550 --> 01:11:56.170
I can't like conceptualize in my mind exactly what 440 hertz sounds like, but that's like sort of I take it the center of the pitch range of the sonification.

915
01:11:56.890 --> 01:12:12.690
And so every time what Astronafy does is it calculates the median of the data and says, all right, we're going to represent anything like this median value as 440 hertz in the sonification.

916
01:12:13.310 --> 01:12:23.110
But because Delhi and Philadelphia are such different temperatures, they have very different median temperatures that are being represented by that same pitch.

917
01:12:23.630 --> 01:12:33.810
Fortunately, we can change again what Astronify calls the zero point so we can change the value that it's mapping to that central pitch.

918
01:12:34.370 --> 01:12:42.850
So what I'm going to do is I'm going to change the, I'm going to change the central or not the central pitch, the zero point.

919
01:12:43.010 --> 01:12:59.550
Sorry, I'm going to change the zero point of the Delhi sonification to be equal to the median value of the Philadelphia temperatures because we know that the Philadelphia sonification is going to be scaled to its median by default.

920
01:12:59.550 --> 01:13:10.870
So I'll just set the Delhi sonification to be scaled to that number two.  I could scale them both to some arbitrary number I could set their zero point for both of them to be like I don't know 70 degrees.

921
01:13:11.690 --> 01:13:17.730
But at this point, you know, this way we only have to change one of the sonifications, we can just muddle around with one of them.

922
01:13:18.470 --> 01:13:32.790
So, the first thing I need to know is hey, what's the median value of the Philadelphia daily temperature, we've printed out the mean the average but I want to know the median because that's what Astronafy by default is using.

923
01:13:33.640 --> 01:13:57.070
So to do that, I'm going to do, df, no, sorry lots of typos today, df.philadelphia underscore temp dot median, m-e-d-i-a-n

924
01:13:57.070 --> 01:14:07.930
"dot m-e-d-i-a-n," and don't forget those parentheses, "left paren, right paren, out 27, 57.0, in 28."

925
01:14:08.470 --> 01:14:14.730
Alright, so the median temperature in that Philadelphia temperature column is 57 degrees.

926
01:14:15.500 --> 01:14:30.570
Now, this line of code that I'm going to use is basically letting me go into the what Astronafy calls the pitch map arguments.  So the sort of parameters it uses to map the values of our data to pitches and the sonification.

927
01:14:30.570 --> 01:14:47.910
I'm going to dig into those, and I'm going to change the zero point pitch map argument to be 57 of the Delhi sonification, because that'll make it the same as the Philadelphia zero point because by default, again, the Philadelphia zero point will be 57.

928
01:14:48.390 --> 01:15:01.570
It's median value.  This is a rather long line of code. I'll go through it here. Maybe one of the helpers can sort of fling it into the chat as well just because it's kind of got like a lot of dots and so on and so forth.

929
01:15:01.570 --> 01:15:05.490
Alright, let's do SONI underscore Delhi.

930
01:15:09.410 --> 01:15:14.450
So I'm calling that object again, that's SONI underscore Delhi object.

931
01:15:15.270 --> 01:15:19.150
And then I want to go pitch underscore mapper.

932
01:15:19.150 --> 01:15:26.390
"P-I-T-C-H line M-A-P-P-E-R."

933
01:15:26.730 --> 01:15:42.590
So SONI underscore Delhi dot pitch P-I-T-C-H underscore mapper M-A-P-P-E-R. So call the pitch mapper, call the way that the Delhi temperature data is being mapped to pitches.

934
01:15:42.590 --> 01:16:04.910
And then we want to call the pitch map args, the pitch map argument. So sort of the parameters of the way these pitches are being mapped. So dot pitch "P-I-T-C-H" underscore map "line M-A-P"underscore args A-R-G-S line "A-R-G-S."

935
01:16:04.910 --> 01:16:17.570
So just to summarize so far, that's SONI underscore Delhi dot pitch underscore mapper dot pitch underscore map underscore args A-R-G-S.

936
01:16:17.570 --> 01:16:35.030
Open square bracket, open quotation marks, then zero underscore point, underscore point, close quotation marks, close brackets.

937
01:16:35.030 --> 01:16:51.670
So basically what have I done here? I've called the pitch map argument zero point.  So that thing we've been discussing, that point in the data that will be represented every time is 440 hertz. I'm calling that from this Delhi sonification.

938
01:16:51.670 --> 01:17:06.390
And I'm going to set it equal to 57 because that is the median value of our Philadelphia temperatures.  I'm just going to hit enter.

939
01:17:07.690 --> 01:17:21.830
All right. That bit is done.  The only two things we have left to do, we have to, in order for it to play properly, we have to re-sonify the data. So basically we have to remap the pitches, the values of our data to the pitches.

940
01:17:21.830 --> 01:17:36.670
"S-O-N-I line." So that's SONI underscore Delhi D-E-L-A-I dot sonify, as we're familiar with, dot S-O-N-I "left right paren in 30."

941
01:17:36.670 --> 01:18:01.290
And before I play this new Delhi sonification, I'm going to first replay some of the Philadelphia sonification just so we have that basis of comparison. I probably won't let it play through the end.  I'll play it for a little bit. So at some point I'll call that like dot stop function, but I'm going to turn off my, I'll type out that SONI Philadelphia dot play with NVDA speech on and then I'll turn it off so we can listen.

942
01:18:01.290 --> 01:18:12.450
"S-O-N-I line P-H-I-L-A-D-E-L-P-H-I-A dot P-L-A-Y left right paren."

943
01:18:12.450 --> 01:18:25.470
So that's SONI underscore, oh my goodness, Alana, you are going to knock my chair over. I'm so sorry. Okay, SONI underscore Philadelphia dot play open and close parentheses.  I'm going to turn off NVDA speech.

944
01:18:26.490 --> 01:18:29.290
And hit play, or hit enter I suppose.

945
01:18:38.840 --> 01:18:40.720
That audio sounds rather weak.

946
01:19:03.340 --> 01:19:10.500
Give me give me a verdict in the room, folks. Can we hear that well enough or should I play it from the recording? It sounded a little weak on my end.

947
01:19:10.500 --> 01:19:14.200
It sounded pretty okay.

948
01:19:15.800 --> 01:19:28.500
Maybe it's that. All righty then. All right, so just, I didn't let that play the whole way through because it's pretty long, but just as our basis of comparison for the Delhi sonification, which will now play I'm going to turn NVDA back on.

949
01:19:28.500 --> 01:19:30.420
"Speech mode beeps, speech mode talk."

950
01:19:30.420 --> 01:19:47.600
All righty, and then I'm just going to do SONI underscore Delhi dot play "S-O-N-I line D-E-L-H-I dot P-L-A-Y left paren right paren" and we'll do the play "speech mode off."

951
01:21:13.900 --> 01:21:24.670
All righty.

952
01:21:25.210 --> 01:21:36.310
So hopefully you could tell that the pitch in general was way higher with that new Delhi sonification than with the original and then with the Philadelphia temperature sonification.

953
01:21:36.310 --> 01:21:45.230
Now the pitch mapping still isn't, I don't believe, identical just based on the way that Astronify maps pitch, but this gives us a little bit more of a comparison.

954
01:21:45.490 --> 01:22:01.130
Now playing those two sonifications side by side, we can definitely, definitely hear that the average temperature, like in general, the temperature in Delhi is higher than the temperature in Philadelphia because the pitch is so much higher in that sonification.

955
01:22:01.130 --> 01:22:11.750
Now I personally think that this sonification with the higher pitches doesn't sound as good. It's not as informative either. You can't hear like the changes between seasons as clearly.

956
01:22:12.590 --> 01:22:25.850
There is quite simply a reason that Astronify, the Astronify team chose to map the pitches in the way they did, that those defaults are set the way they are, and it's because it generally makes a pretty good sound.

957
01:22:25.850 --> 01:22:34.770
I might be a little biased because I was involved in the usability testing for Astronify, but there is a reason that those defaults are the way they are.

958
01:22:35.330 --> 01:22:45.990
So I'm not necessarily telling you that when you have to change the pitch scaling and like the zero point every time, I'm not telling you to do that.

959
01:22:45.990 --> 01:23:04.270
I'm telling you to be aware of the fact that if you are comparing two sonifications that the scaling might be different, and that is no different from a visualization, wherein, you know, for instance, a plotting sort of software like Matplotlib will scale the axes of your visualization automatically based on the points.

960
01:23:04.270 --> 01:23:18.730
It's something to be aware of. We need to be a little bit more aware of it in a sonification than a visualization because visualizations generally have like axis labels where they'll have like, you know, the upper and lower limits of the axes like written on there.

961
01:23:18.730 --> 01:23:32.510
We don't have like a marker in the sonification for like what the upper and lower values are. You have to sort of go and check the data yourself to do it, which is why I was sort of harping on about how we really ought to do that with our data.

962
01:23:34.650 --> 01:23:44.670
And, you know, it's just something really to be aware of, more or less.  I'm really interested in this problem of sort of axis labeling in sonification. How do we give people that information.

963
01:23:45.170 --> 01:23:56.570
So if you have thoughts about it, feel free to pop by office hours or to, you know, shoot me an email.  I'm always happy to chat about that. It's something I'm very interested in. But for now, I just want to make you aware of it.

964
01:23:56.570 --> 01:24:02.590
All right. Sonification scaling. Check.  Any questions in the room?

965
01:24:12.390 --> 01:24:25.770
In practice, how often do you have to do this, like scaling, tuning? Is this like something that you like listen to the sound from like multiple scales? Or what's practice look like for you?

966
01:24:27.630 --> 01:24:37.330
Um, so for me, personally, like when in my daily life, the honest answer is that the computer I use daily won't install Astronify.

967
01:24:38.970 --> 01:24:40.730
That's the honest answer.

968
01:24:41.710 --> 01:24:43.550
That is the most honest answer.

969
01:24:44.690 --> 01:24:55.010
In terms of what I expect back from, you know, when I had a computer that ran Astronify, you might have noticed like when I opened the terminal, it says Rob, because I'm borrowing my friend Rob's computer.

970
01:24:55.190 --> 01:25:08.010
Thank you, Rob, hero of these tutorials. Um, that sounded like sarcasm, but I mean it seriously.  Anyway, back when I had a computer that ran, that ran Astronify properly, you know, it's going to depend on a couple of things.

971
01:25:08.010 --> 01:25:21.070
I mean, realistically, I personally probably wouldn't fiddle with them too much, in part because I think Astronify, the way it maps things by default does give you the best sound.

972
01:25:22.090 --> 01:25:29.930
And regardless, you're going to have to check sort of your maximum and minimum values anyway to sort of know where you're sitting in terms of data values.

973
01:25:29.930 --> 01:25:38.110
It's going to kind of depend on your goal as well. Like if your goal really is to compare two things, then yeah, you might want to fiddle around with this.

974
01:25:38.670 --> 01:25:43.230
But if not, you know, it's really going to depend on what your goals, what you want to do.

975
01:25:43.870 --> 01:25:57.470
There might be other parameters in the sonification that are more typically changed. So in our next little subsection right now we're going to talk about an invert pitch map argument where we like flip the pitches.

976
01:25:57.470 --> 01:26:12.610
I'll get into that in a second.  But I know that I think other usability testers found that like quite useful just regularly to sort of flip the pitches, based on the use cases that Astronify is built for, which is, if you'll recall from last week,

977
01:26:12.750 --> 01:26:15.590
these light curves, this type of astronomical data.

978
01:26:17.090 --> 01:26:22.610
So, it's going to be a mix of like, what are your goals and what are your preferences, realistically.

979
01:26:31.680 --> 01:26:32.320
Thank you.

980
01:26:32.320 --> 01:26:45.810
All right, I hear silence in the room.

981
01:26:46.490 --> 01:26:53.130
So, let's get cracking on the next bit. The only thing to do is to sonify something else.

982
01:26:53.450 --> 01:26:56.030
"Speech mode beeps. Speech mode talk."

983
01:26:56.330 --> 01:27:05.790
Thank you.  All right. Next, let's sonify a very famous city's temperature. Let's sonify New York City's daily temperature.

984
01:27:05.790 --> 01:27:13.930
I am going to call this one Soni underscore NYC because I do not want to type New York City every time. Too many letters.

985
01:27:15.250 --> 01:27:20.210
And now Patrick can tell us whether these values are reasonable because Patrick knows.

986
01:27:21.170 --> 01:27:26.330
So, I've been to New York before. All right, let's do Sonny underscore NYC.

987
01:27:26.330 --> 01:27:30.390
S-O-N-I-N-Y-C.

988
01:27:30.530 --> 01:27:34.150
Sonny underscore NYC, space equals space.

989
01:27:34.270 --> 01:27:36.130
Space equals space.

990
01:27:36.290 --> 01:27:40.750
Hopefully this is starting to get familiar.  We're going to call the sauna series class again.

991
01:27:40.910 --> 01:27:47.790
We're making a new instance of it with the New York data. So, remember those capital S's in sauna series.

992
01:27:48.250 --> 01:27:53.710
"S-O-N-I-S-E-R-I-E-S."

993
01:27:53.970 --> 01:27:54.930
Open your parentheses.

994
01:27:54.930 --> 01:27:56.050
"Left paren."

995
01:27:56.450 --> 01:27:57.890
Type T-B-L for table.

996
01:27:58.130 --> 01:27:59.350
"T-B-L."

997
01:27:59.770 --> 01:28:00.590
Hit comma.

998
01:28:00.910 --> 01:28:01.370
"Comma."

999
01:28:01.830 --> 01:28:02.390
Space.

1000
01:28:02.590 --> 01:28:02.930
"Space."

1001
01:28:03.110 --> 01:28:09.150
We want to specify our time column or time underscore call equals time step.

1002
01:28:09.350 --> 01:28:12.010
Again, remembering those quotation marks around time step.

1003
01:28:12.290 --> 01:28:22.310
"T-I-M-E line C-O-L equals tick T-I-M-E-S-T-E-P."

1004
01:28:22.690 --> 01:28:23.890
Close your quotation marks.

1005
01:28:23.890 --> 01:28:24.230
Tick.

1006
01:28:24.610 --> 01:28:25.290
Hit a comma.

1007
01:28:25.450 --> 01:28:25.870
"Comma."

1008
01:28:26.010 --> 01:28:26.730
Hit space.

1009
01:28:26.910 --> 01:28:27.230
"Space."

1010
01:28:27.470 --> 01:28:31.850
And now we want to specify our value column or val underscore call.

1011
01:28:32.150 --> 01:28:32.270
"C."

1012
01:28:32.630 --> 01:28:33.530
Nope, not C.

1013
01:28:34.090 --> 01:28:35.590
"Val C-O-L equals N."

1014
01:28:35.830 --> 01:28:40.470
Now it's trying to finish for me. Nope.  Me first. Val, V-A-L.

1015
01:28:40.610 --> 01:28:41.810
"V-A-L."

1016
01:28:42.190 --> 01:28:43.190
Underscore call.

1017
01:28:43.350 --> 01:28:45.390
"Line C-O-L."

1018
01:28:45.770 --> 01:28:46.330
Equals.

1019
01:28:46.430 --> 01:28:46.830
"Equals."

1020
01:28:47.890 --> 01:28:48.870
Quotation mark.

1021
01:28:49.050 --> 01:28:50.630
New York City Temp.

1022
01:28:50.770 --> 01:28:56.090
That's New underscore York underscore City underscore Temp.

1023
01:28:56.510 --> 01:28:57.550
Close quotation marks.

1024
01:28:57.710 --> 01:29:00.110
You can see why I wanted to abbreviate it to NYC.

1025
01:29:00.430 --> 01:29:00.710
"Tick.

1026
01:29:01.170 --> 01:29:07.190
N-E-W line Y-O-W."

1027
01:29:07.610 --> 01:29:08.570
Nope, not W.

1028
01:29:08.650 --> 01:29:10.210
"W-R-K."

1029
01:29:10.490 --> 01:29:11.490
New York.

1030
01:29:11.670 --> 01:29:12.750
New underscore York.

1031
01:29:12.750 --> 01:29:18.590
"Line C-I-T-Y line T-E-M-P."

1032
01:29:18.830 --> 01:29:19.090
Tick.

1033
01:29:19.510 --> 01:29:19.710
Right.

1034
01:29:19.750 --> 01:29:20.870
All right.

1035
01:29:20.950 --> 01:29:26.770
That's SONI underscore NYC equals SONI series with those capital S's.

1036
01:29:26.950 --> 01:29:28.150
Open parentheses.

1037
01:29:28.510 --> 01:29:29.250
T-B-L.

1038
01:29:29.670 --> 01:29:30.150
Comma.

1039
01:29:30.450 --> 01:29:35.010
Time underscore call equals in quotation marks time step.

1040
01:29:35.510 --> 01:29:36.450
Close quotation marks.

1041
01:29:36.630 --> 01:29:37.230
Comma.

1042
01:29:37.470 --> 01:29:37.810
Space.

1043
01:29:38.050 --> 01:29:39.730
Val underscore call.

1044
01:29:40.050 --> 01:29:40.430
C-O-L.

1045
01:29:40.430 --> 01:29:42.650
Not call like phone call.

1046
01:29:42.870 --> 01:29:43.570
Call like column.

1047
01:29:44.310 --> 01:29:47.750
Val underscore call equals open quotation marks.

1048
01:29:48.010 --> 01:29:52.110
New underscore York underscore City underscore Temp.

1049
01:29:52.270 --> 01:29:53.610
Close your quotation marks.

1050
01:29:54.130 --> 01:29:56.370
Close your parentheses and hit enter.

1051
01:29:56.690 --> 01:29:57.150
"In 34."

1052
01:29:57.750 --> 01:30:03.450
So we've just made a new instance of the SONNY series object for the New York City temperature.

1053
01:30:04.210 --> 01:30:04.530
All right.

1054
01:30:04.830 --> 01:30:06.810
Next, this should be familiar.

1055
01:30:06.810 --> 01:30:09.130
SONI underscore NYC.

1056
01:30:09.270 --> 01:30:10.730
"S-O-N-I."

1057
01:30:11.110 --> 01:30:12.070
Underscore NYC.

1058
01:30:12.570 --> 01:30:14.270
"Line NYC."

1059
01:30:14.650 --> 01:30:15.610
Dot SONIFY.

1060
01:30:15.890 --> 01:30:17.830
Map our values to pitches.

1061
01:30:18.190 --> 01:30:21.070
Dot S-O-N-I-F-Y.

1062
01:30:21.650 --> 01:30:21.870
"Star."

1063
01:30:22.190 --> 01:30:22.970
Nope, not star.

1064
01:30:23.110 --> 01:30:23.750
Open and close parentheses.

1065
01:30:23.750 --> 01:30:24.130
"Star.

1066
01:30:24.750 --> 01:30:25.270
Left paren.

1067
01:30:25.630 --> 01:30:26.210
Right paren."

1068
01:30:26.630 --> 01:30:29.990
SONNY underscore NYC dot SONNIFY.

1069
01:30:30.130 --> 01:30:31.090
Open and close parentheses.

1070
01:30:31.090 --> 01:30:38.070
Again, remember we've abbreviated New York City as NYC here because I could not be bothered to type that every time.

1071
01:30:39.250 --> 01:30:39.910
"In 35."

1072
01:30:40.290 --> 01:30:42.090
And then SONI underscore NYC.

1073
01:30:42.870 --> 01:30:47.390
S-O-N-I-line-N-Y-C.

1074
01:30:47.870 --> 01:30:49.050
Dot slay.

1075
01:30:49.190 --> 01:30:51.190
Dot P-L-A-Y.

1076
01:30:51.350 --> 01:30:52.730
Open and close the parentheses.

1077
01:30:52.970 --> 01:30:53.470
"Left paren.

1078
01:30:53.730 --> 01:30:54.350
Right paren."

1079
01:30:54.570 --> 01:30:56.550
And I'll turn off NVDA speech.

1080
01:30:56.590 --> 01:30:57.490
"Speech mode off."

1081
01:30:57.670 --> 01:30:58.770
And we'll hope it works again.

1082
01:31:00.550 --> 01:32:16.540
All right.

1083
01:32:16.620 --> 01:32:18.240
I'll stop that a little bit early.

1084
01:32:18.460 --> 01:32:20.920
I just did that dot stop instead of dot play.

1085
01:32:21.320 --> 01:32:27.940
But I'm wondering if anyone could hear ‑‑ I'm hoping it came through on Zoom because I could hear it on my end, though it's a little subtle.

1086
01:32:28.260 --> 01:32:39.900
Could anyone hear in there that there is this odd sort of low note, this sort of bah, bah, bah, really low-pitched note that just sort of showed up again and again sort of at irregular intervals?

1087
01:32:40.160 --> 01:32:41.540
Could people hear that over Zoom?

1088
01:32:43.790 --> 01:32:44.610
We heard it.

1089
01:32:44.670 --> 01:32:48.870
I was wondering if that was a really cold day or something, like a sub zero or something like that.

1090
01:32:49.070 --> 01:32:49.990
Yeah, yeah.

1091
01:32:50.070 --> 01:32:56.770
So it sounds like this really low value that's like coming up again and again and it's like kind of suspicious.

1092
01:32:57.170 --> 01:33:02.070
Like it's the same pitch every time that I could tell it wasn't just showing up in the winter.

1093
01:33:02.350 --> 01:33:05.270
So it has to be like sub zero in the summer.

1094
01:33:05.510 --> 01:33:08.170
That sounds a little questionable.

1095
01:33:08.170 --> 01:33:19.390
So let's check to see whether that was just some like weird sonification effect because I know we've had some crackling noises, you know, things have been a little strange.

1096
01:33:19.630 --> 01:33:20.850
So what am I going to do?

1097
01:33:20.910 --> 01:33:25.010
I'm going to pull out that invert pitch thing that I actually just mentioned to Tony.

1098
01:33:25.010 --> 01:33:45.190
So built into Astronify in that pitch map args thing that we used before is another option called invert, which basically flips the pitches such that now lower temperatures will be represented by high pitches and high temperatures will be represented by low pitches.

1099
01:33:45.190 --> 01:33:50.590
Now, this made a lot of sense given the use case for Astronify, what they were trying to do with it.

1100
01:33:50.870 --> 01:34:04.150
But it's going to be really useful for us here because I think that those really low notes are going to be easier to hear as a high little like chime basically than as that sort of like sort of in the background of our sonification.

1101
01:34:04.150 --> 01:34:07.370
So let's invert our pitches.

1102
01:34:07.930 --> 01:34:16.610
This line of code is going to look really similar to what we did to switch the zero point except instead of calling zero point here, we're going to call invert.

1103
01:34:16.610 --> 01:34:19.870
So it's going to be Sonny underscore NYC.

1104
01:34:20.530 --> 01:34:22.910
Oh, got to turn speech back on.

1105
01:34:23.330 --> 01:34:27.250
"Speech mode be speech mode talk." All right, Soni underscore NYC.

1106
01:34:27.410 --> 01:34:39.490
Oh, and underscore NYC "line NYC" dot pitch mapper again we're calling that pitch mapper the way we bring you know the values of our data to pitch.

1107
01:34:39.490 --> 01:35:01.110
"P. I. T. C. H. Line" dot pitch underscore mapper "M. A. P. P. E. R". dot pitch mapargs

1108
01:35:01.110 --> 01:35:15.610
A. R. G. S. "A. R. G. S." So that's Soni underscore NYC dot pitch underscore mapper M. A. P. P. E. R. dot pitch underscore map underscore args.

1109
01:35:16.390 --> 01:35:34.790
Then open our brackets open our quotation mark. And in this case we're calling the pitch map argument invert. That's I. N. V. E. R. T. Take right bracket open and close in your bracket and your parentheses not in that order.

1110
01:35:34.790 --> 01:35:45.630
Wait what no close your quotation mark in your parentheses. I am struggling with these today, and we're going to set this equal to space equals.

1111
01:35:47.230 --> 01:36:03.750
True with a capital T. So set Soni underscore NYC dot pitch mapper dot pitch map args in brackets and quotation marks invert equals true with a capital T capital T. R. U. E. E.

1112
01:36:04.490 --> 01:36:22.770
Good grief T. R. U. E. Set the pitch map invert argument equals true. So basically by default invert is false.  So that means low values are low pitches. That's kind of intuitive to me here. We're just going to flip it around.

1113
01:36:23.650 --> 01:36:43.110
"In 38" and hit enter. And then we're going to signify Soni underscore NYC S. O. N. I. Underscore NYC line and N. Y. C. Dot signify dot S. O. N. I. F. Y. Open and close your brackets or your parentheses not your brackets.

1114
01:36:44.270 --> 01:37:03.230
Left parent right parent. So Sonny underscore NYC dot sonify open and close those brackets and hit enter "in 39." So now we've remapped our values to pitches with that new invert parameter and then Soni underscore NYC "S. O. N. I. Dot. N.Y."

1115
01:37:03.230 --> 01:37:18.310
Sorry not dot. Not dot Soni underscore NYC "line and N. Y. C." Dot play "dot P. L. A. Y. left paren right paren" open and close those parentheses.

1116
01:37:19.250 --> 01:37:39.030
And then you can just hit enter.  I'm going to turn off NVDA again speech mode off and I might stop and you know I might not make us listen to this whole thing I want us to hear the notes again and remember we flipped the pitches so I would now expect those low notes if they're not some like audio effect from the sonification to show up as rather obvious high notes.

1117
01:38:11.300 --> 01:38:15.200
All right, I'll stop that early because I think we've heard quite a few of them those little

1118
01:38:16.620 --> 01:38:32.520
Those high notes that are in fact the same high note. So it sounds like the same pitch kind of at random intervals to me.  So again, remember that high note is is is low values because we've inverted the pitches.

1119
01:38:32.520 --> 01:38:52.700
What gives why is that in there? What is it like? Are there a bunch of like negative 10 degree days in New York City? Well, my first question is again like we learned last time. We didn't really check the scaling of this thing.  Like maybe the whole New York City temperature column is totally just like a mess.

1120
01:38:53.600 --> 01:39:14.420
So let's check the average temperature in New York City first to see whether that looks roughly acceptable "speech mode beeps speech mode talk." Hopefully this is sort of familiar. This is going to be df dot new underscore York line.

1121
01:39:14.420 --> 01:39:43.420
Okay. Nope. df.new_york_city_temp.mean() open and close parentheses "out 41, 55.6406152185

1122
01:39:45.000 --> 01:39:55.100
56449 in 42." Right. So the average temperature in New York City is 55.6 degrees. That's kind of "selected." Whoops. Oh no.

1123
01:39:56.300 --> 01:40:19.320
"Unselected" the so so that's what like a degree ish lower than the average temperature in Philadelphia so that that doesn't seem too questionable. So let me check. We know that those high notes we were hearing are low values because we flipped the pitches. So let's check the minimum temperature in this column and see what's going on.

1124
01:40:20.340 --> 01:40:37.360
Oh, so that's going to be df dot new underscore York underscore city underscore temp again because in our data frame this column is called New York City temp and then it's going to be dot min open and close parentheses line.

1125
01:40:37.360 --> 01:41:01.560
"df.new_york_city_temp.mean() out 42, minus 99.0, in 43." Whoa, minus 99 degrees Patrick does it ever get down to minus 99 degrees in New York City.

1126
01:41:02.320 --> 01:41:04.540
Yeah, you see the bricks exploding.

1127
01:41:07.360 --> 01:41:23.800
So what's going on why are there negative 99 in our data.  Well, what turns out is happening is that there are some days where we don't have data for the temperature in New York City, and in this particular data set they said well we got to put something there we have to put

1128
01:41:23.800 --> 01:41:33.360
something well, well let's just put a value that no one will think it actually gets to it in New York City yeah negative 99 degrees no one's gonna think it gets to negative 99 degrees that's fine.

1129
01:41:33.760 --> 01:41:45.860
Just fill all the empty spaces with negative 99, but a stratify has no way of knowing that the people in this that made this data set we're like missing value, negative 99.

1130
01:41:45.860 --> 01:42:00.860
So it just goes on its merry way and solidifies it, which is why we're hearing this sort of repeated identical tone.  It's because every time there's a missing data point is solidifying it as if it's real data.

1131
01:42:00.860 --> 01:42:14.100
Now in the spirit of complete transparency. All of these columns originally had missing data.  And for the columns we have already solidified here so that we have something nice and clean to work with.

1132
01:42:14.100 --> 01:42:28.360
I basically replaced those missing values with a method that we call linear interpolation. I'm not going to get into that right now.  If you're curious about how I sort of pre process the data to make it usable for us here.

1133
01:42:29.040 --> 01:42:44.120
Feel free to reach out to me and I'll sort of just, you know, fling the dot py scripts I use that you and you can take a look at it, but all of the, you'll often find in real data that we have missing values.

1134
01:42:44.340 --> 01:42:55.440
This is sort of like a fact of life when you work with data that there's going to be missing values.  Sometimes it'll be filled with some, you know, some, you know,

1135
01:42:56.320 --> 01:43:09.340
impossible numbers so that you can easily identify all that's not real data, as they've done here, but sometimes what you'll see in data science, especially in Python, is you'll see missing values

1136
01:43:09.340 --> 01:43:25.820
filled in as something we call an NAN, or you'll sometimes hear people call it NONs or NANs. I call them NONs, my office mates make fun of me because they call them NANs, but they're NANs, or more accurately a NumPy NAN.

1137
01:43:25.820 --> 01:43:44.500
The pandas has its own version too.  What is this NAN thing? It stands for not a number. And so often if you have like a blank space in a data frame, it will just get parsed as a NAN, a NAN, as a not a number, there's not a number there.

1138
01:43:44.500 --> 01:43:55.760
Now, a lot of functions, especially like pandas and NumPy functions are sort of accustomed to these NAN things, these missing value placeholders, and will sort of ignore them in the way you'd hope.

1139
01:43:56.040 --> 01:44:05.180
But sometimes they will wreak havoc on some functions, and then you'll spend forever like hunting through your data, where's the missing value, where is it, oh my goodness.

1140
01:44:06.000 --> 01:44:16.960
Fortunately, there's a really quick and easy way to check whether or not our data has an NAN, a not a number, this like not an actual number value in it.

1141
01:44:16.960 --> 01:44:34.040
And that is with the NumPy is non or is NAN, is N-A-N function.  So if we do NumPy, N-U-M-P-Y, dot is, dot I-S, N-A-N, N-A-N.

1142
01:44:34.040 --> 01:44:56.180
So all one word, NumPy, dot is N-A-N, open your parentheses, "left paren", D-F, "D-F", dot New York City, D-F dot new underscore York underscore city underscore temp, so calling that column of D-F with, with, you know the New York City temperatures in it.

1143
01:44:56.180 --> 01:45:09.260
"Dot, N-E-W, line, Y-O-R-K, line, C-I-T-Y, line, T-E-M-P, right paren."

1144
01:45:09.260 --> 01:45:26.740
So that should read NumPy dot is N-A-N, open parentheses, D-F dot new underscore York underscore city underscore temp, close parentheses. So basically, please NumPy, check if there are nons in this column of the data frame, and hit enter.

1145
01:45:41.660 --> 01:45:58.660
All right, I'm not going to let it finish.  But what it gives, that's a lot of falses. Well, what it's doing is it's giving us an array, like a, you know, like a big old chunk of values, what we remember learning from Patrick are Booleans, so true or false values.

1146
01:45:58.660 --> 01:46:18.360
It has the exact same shape as this column.  So we said, hey, check if this column has NANs, and it's returning a Boolean array of the same shape as the column we asked it to check, where it says false at any location where there is not a NAN, so there's not a number.

1147
01:46:18.360 --> 01:46:26.920
And if there is a position where there is a NAN in that data frame or that column we had it check, it will return true.

1148
01:46:27.920 --> 01:46:45.780
Okay, but I don't know about you, but I do not want to read 9,265 rows of falses to check whether there's a single true in there.  That sounds horrendous.

1149
01:46:45.780 --> 01:47:03.380
What will we do instead? We're going to call the .any function. So if we type that exact same line that we just did, and then tack a .any, open and close parentheses at the end, that'll tell us whether there is a single true value in that array.

1150
01:47:03.380 --> 01:47:21.240
So basically, even if 9,264 of those values are false and one of them is true, then .any will return true. So basically say, are there literally any NAN values in here?

1151
01:47:21.240 --> 01:47:50.680
So that's going to be numpy.isnan(df.new_york_city_temp)

1152
01:47:53.200 --> 01:47:56.560
And it's trying to tell me, yes, you want to do .any, and it's right this time.

1153
01:47:56.900 --> 01:48:07.000
numpy.isnan, open parentheses, df.new_york_city_temp, close parentheses, and then add at the end .any.

1154
01:48:10.640 --> 01:48:15.320
And call the open and close those parentheses, leave them empty, and hit enter.

1155
01:48:15.560 --> 01:48:30.920
Out, false. There is not a single true value in the return of that isNAN function, which means there are no NANs, no not a numbers in this array.

1156
01:48:31.600 --> 01:48:42.820
That's a good thing, because if there were missing values and they were at random filling some with negative 99.0 and others with NAN, I would be upset.  That would be messy.

1157
01:48:43.500 --> 01:48:52.960
But when dealing with real data, it's good to know the different formats you could get these sort of missing values as.

1158
01:48:53.980 --> 01:49:03.420
So we've checked now, there are no NANs in our data, good to know, but we have these missing values, these negative 99.0s.

1159
01:49:03.680 --> 01:49:12.040
What if I do not want those little chimes in my data? What if I say, that's very annoying, please get rid of them?

1160
01:49:12.500 --> 01:49:18.160
Well, fortunately, actually, before, this is going to be the last bit we cover in this tutorial.

1161
01:49:18.160 --> 01:49:21.140
So before I do this last bit, would anyone like to ask questions?

1162
01:49:22.960 --> 01:49:57.520
I get ahead of myself. Any questions repeatedly coming up or otherwise we will hurdle through the last section of the tutorial.

1163
01:49:58.640 --> 01:50:09.580
I'm hearing silence.  So let us get a move on. All right, let's do this last portion.

1164
01:50:09.580 --> 01:50:17.440
All right.  So as I said, what if we don't want those little chimes for those negative 99.0s in the data that are just sort of there?

1165
01:50:17.900 --> 01:50:33.860
What do we do? Well, fortunately, another pitch map argument that they call min-max percent allows us to sort of clip outermost values from the values we're sonifying from the sonification.

1166
01:50:33.860 --> 01:50:41.680
So, for instance, suppose I set the min-max percent equal to 5,95.

1167
01:50:42.540 --> 01:50:52.180
That means that anything, the 5% lowest values in the data are going to be excluded from the sonification.

1168
01:50:52.180 --> 01:51:02.760
And the 5% highest percent of the data, so the 5% greatest values, are also going to be chopped out of the sonification.

1169
01:51:03.160 --> 01:51:09.420
Do not include them. Get rid of those.  We do not want them here. Cut them out. They are extraneous values.

1170
01:51:10.100 --> 01:51:16.560
So we can just chop out, you know, we know these are really low values. Chop out, you know, the lowest some percent of our data.

1171
01:51:16.560 --> 01:51:21.120
Get rid of them.  Don't include them in the sonification. Please, Astronify, get rid of them.

1172
01:51:21.580 --> 01:51:23.400
And then re-sonify the thing.

1173
01:51:24.720 --> 01:51:30.860
So let's get into that. It's going to look, again, very similar to when we change that invert equals true.

1174
01:51:31.140 --> 01:51:34.540
It's also going to look very similar to when we change that zero point.

1175
01:51:34.540 --> 01:52:04.520
It's going to be soni underscore nyc dot pitchmapper dot pitch_map_args['minmax_percent']

1176
01:52:04.520 --> 01:52:13.100
...

1177
01:52:13.100 --> 01:52:26.860
...

1178
01:52:26.860 --> 01:52:31.100
close your quotation marks tick close your bracket right bracket so that is

1179
01:52:31.100 --> 01:52:41.860
soniunderscore nyc dot pitch underscore mapper dot pitch underscore map underscore args a r g s

1180
01:52:41.860 --> 01:52:51.760
open your brackets open your quotation marks min m i n max m a x underscore percent close your

1181
01:52:51.760 --> 01:52:59.140
quotation marks close your brackets hit space space hit equals space and then this is going

1182
01:52:59.140 --> 01:53:04.320
to be equal to a list type object so we're going to make a list it's going to have two numbers in it

1183
01:53:04.320 --> 01:53:09.040
our lower bound and our upper bound now i'm going to make our lower and i'm going to put this in

1184
01:53:09.040 --> 01:53:13.400
brackets because it's a list left bracket so open our brackets i'm going to make our lower bound

1185
01:53:13.400 --> 01:53:21.920
five "five" what does that mean it means chop out the five percent like the lowest five percent of

1186
01:53:21.920 --> 01:53:29.980
our data because i think that should chop out those negative 99s for us now there is also a

1187
01:53:29.980 --> 01:53:35.520
min max value where you could cut out at exact values um there's a in the in the curriculum

1188
01:53:35.520 --> 01:53:41.040
there's a description of the astronomy parameters that talks about this in detail i tested it i

1189
01:53:41.040 --> 01:53:47.600
the way min max percent sounded a little better so we're gonna stick with that um so that's going

1190
01:53:47.600 --> 01:53:56.140
to be equals open bracket five to cut out the five percent lowest data five comma comma space

1191
01:53:56.140 --> 01:54:00.700
because we want to specify the upper limit and i'm not concerned about the upper limit here because

1192
01:54:00.700 --> 01:54:06.440
uh because the missing values are negative 99s um we probably for the sake of completeness here

1193
01:54:06.440 --> 01:54:11.920
really should have checked the maximum value in uh the new york city temperature column uh

1194
01:54:12.400 --> 01:54:18.580
you know to make sure there was nothing really funky going on there um but uh for now take my

1195
01:54:18.580 --> 01:54:23.800
word for it the missing values are those low numbers also again it would be chaos if they

1196
01:54:23.800 --> 01:54:29.240
had missing values and filled them with like negative 99 and like a thousand that would be

1197
01:54:29.240 --> 01:54:35.200
incredibly rude of them if you ever make a data set don't don't do that that's horrible um okay

1198
01:54:35.200 --> 01:54:43.000
so then i'll do five comma space 100 1 0 0 so basically that means go up to the hundredth

1199
01:54:43.000 --> 01:54:47.760
percentile go up to the maximum value of the data don't cut off anything at the upper end

1200
01:54:47.760 --> 01:54:54.100
"right bracket in 46" all right so we've changed the min max percent again that's going to be

1201
01:54:54.100 --> 01:55:02.000
soni underscore nyc dot pitch mapper dot pitch map args with a pitch underscore map underscore

1202
01:55:02.760 --> 01:55:09.900
open your brackets open your quotation marks min max percent with the um with an underscore between

1203
01:55:09.900 --> 01:55:17.040
min max and percent close quotations close brackets equals open brackets five comma

1204
01:55:17.040 --> 01:55:24.340
space 100 close your brackets hit enter again we're just chopping off the five percent lowest

1205
01:55:24.340 --> 01:55:31.100
data out of our sonification hit enter all right again we need to remap the data to pitch

1206
01:55:31.100 --> 01:55:42.640
so that's uh soni underscore nyc dot sonify s o n i line sonny underscore nyc and n y c dot sonify

1207
01:55:42.640 --> 01:55:52.060
dot s o n i f y open and close your parentheses "left paren right paren in 47" and then soni

1208
01:55:52.620 --> 01:56:05.580
nyc dot play "s o n i line n y c dot p l a y left paren right paren" and remember before i hit play

1209
01:56:05.580 --> 01:56:12.700
here before i hit enter on sonny underscore nyc dot play recall that we have still inverted the

1210
01:56:12.700 --> 01:56:19.820
pitches you haven't uh changed invert equals false um so just keep in mind here that uh

1211
01:56:19.820 --> 01:56:24.360
that you know higher pitches are still representing lower temperatures that's okay

1212
01:56:24.360 --> 01:56:28.960
here because i think what we're interested in is hearing whether those notes are sort of cut out

1213
01:56:28.960 --> 01:56:33.020
and i think they're at least for me they're easier to hear as higher pitches maybe for you they're

1214
01:56:33.020 --> 01:56:38.520
easier to hear as lower pitches but just keep that in mind that we haven't changed that argument so

1215
01:56:38.520 --> 01:56:44.120
it's still there all right let's hit play oh let me turn off npda speech speech mode off all right

1216
01:56:44.120 --> 01:56:45.640
here we go

1217
01:57:33.400 --> 01:57:38.000
i've stopped that but mostly even though i hear some like sort of high pitch like

1218
01:57:38.000 --> 01:57:42.920
almost kind of squeaky noises that aren't super pleasant they're not those individual notes that

1219
01:57:42.920 --> 01:57:50.720
are like those so i'm not hearing anymore those really high pitched single notes the same pitch

1220
01:57:50.720 --> 01:57:56.500
at sort of random intervals sounds better to me though again feel free to play around with the

1221
01:57:56.500 --> 01:58:03.380
min max percent like where you put that cut off if you're interested um that concludes our

1222
01:58:03.380 --> 01:58:09.280
discussion on missing values and also looking at the time it includes our discussion our tutorial

1223
01:58:09.280 --> 01:58:14.640
for today because it's 8 p.m i will say there's even more material available online for the

1224
01:58:14.640 --> 01:58:20.140
curriculum some model testing um so if you're curious about that i highly encourage you to go

1225
01:58:20.140 --> 01:58:25.080
check that out there's also discussion of astronafi's different um arguments i just figured

1226
01:58:25.080 --> 01:58:32.280
i'd rather provide more material online than we could get through because um you know i'd rather

1227
01:58:32.280 --> 01:58:36.960
you guys have more to work with than less so if you're curious to go through a little more there's

1228
01:58:36.960 --> 01:58:41.880
more online on the curriculum which was sent in the email today um and i'm happy to stick around

1229
01:58:41.880 --> 01:58:48.280
and answer questions anything like that um i will uh i'll leave my screen sharing for the moment in

1230
01:58:48.280 --> 01:59:25.340
case there are any coding questions before we wrap up all right i'm gonna stop sharing screen

1231
01:59:25.340 --> 01:59:33.320
then because i'm not hearing coding questions i'm hearing silence and then i'll i'll turn my camera

1232
01:59:33.320 --> 01:59:43.720
back on wow i'm here again all right well i'd just like to say thank you sarah for walking us

1233
01:59:43.720 --> 01:59:48.260
through both last week and this week and for introducing us to this idea of sonification

1234
01:59:48.800 --> 01:59:53.360
um i guess i do have a question for you you know and i'll first just you know say you know we're

1235
01:59:53.360 --> 01:59:59.460
out of time so if anyone wants to uh to hop off the call maybe you have another uh meeting or

1236
01:59:59.460 --> 02:00:05.560
something like that uh maybe you want to eat dinner then um then you know thank you i'll just say a

1237
02:00:05.560 --> 02:00:10.120
thank you for joining us and thank you for uh for spending time learning some of these non-visual data

1238
02:00:10.120 --> 02:00:14.580
science techniques um but sarah i did have a question which i guess is maybe you could give

1239
02:00:14.580 --> 02:00:20.800
us the your um your opinion on the state of sonification or making sonifications and like

1240
02:00:20.800 --> 02:00:27.220
if you think things are going to um get a you know a little more stable or a little more interesting

1241
02:00:27.220 --> 02:00:33.300
in the next couple years like what's next for sonification yeah okay this is this is a really

1242
02:00:33.300 --> 02:00:38.840
interesting question and it's a tough one to answer i think at least within astronomy which

1243
02:00:38.840 --> 02:00:44.960
is where i'm most familiar there's a lot of interest in sonification um there's kind of

1244
02:00:44.960 --> 02:00:51.480
been like an explosion of sonification sort of outreach things and and softwares to do things

1245
02:00:51.480 --> 02:01:00.060
and inherently with interest comes improvement um however another necessarily necessary thing for

1246
02:01:00.060 --> 02:01:07.240
improvement is like community cohesion and money um and so there has to be i think you've talked

1247
02:01:07.240 --> 02:01:10.980
about like these project grants that you would love to see from other you know organizations

1248
02:01:10.980 --> 02:01:16.300
like there needs to be like some money put into these things so that people have like the funding

1249
02:01:16.300 --> 02:01:21.060
to sort of make things more stable and also make things more standardized i've taught you how to

1250
02:01:21.060 --> 02:01:26.540
use astronify here but a different sonification software might sonify things entirely differently

1251
02:01:27.160 --> 02:01:33.980
so i would say in terms of there i i think of sonifications in roughly two aspects sort of

1252
02:01:33.980 --> 02:01:38.520
these like beautiful outreach sonifications that's kind of like the universe of sound

1253
02:01:39.080 --> 02:01:43.560
sonification that i played for you last week where it was like that galactic center sonification i

1254
02:01:43.560 --> 02:01:48.700
think those are in really good shape people really like those um people's responses to those are

1255
02:01:48.700 --> 02:01:53.360
really high they're really great for outreach and community engagement including among the blind

1256
02:01:53.360 --> 02:02:00.500
low vision community things look good for outreach for the more technical sonifications such as

1257
02:02:00.500 --> 02:02:05.700
astronify which are meant for doing research doing science i think that's when things get a

1258
02:02:05.700 --> 02:02:12.600
little more shaky i think things get um yeah a little more experimental but again i think with

1259
02:02:12.600 --> 02:02:19.480
more interest in these things comes more improvement i've talked to um i've talked to people who are

1260
02:02:19.480 --> 02:02:24.300
interested in and working on these things i think part of the problem is again a lot of the funding

1261
02:02:24.300 --> 02:02:30.100
for sonification is still in this outreach realm which helps get that moving quicker just in what

1262
02:02:30.100 --> 02:02:35.580
i've seen and and you know i i don't have all the answers i think things are going to get better

1263
02:02:35.580 --> 02:02:44.260
inherently just because there are people interested how quickly i don't know um that said i do know and

1264
02:02:44.260 --> 02:02:47.460
you also know the people at space telescope science institute who

1265
02:02:47.460 --> 02:02:53.500
make astronify um and they are awesome cannot say enough good things about them so if there

1266
02:02:53.500 --> 02:02:59.560
are problems with astronify in particular do like you know reach out to them uh submit something on

1267
02:02:59.560 --> 02:03:05.240
github their email is on um uh like there's an email on the astronify website which is linked

1268
02:03:05.240 --> 02:03:09.360
in the curriculum like get in touch with them they're they're wonderful people um realistically

1269
02:03:09.360 --> 02:03:14.240
i've actually probably should have reached out to them to ask about the whole mac install issue

1270
02:03:14.240 --> 02:03:19.600
um which maybe i still could do and update everyone but um on the astronify in particular front

1271
02:03:19.600 --> 02:03:27.240
they're uh they're wonderful so yeah yeah scott is very nice thank you yeah um and i would say

1272
02:03:27.240 --> 02:03:31.300
just to add to that i mean i think that it's kind of the non-fun parts of making these libraries

1273
02:03:31.300 --> 02:03:38.700
is kind of the issue you know which is making sure that the sound is compatible across every os

1274
02:03:38.700 --> 02:03:45.160
and then also maybe that there's like fallbacks if you know if it's not creating you know so then

1275
02:03:45.160 --> 02:03:49.360
that's not really the fun kind of programming that's kind of the kind of programming programmers

1276
02:03:49.360 --> 02:03:54.900
didn't exist so i think that does definitely requires to pay somebody to sit and test and

1277
02:03:54.900 --> 02:03:58.700
run it on a lot of different os's and even getting your hands on a bunch of different computers kind

1278
02:03:58.700 --> 02:04:04.340
of costs money so um but yeah i would i'm hoping that it does uh we do get a nice stable library

1279
02:04:04.340 --> 02:04:12.080
um or maybe it's going to be a strong fire um cool anyone else have any questions for sarah

1280
02:04:26.520 --> 02:04:31.820
i think maybe that's a hand raised so you want to hop on the mic you can't tell who it is but

1281
02:04:38.420 --> 02:04:46.040
is that rosanna rosanna it is

1282
02:04:47.820 --> 02:04:53.860
i had asked this in the chat uh but i had to leave so i didn't get the answer if it was given

1283
02:04:54.420 --> 02:05:01.740
but uh can you remind me when these uh office hours are and if they're the same link as what i

1284
02:05:01.740 --> 02:05:08.780
got on as what this was the same link and they are going to be on now on thursday at the same

1285
02:05:08.780 --> 02:05:17.980
time of day as this tutorial so that's 1 p.m eastern time 6 p.m gmt um thursday

1286
02:05:18.500 --> 02:05:21.680
and then that will be the last office hours um sadly

1287
02:05:23.540 --> 02:05:31.720
but you know we will always be available by email i can't because i want to try it uh i don't know

1288
02:05:31.720 --> 02:05:38.320
why but when i did it uh with last week following your instructions for last week it did not play

1289
02:05:38.320 --> 02:05:45.740
sound for me did not did it play this week this not this week either

1290
02:05:47.540 --> 02:05:55.160
well i didn't i wasn't able to follow along this week i did it after the fact last week

1291
02:05:56.360 --> 02:06:04.080
all right well are you on a windows computer yes all right let's go through yeah do you try to come

1292
02:06:04.080 --> 02:06:07.960
to office hours on thursday and we can troubleshoot together or send me an email

1293
02:06:07.960 --> 02:06:14.580
and we'll take a look together um yeah sometimes the terminal is a little laggy with astronify

1294
02:06:15.040 --> 02:06:20.160
um that's my first guess that you know it might be like this like turn it off and on again sort

1295
02:06:20.160 --> 02:06:24.920
of issue which is annoying but that would be my first guess but yeah we can we can diagnose it

1296
02:06:24.920 --> 02:06:32.420
together another one that i'd like to try is i've been on a weight loss program and i've been keeping

1297
02:06:32.420 --> 02:06:37.760
track of my weight you know every week i want to try to make a sound application with that

1298
02:06:38.780 --> 02:06:42.860
that would be this would be a perfect thing for that actually yeah because it's that sort of

1299
02:06:42.860 --> 02:06:48.700
value versus time um that works really well for for astronify so yeah give it a try you just sort

1300
02:06:48.700 --> 02:06:54.560
of have to dump it in like a well you have to dump it in a for our purposes a data frame first

1301
02:06:54.560 --> 02:07:01.240
and then make that into an astropy table to give to astronify um but yeah should be relatively

1302
02:07:01.240 --> 02:07:07.120
straightforward yeah this type of thing is just down my alley i love perfect stuff

1303
02:07:08.340 --> 02:07:16.680
thanks a lot thank you for coming thank you rosanna does anyone else have any questions

1304
02:07:16.680 --> 02:07:26.060
for sarah while we have her a lot of music hi i do have a question hello this is laura

1305
02:07:27.140 --> 02:07:34.020
hi laura hi go ahead oh i'm just gonna ask what i can what what what your question is

1306
02:07:34.020 --> 02:07:39.200
no i was just asking are you gonna have any more classes um coming up any more series

1307
02:07:40.580 --> 02:07:47.260
well i will say um that you know we we're not really a school we're a consultancy right so

1308
02:07:47.260 --> 02:07:52.160
i know maybe there's an opportunity to talk a little bit about iota just briefly at the end

1309
02:07:52.160 --> 02:07:59.480
of everything again um you know we are a small consultancy um where we work on technology you

1310
02:07:59.480 --> 02:08:07.740
know technology including web technologies um curriculum development and uh and very kinds

1311
02:08:07.740 --> 02:08:13.360
of writing so really you know what what i like to do is partner with an organization

1312
02:08:14.240 --> 02:08:19.140
um in this case i kind of brought i thought that this should exist so i went to pandas i thought

1313
02:08:19.140 --> 02:08:24.480
they would be a good partner and i asked them you know could you would you work with us to create

1314
02:08:24.480 --> 02:08:29.900
something for this community and they said yes which was really amazing but you know it really

1315
02:08:29.900 --> 02:08:34.680
it's very helpful to have advocates out there because you know i'm all um you know i do work

1316
02:08:34.680 --> 02:08:38.940
with cool people like sarah um and a bunch of others a couple of other blind folks like krishna

1317
02:08:38.940 --> 02:08:44.120
and people like tony um you know who are my colleagues but you know really what we need is a

1318
02:08:44.120 --> 02:08:51.300
a little more surface area to um if you thought this was a good um you know we do a lot of i love

1319
02:08:51.300 --> 02:08:56.540
to make curriculum i love to teach people stuff if you thought this was useful you know send an email

1320
02:08:56.540 --> 02:09:03.860
to um you know whatever blindness organization you're closest to um or you know other organizations

1321
02:09:03.860 --> 02:09:11.120
that you think might have resources to kind of put behind this and the reality is um you know i i um

1322
02:09:11.120 --> 02:09:16.340
i i used to do a lot of uh this kind of work and then i just put it on the internet and do it for

1323
02:09:16.340 --> 02:09:21.360
free for people and that you know i that's what i always try to do but i also have a little baby at

1324
02:09:21.360 --> 02:09:28.020
home here now and i do need to try to uh to partner with people to bring in some some funding to do

1325
02:09:28.020 --> 02:09:31.860
this kind of work and it does it's very time consuming uh to put together these kinds of

1326
02:09:31.860 --> 02:09:39.440
workshops um and uh so yeah so yeah if you if you have any ideas about organizations to to put me in

1327
02:09:39.440 --> 02:09:44.560
touch with or you know to tell them to reach out to me or you could propose it yourself and just say

1328
02:09:44.560 --> 02:09:51.360
loop me in later you know that's what we do so and and i guess the answer is maybe hopefully and

1329
02:09:51.360 --> 02:09:59.360
we will try thank you very much cheers laura thank you and i reached out also so maybe excellent i

1330
02:09:59.360 --> 02:10:04.400
think yeah i think i have an email from you and i just haven't responded yet no problem no problem

1331
02:10:04.400 --> 02:10:10.620
remember lots of emails come again it's a very kind email and your email was a little longer so

1332
02:10:10.620 --> 02:10:16.480
i wanted to do a more substantial reply and i just haven't got no problem i totally understand it's

1333
02:10:16.480 --> 02:10:20.960
been very useful especially for me coming from data science i wish i knew this before

1334
02:10:20.960 --> 02:10:25.480
like i had this series before i went to data science especially since i'm blind

1335
02:10:25.480 --> 02:10:30.700
it's just made everything so much easier you did a master's correct i think i'm remembering your

1336
02:10:30.700 --> 02:10:36.800
yeah i know it's very appreciated and i think you had a common experience which is experience i had

1337
02:10:36.800 --> 02:10:42.980
doing my phd too which is if you don't mind me saying i'm sorry uh that you we bind people we

1338
02:10:42.980 --> 02:10:49.540
blind and vi folks were often uh wind up spending more time on accessibility than on the thing that

1339
02:10:49.540 --> 02:10:55.920
we're we're actually doing um which is fine and then everyone calls us advocates and and and so

1340
02:10:55.920 --> 02:11:00.160
on but then really sometimes we actually just want to do the work that we signed up to do so it can

1341
02:11:00.160 --> 02:11:04.120
be a little frustrating right um and things could take a long time you know it took it took me a long

1342
02:11:04.120 --> 02:11:09.020
time to finish my phd um and that's reality you know but i guess hopefully at dinner you know

1343
02:11:09.440 --> 02:11:18.740
i was just talking to another blind um uh uh uh you know technologist uh josh melee um and i think

1344
02:11:18.740 --> 02:11:25.160
he's at amazon now but he uh he basically said well when i was younger there was no such thing

1345
02:11:25.160 --> 02:11:30.740
as a screen reader so you know what i mean so i think things are it doesn't almost feel like it

1346
02:11:30.740 --> 02:11:37.740
but but maybe things are improving it's just a little slower than we want thank you yeah thank

1347
02:11:37.740 --> 02:11:45.560
you and also i will say you know um if if you know i've been talking about this um with uh some

1348
02:11:45.560 --> 02:11:50.920
others but basically if if you are the only person if you're a person in your community you've joined

1349
02:11:50.920 --> 02:11:55.860
these workshops and you feel like you've gotten something out of it maybe you've learned a few

1350
02:11:55.860 --> 02:12:01.020
things and you're practicing on your own feel free to use these materials to teach your own workshops

1351
02:12:01.020 --> 02:12:05.680
um i have to talk to the pandas folks about what license they want to release these under but it's

1352
02:12:05.680 --> 02:12:10.560
an open source project i have to imagine if it's remotely possible i will release these under a

1353
02:12:10.560 --> 02:12:15.600
creative commons license and i encourage you to to use them to teach if you want to lead workshops

1354
02:12:15.600 --> 02:12:22.800
for your own community on these same materials i very much encourage you to you don't have to ask

1355
02:12:22.800 --> 02:12:27.480
for permission though i you know i would love to hear about any work you do with these materials

1356
02:12:28.000 --> 02:12:33.360
um so and you can build on them too if if we do manage to put the creative commons license on it

1357
02:12:33.360 --> 02:12:40.220
um which you'll see an update on that in the repository if we manage to do that so um okay i

1358
02:12:40.220 --> 02:12:48.680
mean anyone else have something for sarah a lot of music oh i i have this is tim and i have just

1359
02:12:48.680 --> 02:12:56.300
a it's a more general question these classes have been really really good um if i want to learn more

1360
02:12:56.300 --> 02:13:03.780
about data science pandas astronify are there particularly good sources to go look at to learn

1361
02:13:03.780 --> 02:13:11.780
more to dig deeper into these topics that sounds like maybe a sarah question sonification specific

1362
02:13:11.780 --> 02:13:18.840
or data science in general a lot of both actually well i'll give my answer and then maybe sarah will

1363
02:13:18.840 --> 02:13:25.000
be able to to jump in i would say it's a little bit different difficult to answer that question

1364
02:13:25.000 --> 02:13:29.700
for data science in particular just because i think there are limited materials specifically

1365
02:13:29.700 --> 02:13:37.060
for the visually impaired i would say something one avenue is to try to get good at python and the

1366
02:13:37.060 --> 02:13:43.180
and whatever environment you choose to use whether it be vs code ipython um so i would

1367
02:13:43.180 --> 02:13:49.920
recommend joining some blindness related mailing lists um i i have a issue for this but i will be

1368
02:13:49.920 --> 02:13:56.060
putting in a resources page on the um in the curriculum i haven't actually finished it i

1369
02:13:56.060 --> 02:14:00.860
started it but i haven't finished it but there are there are good mailing lists like python viz

1370
02:14:00.860 --> 02:14:06.900
and program l i think is what it's called which are very active mailing lists for python and

1371
02:14:06.900 --> 02:14:13.460
via visual impaired programming in general um and i am going to you know i've just paid for it or

1372
02:14:13.460 --> 02:14:17.740
whatever and the server got set up and everything so we should have in the next day or two a new

1373
02:14:17.740 --> 02:14:23.200
mailing list for data science unfortunately it does feel like very 1990s with these technical

1374
02:14:23.200 --> 02:14:28.220
blindness communities you know in terms of it's very mailing list driven i do think we

1375
02:14:28.220 --> 02:14:34.360
there's a there's space here for that we could we should have more resources online centralized and

1376
02:14:34.360 --> 02:14:39.340
and books and so on but it feels like very early days so i'm hoping we'll have more of that soon

1377
02:14:39.340 --> 02:14:44.020
i'm hoping to put this online as a resource and i would love to turn it into something like

1378
02:14:44.020 --> 02:14:49.860
something resembling a book in the coming months and years but we'll see um but yeah there's not a

1379
02:14:49.860 --> 02:14:57.060
lot out there just for us vi folks um and i would i learned a lot of this mainly by um first i

1380
02:14:57.060 --> 02:15:01.980
learned python with a book called learn python the hard way this is a long time ago maybe nine or ten

1381
02:15:01.980 --> 02:15:07.720
years ago or maybe even more and then a few years ago i got more into data science and i really just

1382
02:15:07.720 --> 02:15:12.960
sat with a lot of blogs and tutorials and stuff and there i didn't find that there were that many

1383
02:15:12.960 --> 02:15:18.100
books that i found super helpful um for the data science specifically so it was kind of a lot of

1384
02:15:18.100 --> 02:15:23.300
just trying to do things and then looking up how to do them um sarah maybe you have a more

1385
02:15:23.300 --> 02:15:30.580
encouraging answer no i mean i think i think uh this is very much like the researcher way to learn

1386
02:15:30.580 --> 02:15:37.820
to code like i took one coding class in undergrad um that almost fortunately went on zoom part way

1387
02:15:37.820 --> 02:15:41.360
through because that made it much easier for you to follow because everything was online instead

1388
02:15:41.360 --> 02:15:47.460
of like them typing on a screen um so it was almost easier that way but um and then and then

1389
02:15:48.100 --> 02:15:53.000
it was really just like oh i need to do this thing for research well i better google and figure it

1390
02:15:53.000 --> 02:16:00.200
out um and that's that's more or less how i learned to code just google and discover um which is not

1391
02:16:00.200 --> 02:16:06.040
super helpful here i know but um yeah maybe if we do put together a resource list as far as

1392
02:16:06.040 --> 02:16:12.880
learning sonification there are some things i can recommend um first of all for more like outreachy

1393
02:16:12.880 --> 02:16:20.540
talk um the astronomer Wanda Diaz Merced um who's a blind astronomer gave a Ted Talk um

1394
02:16:21.420 --> 02:16:28.340
about sonification i think if you google like blind astronomer like that'll like blind astronomer

1395
02:16:28.340 --> 02:16:33.700
ted talk that'll come up um and i think that was one of my first introductions to sonification

1396
02:16:34.230 --> 02:16:40.500
i've also linked on the curriculum i should have linked um both the astronify web page which is

1397
02:16:40.500 --> 02:16:45.719
all their documentation and then also dr scott fleming from the space telescope science institute

1398
02:16:45.719 --> 02:16:51.340
he's the project lead on astronify his talk about astronify at the space telescope science institute

1399
02:16:51.340 --> 02:16:56.940
day of accessibility that's another great thing to check out um if you send me an email and want to

1400
02:16:56.940 --> 02:17:02.000
know more i'm happy to dig up some more resources for you and then if you really want to dive like

1401
02:17:02.000 --> 02:17:08.540
into the deep end of sonification there is a sonification world chat um every used to be

1402
02:17:08.540 --> 02:17:14.160
every month now it's maybe every couple months ish um that's on zoom with like sonification

1403
02:17:14.160 --> 02:17:19.260
researchers from all over the world um and i could if you reach out to me i could see about

1404
02:17:19.260 --> 02:17:24.120
getting you added to that uh to that group as well if you're really interested though um that one

1405
02:17:24.120 --> 02:17:28.160
tends to be a little bit more technical on the research side as opposed to like the using

1406
02:17:28.160 --> 02:17:35.299
sonification side so um that's my little spiel there and with that tim thank you tim if i'm

1407
02:17:35.299 --> 02:17:41.540
getting your name correct um and let me just give a little i'm gonna um probably end the recording

1408
02:17:41.540 --> 02:17:44.520
now in a minute but i just want to give people kind of a few like words of encouragement

1409
02:17:44.959 --> 02:17:51.660
i think for here um and basically i just want to say first of all you know the usual that

1410
02:17:51.660 --> 02:17:59.020
we're vi folks we're blind via folks it this is definitely an area where you know the tooling

1411
02:17:59.540 --> 02:18:03.400
could be you know that you know we've used some tools here that are definitely usable and

1412
02:18:03.400 --> 02:18:08.320
and you can get a lot done and i would say you can do most things but it takes it is harder we

1413
02:18:08.320 --> 02:18:14.100
it takes a lot of us more time to learn it and also we don't have access to some of the same

1414
02:18:14.100 --> 02:18:21.080
approaches that our side of side of colleagues would um with that said i think that you know

1415
02:18:21.080 --> 02:18:24.760
we're having a little bit of a moment for this stuff that people are really working on this

1416
02:18:24.760 --> 02:18:30.180
there are organizations that are becoming more interested in it um that and i'd also say if you

1417
02:18:30.180 --> 02:18:34.340
can manage to to develop a little bit of your python skills if you can manage to develop a

1418
02:18:34.340 --> 02:18:42.020
little bit of your data science skills then it is a useful moment to to you could you could really

1419
02:18:42.020 --> 02:18:46.660
have make a difference in terms of the tools that are available to people their curriculum and the

1420
02:18:46.660 --> 02:18:52.280
resources that are available to people um or even if you wind up teaching using other using some of

1421
02:18:52.280 --> 02:18:57.020
the resources we've created and so on then then that could really make a difference for other

1422
02:18:57.020 --> 02:19:02.840
people so it's you know it's a typical area but it's i do think things are moving i think it's a

1423
02:19:02.840 --> 02:19:07.340
good time to get involved i also think it's an area that makes sense for blind folks there's no

1424
02:19:07.340 --> 02:19:15.280
reason we can't do data science um it's a very it's it's a very non-visual medium um when you

1425
02:19:15.280 --> 02:19:21.639
actually get down to it and when you actually learn how things work um so i'll say that and um

1426
02:19:21.639 --> 02:19:28.799
i'll also say you know i'm i'm trying i'm i'm trying to activate some folks who you know maybe

1427
02:19:28.799 --> 02:19:33.420
they have resources maybe their organizations and so on and also to create some resources so i'll be

1428
02:19:33.420 --> 02:19:37.860
creating this mailing list i have a website up called blind coders.com it basically has nothing

1429
02:19:37.860 --> 02:19:43.879
on it but we will you know put this on it i'm going to put this up there if i can or at least link it

1430
02:19:43.879 --> 02:19:48.980
if pandas wants to host it i'm going to link to other projects that i know about um if people

1431
02:19:48.980 --> 02:19:53.880
if the mailing list is active if people get involved i will try to build that out i'll

1432
02:19:53.880 --> 02:19:59.240
try to maybe maybe we'll add forums maybe we'll add other resources maybe we'll add you know

1433
02:19:59.240 --> 02:20:04.260
whatever maybe we'll try to host other people to to write some curriculum and do some workshops

1434
02:20:04.260 --> 02:20:11.280
like this um and um and i'll say you know stick with it like hopefully this provides you some

1435
02:20:11.280 --> 02:20:16.920
basis for learning um check out some the book once i send out the resources check out the other

1436
02:20:16.920 --> 02:20:25.100
resources for learning um and and um and you know i think that you you know you you can really

1437
02:20:25.100 --> 02:20:30.140
actually you know uh it may be discouraging you know you do a few days of it and you're like this

1438
02:20:30.140 --> 02:20:33.820
is really hard but if you stick with it for a year you stick with it for two years people always

1439
02:20:34.460 --> 02:20:37.980
overestimate what they think they can do in a day but they underestimate what they can do in a year

1440
02:20:37.980 --> 02:20:44.700
in a year if you stick with stuff like this you um you will you'll be actually be a programmer you

1441
02:20:44.700 --> 02:20:48.820
know what i mean and people get hired and so on after doing only a year or two of learning how to

1442
02:20:48.820 --> 02:20:56.220
program and i've already seen some of you like people like nickel um and joy you know they've

1443
02:20:56.220 --> 02:21:00.880
been doing contributions they did nickel did his first github contribute open source contribution

1444
02:21:00.880 --> 02:21:06.780
on github that i saw during this and um and that's very encouraging to see and there's a lot

1445
02:21:06.780 --> 02:21:12.500
of meetings and so on you can jump on um there's the the um jupiter accessibility meetings that

1446
02:21:12.500 --> 02:21:19.000
meet month i think monthly or something like that there are the sonification world chat um these

1447
02:21:19.000 --> 02:21:24.720
these are open source as a culture where you should just speak up jump in create issues create

1448
02:21:24.720 --> 02:21:30.340
poll requests are basically suggestions for how things should be and and also open meetings so

1449
02:21:30.340 --> 02:21:35.320
and you you you're allowed to speak up you're allowed to participate um you know i think we're

1450
02:21:35.320 --> 02:21:40.980
often discouraged we're often encouraged to be in the shadows and be um you know not speak up as blind

1451
02:21:40.980 --> 02:21:47.160
folk but um but i think you know we need to so okay so thank you very much i really appreciate

1452
02:21:47.160 --> 02:21:53.900
you all making this such an amazing energetic workshops we had over 350 people sign up for

1453
02:21:53.900 --> 02:21:59.140
these workshops we had some of the workshops they had set you know 50 70 80 people in them

1454
02:21:59.780 --> 02:22:04.560
there's tons of people following on home they're sending people are sending updates people are

1455
02:22:04.560 --> 02:22:09.120
translating the curriculum i'm feeling a lot of energy with this and i hope to keep it up i hope

1456
02:22:09.120 --> 02:22:11.800
to create more resources for you all so thank you very much
